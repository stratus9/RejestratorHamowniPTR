
Rejestrator_hamowni_examples.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00802000  00002726  000027ba  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  008020bc  008020bc  00002878  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000508  00000000  00000000  000028e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000084d4  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a4c  00000000  00000000  0000b2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069bd  00000000  00000000  0000cd10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cec  00000000  00000000  000136d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003140b  00000000  00000000  000143bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032b8  00000000  00000000  000457c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b8  00000000  00000000  00048a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b2c4  00000000  00000000  00048f38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__bad_interrupt>
       6:	00 00       	nop
       8:	1d c1       	rjmp	.+570    	; 0x244 <__bad_interrupt>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__bad_interrupt>
       e:	00 00       	nop
      10:	19 c1       	rjmp	.+562    	; 0x244 <__bad_interrupt>
      12:	00 00       	nop
      14:	17 c1       	rjmp	.+558    	; 0x244 <__bad_interrupt>
      16:	00 00       	nop
      18:	15 c1       	rjmp	.+554    	; 0x244 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	13 c1       	rjmp	.+550    	; 0x244 <__bad_interrupt>
      1e:	00 00       	nop
      20:	11 c1       	rjmp	.+546    	; 0x244 <__bad_interrupt>
      22:	00 00       	nop
      24:	0f c1       	rjmp	.+542    	; 0x244 <__bad_interrupt>
      26:	00 00       	nop
      28:	0d c1       	rjmp	.+538    	; 0x244 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0b c1       	rjmp	.+534    	; 0x244 <__bad_interrupt>
      2e:	00 00       	nop
      30:	09 c1       	rjmp	.+530    	; 0x244 <__bad_interrupt>
      32:	00 00       	nop
      34:	07 c1       	rjmp	.+526    	; 0x244 <__bad_interrupt>
      36:	00 00       	nop
      38:	05 c1       	rjmp	.+522    	; 0x244 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	03 c1       	rjmp	.+518    	; 0x244 <__bad_interrupt>
      3e:	00 00       	nop
      40:	01 c1       	rjmp	.+514    	; 0x244 <__bad_interrupt>
      42:	00 00       	nop
      44:	ff c0       	rjmp	.+510    	; 0x244 <__bad_interrupt>
      46:	00 00       	nop
      48:	fd c0       	rjmp	.+506    	; 0x244 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fb c0       	rjmp	.+502    	; 0x244 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f9 c0       	rjmp	.+498    	; 0x244 <__bad_interrupt>
      52:	00 00       	nop
      54:	f7 c0       	rjmp	.+494    	; 0x244 <__bad_interrupt>
      56:	00 00       	nop
      58:	f5 c0       	rjmp	.+490    	; 0x244 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c0       	rjmp	.+486    	; 0x244 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f1 c0       	rjmp	.+482    	; 0x244 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__vector_25>
      68:	0c 94 1a 13 	jmp	0x2634	; 0x2634 <__vector_26>
      6c:	eb c0       	rjmp	.+470    	; 0x244 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e9 c0       	rjmp	.+466    	; 0x244 <__bad_interrupt>
      72:	00 00       	nop
      74:	e7 c0       	rjmp	.+462    	; 0x244 <__bad_interrupt>
      76:	00 00       	nop
      78:	e5 c0       	rjmp	.+458    	; 0x244 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e3 c0       	rjmp	.+454    	; 0x244 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e1 c0       	rjmp	.+450    	; 0x244 <__bad_interrupt>
      82:	00 00       	nop
      84:	df c0       	rjmp	.+446    	; 0x244 <__bad_interrupt>
      86:	00 00       	nop
      88:	dd c0       	rjmp	.+442    	; 0x244 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	db c0       	rjmp	.+438    	; 0x244 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d9 c0       	rjmp	.+434    	; 0x244 <__bad_interrupt>
      92:	00 00       	nop
      94:	d7 c0       	rjmp	.+430    	; 0x244 <__bad_interrupt>
      96:	00 00       	nop
      98:	d5 c0       	rjmp	.+426    	; 0x244 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d3 c0       	rjmp	.+422    	; 0x244 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	d1 c0       	rjmp	.+418    	; 0x244 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	cf c0       	rjmp	.+414    	; 0x244 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cd c0       	rjmp	.+410    	; 0x244 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cb c0       	rjmp	.+406    	; 0x244 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c9 c0       	rjmp	.+402    	; 0x244 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c7 c0       	rjmp	.+398    	; 0x244 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c5 c0       	rjmp	.+394    	; 0x244 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c3 c0       	rjmp	.+390    	; 0x244 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c1 c0       	rjmp	.+386    	; 0x244 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	bf c0       	rjmp	.+382    	; 0x244 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bd c0       	rjmp	.+378    	; 0x244 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	bb c0       	rjmp	.+374    	; 0x244 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b9 c0       	rjmp	.+370    	; 0x244 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b7 c0       	rjmp	.+366    	; 0x244 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b5 c0       	rjmp	.+362    	; 0x244 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b3 c0       	rjmp	.+358    	; 0x244 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b1 c0       	rjmp	.+354    	; 0x244 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	af c0       	rjmp	.+350    	; 0x244 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ad c0       	rjmp	.+346    	; 0x244 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ab c0       	rjmp	.+342    	; 0x244 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a9 c0       	rjmp	.+338    	; 0x244 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a7 c0       	rjmp	.+334    	; 0x244 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a5 c0       	rjmp	.+330    	; 0x244 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a3 c0       	rjmp	.+326    	; 0x244 <__bad_interrupt>
      fe:	00 00       	nop
     100:	a1 c0       	rjmp	.+322    	; 0x244 <__bad_interrupt>
     102:	00 00       	nop
     104:	9f c0       	rjmp	.+318    	; 0x244 <__bad_interrupt>
     106:	00 00       	nop
     108:	9d c0       	rjmp	.+314    	; 0x244 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9b c0       	rjmp	.+310    	; 0x244 <__bad_interrupt>
     10e:	00 00       	nop
     110:	99 c0       	rjmp	.+306    	; 0x244 <__bad_interrupt>
     112:	00 00       	nop
     114:	97 c0       	rjmp	.+302    	; 0x244 <__bad_interrupt>
     116:	00 00       	nop
     118:	95 c0       	rjmp	.+298    	; 0x244 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	93 c0       	rjmp	.+294    	; 0x244 <__bad_interrupt>
     11e:	00 00       	nop
     120:	91 c0       	rjmp	.+290    	; 0x244 <__bad_interrupt>
     122:	00 00       	nop
     124:	8f c0       	rjmp	.+286    	; 0x244 <__bad_interrupt>
     126:	00 00       	nop
     128:	8d c0       	rjmp	.+282    	; 0x244 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	8b c0       	rjmp	.+278    	; 0x244 <__bad_interrupt>
     12e:	00 00       	nop
     130:	89 c0       	rjmp	.+274    	; 0x244 <__bad_interrupt>
     132:	00 00       	nop
     134:	87 c0       	rjmp	.+270    	; 0x244 <__bad_interrupt>
     136:	00 00       	nop
     138:	85 c0       	rjmp	.+266    	; 0x244 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	83 c0       	rjmp	.+262    	; 0x244 <__bad_interrupt>
     13e:	00 00       	nop
     140:	81 c0       	rjmp	.+258    	; 0x244 <__bad_interrupt>
     142:	00 00       	nop
     144:	7f c0       	rjmp	.+254    	; 0x244 <__bad_interrupt>
     146:	00 00       	nop
     148:	7d c0       	rjmp	.+250    	; 0x244 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	7b c0       	rjmp	.+246    	; 0x244 <__bad_interrupt>
     14e:	00 00       	nop
     150:	79 c0       	rjmp	.+242    	; 0x244 <__bad_interrupt>
     152:	00 00       	nop
     154:	77 c0       	rjmp	.+238    	; 0x244 <__bad_interrupt>
     156:	00 00       	nop
     158:	75 c0       	rjmp	.+234    	; 0x244 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	73 c0       	rjmp	.+230    	; 0x244 <__bad_interrupt>
     15e:	00 00       	nop
     160:	71 c0       	rjmp	.+226    	; 0x244 <__bad_interrupt>
     162:	00 00       	nop
     164:	6f c0       	rjmp	.+222    	; 0x244 <__bad_interrupt>
     166:	00 00       	nop
     168:	6d c0       	rjmp	.+218    	; 0x244 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6b c0       	rjmp	.+214    	; 0x244 <__bad_interrupt>
     16e:	00 00       	nop
     170:	69 c0       	rjmp	.+210    	; 0x244 <__bad_interrupt>
     172:	00 00       	nop
     174:	67 c0       	rjmp	.+206    	; 0x244 <__bad_interrupt>
     176:	00 00       	nop
     178:	65 c0       	rjmp	.+202    	; 0x244 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	63 c0       	rjmp	.+198    	; 0x244 <__bad_interrupt>
     17e:	00 00       	nop
     180:	61 c0       	rjmp	.+194    	; 0x244 <__bad_interrupt>
     182:	00 00       	nop
     184:	5f c0       	rjmp	.+190    	; 0x244 <__bad_interrupt>
     186:	00 00       	nop
     188:	5d c0       	rjmp	.+186    	; 0x244 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5b c0       	rjmp	.+182    	; 0x244 <__bad_interrupt>
     18e:	00 00       	nop
     190:	59 c0       	rjmp	.+178    	; 0x244 <__bad_interrupt>
     192:	00 00       	nop
     194:	57 c0       	rjmp	.+174    	; 0x244 <__bad_interrupt>
     196:	00 00       	nop
     198:	55 c0       	rjmp	.+170    	; 0x244 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	53 c0       	rjmp	.+166    	; 0x244 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	51 c0       	rjmp	.+162    	; 0x244 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4f c0       	rjmp	.+158    	; 0x244 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	4b c0       	rjmp	.+150    	; 0x244 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	49 c0       	rjmp	.+146    	; 0x244 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	47 c0       	rjmp	.+142    	; 0x244 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	45 c0       	rjmp	.+138    	; 0x244 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	43 c0       	rjmp	.+134    	; 0x244 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	41 c0       	rjmp	.+130    	; 0x244 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	3f c0       	rjmp	.+126    	; 0x244 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	3d c0       	rjmp	.+122    	; 0x244 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	3b c0       	rjmp	.+118    	; 0x244 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	39 c0       	rjmp	.+114    	; 0x244 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	37 c0       	rjmp	.+110    	; 0x244 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	35 c0       	rjmp	.+106    	; 0x244 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	33 c0       	rjmp	.+102    	; 0x244 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	31 c0       	rjmp	.+98     	; 0x244 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2f c0       	rjmp	.+94     	; 0x244 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2d c0       	rjmp	.+90     	; 0x244 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2b c0       	rjmp	.+86     	; 0x244 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	29 c0       	rjmp	.+82     	; 0x244 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__vector_125>
     1f8:	0c 94 fd 10 	jmp	0x21fa	; 0x21fa <__vector_126>
     1fc:	3c 0b       	sbc	r19, r28
     1fe:	3f 0b       	sbc	r19, r31
     200:	42 0b       	sbc	r20, r18
     202:	45 0b       	sbc	r20, r21
     204:	48 0b       	sbc	r20, r24
     206:	4b 0b       	sbc	r20, r27
     208:	4e 0b       	sbc	r20, r30

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e2       	ldi	r29, 0x2F	; 47
     214:	de bf       	out	0x3e, r29	; 62

00000216 <__do_copy_data>:
     216:	10 e2       	ldi	r17, 0x20	; 32
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e2       	ldi	r27, 0x20	; 32
     21c:	e6 e2       	ldi	r30, 0x26	; 38
     21e:	f7 e2       	ldi	r31, 0x27	; 39
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	ac 3b       	cpi	r26, 0xBC	; 188
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	23 e2       	ldi	r18, 0x23	; 35
     22e:	ac eb       	ldi	r26, 0xBC	; 188
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a8 33       	cpi	r26, 0x38	; 56
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <main>
     240:	0c 94 91 13 	jmp	0x2722	; 0x2722 <_exit>

00000244 <__bad_interrupt>:
     244:	dd ce       	rjmp	.-582    	; 0x0 <__vectors>

00000246 <ui_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     246:	e0 e0       	ldi	r30, 0x00	; 0
     248:	f6 e0       	ldi	r31, 0x06	; 6
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     24e:	82 e0       	ldi	r24, 0x02	; 2
     250:	85 83       	std	Z+5, r24	; 0x05
     252:	84 e0       	ldi	r24, 0x04	; 4
     254:	85 83       	std	Z+5, r24	; 0x05
     256:	80 e1       	ldi	r24, 0x10	; 16
     258:	85 83       	std	Z+5, r24	; 0x05
     25a:	80 e2       	ldi	r24, 0x20	; 32
     25c:	85 83       	std	Z+5, r24	; 0x05
     25e:	80 e4       	ldi	r24, 0x40	; 64
     260:	85 83       	std	Z+5, r24	; 0x05
     262:	80 e8       	ldi	r24, 0x80	; 128
     264:	85 83       	std	Z+5, r24	; 0x05
     266:	08 95       	ret

00000268 <ui_powerdown>:
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	f6 e0       	ldi	r31, 0x06	; 6
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	85 83       	std	Z+5, r24	; 0x05
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	85 83       	std	Z+5, r24	; 0x05
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	85 83       	std	Z+5, r24	; 0x05
     278:	80 e1       	ldi	r24, 0x10	; 16
     27a:	85 83       	std	Z+5, r24	; 0x05
     27c:	80 e2       	ldi	r24, 0x20	; 32
     27e:	85 83       	std	Z+5, r24	; 0x05
     280:	80 e4       	ldi	r24, 0x40	; 64
     282:	85 83       	std	Z+5, r24	; 0x05
     284:	80 e8       	ldi	r24, 0x80	; 128
     286:	85 83       	std	Z+5, r24	; 0x05
     288:	08 95       	ret

0000028a <ui_wakeup>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     290:	08 95       	ret

00000292 <ui_com_open>:
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     298:	08 95       	ret

0000029a <ui_com_close>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     29a:	e0 e0       	ldi	r30, 0x00	; 0
     29c:	f6 e0       	ldi	r31, 0x06	; 6
     29e:	84 e0       	ldi	r24, 0x04	; 4
     2a0:	85 83       	std	Z+5, r24	; 0x05
     2a2:	80 e1       	ldi	r24, 0x10	; 16
     2a4:	85 83       	std	Z+5, r24	; 0x05
     2a6:	80 e2       	ldi	r24, 0x20	; 32
     2a8:	85 83       	std	Z+5, r24	; 0x05
     2aa:	80 e4       	ldi	r24, 0x40	; 64
     2ac:	85 83       	std	Z+5, r24	; 0x05
     2ae:	80 e8       	ldi	r24, 0x80	; 128
     2b0:	85 83       	std	Z+5, r24	; 0x05
     2b2:	08 95       	ret

000002b4 <ui_com_rx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2b4:	80 e1       	ldi	r24, 0x10	; 16
     2b6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     2ba:	08 95       	ret

000002bc <ui_com_rx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2bc:	80 e1       	ldi	r24, 0x10	; 16
     2be:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     2c2:	08 95       	ret

000002c4 <ui_com_tx_start>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2c4:	80 e2       	ldi	r24, 0x20	; 32
     2c6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     2ca:	08 95       	ret

000002cc <ui_com_tx_stop>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     2d2:	08 95       	ret

000002d4 <ui_com_error>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2d4:	80 e4       	ldi	r24, 0x40	; 64
     2d6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     2da:	08 95       	ret

000002dc <ui_com_overflow>:
     2dc:	80 e8       	ldi	r24, 0x80	; 128
     2de:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     2e2:	08 95       	ret

000002e4 <ui_process>:
	LED_On(LED7_GPIO);
}

void ui_process(uint16_t framenumber)
{
	if (0 == framenumber) {
     2e4:	00 97       	sbiw	r24, 0x00	; 0
     2e6:	21 f4       	brne	.+8      	; 0x2f0 <ui_process+0xc>
     2e8:	82 e0       	ldi	r24, 0x02	; 2
     2ea:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     2ee:	08 95       	ret
		LED_On(LED1_GPIO);
	}
	if (1000 == framenumber) {
     2f0:	88 3e       	cpi	r24, 0xE8	; 232
     2f2:	93 40       	sbci	r25, 0x03	; 3
     2f4:	19 f4       	brne	.+6      	; 0x2fc <ui_process+0x18>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     2f6:	82 e0       	ldi	r24, 0x02	; 2
     2f8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     2fc:	08 95       	ret

000002fe <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	27 97       	sbiw	r28, 0x07	; 7
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	de bf       	out	0x3e, r29	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     310:	8f ef       	ldi	r24, 0xFF	; 255
     312:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     316:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     31a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     31e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     322:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     326:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     32a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     32e:	64 e0       	ldi	r22, 0x04	; 4
     330:	81 e4       	ldi	r24, 0x41	; 65
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 31 0a 	call	0x1462	; 0x1462 <ccp_write_io>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
     338:	6c e1       	ldi	r22, 0x1C	; 28
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	0e 94 37 0a 	call	0x146e	; 0x146e <nvm_read_byte>
			|| (CONFIG_SYSCLK_PSBCDIV != SYSCLK_PSBCDIV_1_1)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV,
				CONFIG_SYSCLK_PSBCDIV);
	}
#if (CONFIG_OSC_RC32_CAL==48000000UL)
	MSB(cal) = nvm_read_production_signature_row(
     342:	8a 83       	std	Y+2, r24	; 0x02
     344:	6d e1       	ldi	r22, 0x1D	; 29
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 37 0a 	call	0x146e	; 0x146e <nvm_read_byte>
			nvm_get_production_signature_row_offset(USBRCOSC));
	LSB(cal) = nvm_read_production_signature_row(
     34e:	89 83       	std	Y+1, r24	; 0x01
	/*
	* If a device has an uncalibrated value in the
	* production signature row (early sample part), load a
	* sane default calibration value.
	*/
	if (cal == 0xFFFF) {
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	9a 81       	ldd	r25, Y+2	; 0x02
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	21 f4       	brne	.+8      	; 0x360 <sysclk_init+0x62>
		cal = 0x2340;
     358:	80 e4       	ldi	r24, 0x40	; 64
     35a:	93 e2       	ldi	r25, 0x23	; 35
     35c:	89 83       	std	Y+1, r24	; 0x01
     35e:	9a 83       	std	Y+2, r25	; 0x02
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	9a 81       	ldd	r25, Y+2	; 0x02
     364:	8b 83       	std	Y+3, r24	; 0x03
     366:	9c 83       	std	Y+4, r25	; 0x04
		DFLLRC2M.CALB=MSB(calib);
#endif
		break;

	case OSC_ID_RC32MHZ:
		DFLLRC32M.CALA=LSB(calib);
     368:	e0 e6       	ldi	r30, 0x60	; 96
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	82 83       	std	Z+2, r24	; 0x02
		DFLLRC32M.CALB=MSB(calib);
     36e:	8c 81       	ldd	r24, Y+4	; 0x04
     370:	83 83       	std	Z+3, r24	; 0x03

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     372:	8f b7       	in	r24, 0x3f	; 63
     374:	8e 83       	std	Y+6, r24	; 0x06
	cpu_irq_disable();
     376:	f8 94       	cli
	return flags;
     378:	9e 81       	ldd	r25, Y+6	; 0x06
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     37a:	e0 e5       	ldi	r30, 0x50	; 80
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	82 60       	ori	r24, 0x02	; 2
     382:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     384:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     386:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     388:	81 ff       	sbrs	r24, 1
     38a:	fd cf       	rjmp	.-6      	; 0x386 <sysclk_init+0x88>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     38c:	8f b7       	in	r24, 0x3f	; 63
     38e:	8d 83       	std	Y+5, r24	; 0x05
	cpu_irq_disable();
     390:	f8 94       	cli
	return flags;
     392:	9d 81       	ldd	r25, Y+5	; 0x05
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     394:	00 e5       	ldi	r16, 0x50	; 80
     396:	10 e0       	ldi	r17, 0x00	; 0
     398:	d8 01       	movw	r26, r16
     39a:	16 96       	adiw	r26, 0x06	; 6
     39c:	8c 91       	ld	r24, X
     39e:	16 97       	sbiw	r26, 0x06	; 6
     3a0:	89 7f       	andi	r24, 0xF9	; 249
     3a2:	16 96       	adiw	r26, 0x06	; 6
     3a4:	8c 93       	st	X, r24
     3a6:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     3a8:	e0 e6       	ldi	r30, 0x60	; 96
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 e8       	ldi	r24, 0x80	; 128
     3ae:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     3b0:	8b eb       	ldi	r24, 0xBB	; 187
     3b2:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     3b4:	16 96       	adiw	r26, 0x06	; 6
     3b6:	8c 91       	ld	r24, X
     3b8:	16 97       	sbiw	r26, 0x06	; 6
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	16 96       	adiw	r26, 0x06	; 6
     3be:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     3c0:	80 81       	ld	r24, Z
     3c2:	81 60       	ori	r24, 0x01	; 1
     3c4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3c6:	9f bf       	out	0x3f, r25	; 63
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	80 e4       	ldi	r24, 0x40	; 64
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 31 0a 	call	0x1462	; 0x1462 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3d2:	8f b7       	in	r24, 0x3f	; 63
     3d4:	8f 83       	std	Y+7, r24	; 0x07
	cpu_irq_disable();
     3d6:	f8 94       	cli
	return flags;
     3d8:	9f 81       	ldd	r25, Y+7	; 0x07
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     3da:	f8 01       	movw	r30, r16
     3dc:	80 81       	ld	r24, Z
     3de:	8e 7f       	andi	r24, 0xFE	; 254
     3e0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3e2:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     3e4:	27 96       	adiw	r28, 0x07	; 7
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	08 95       	ret

000003f4 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3fe:	9f b7       	in	r25, 0x3f	; 63
     400:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     402:	f8 94       	cli
	return flags;
     404:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     406:	e8 2f       	mov	r30, r24
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	e0 59       	subi	r30, 0x90	; 144
     40c:	ff 4f       	sbci	r31, 0xFF	; 255
     40e:	60 95       	com	r22
     410:	80 81       	ld	r24, Z
     412:	68 23       	and	r22, r24
     414:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     416:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	1f 92       	push	r1
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     42a:	9f b7       	in	r25, 0x3f	; 63
     42c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     42e:	f8 94       	cli
	return flags;
     430:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     432:	e8 2f       	mov	r30, r24
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	e0 59       	subi	r30, 0x90	; 144
     438:	ff 4f       	sbci	r31, 0xFF	; 255
     43a:	80 81       	ld	r24, Z
     43c:	68 2b       	or	r22, r24
     43e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     440:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	00 d0       	rcall	.+0      	; 0x450 <sysclk_enable_usb+0x6>
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     454:	86 30       	cpi	r24, 0x06	; 6
     456:	11 f0       	breq	.+4      	; 0x45c <sysclk_enable_usb+0x12>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     458:	60 e0       	ldi	r22, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <sysclk_enable_usb+0x14>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     45c:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     45e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     462:	81 fd       	sbrc	r24, 1
     464:	2a c0       	rjmp	.+84     	; 0x4ba <sysclk_enable_usb+0x70>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     466:	8f b7       	in	r24, 0x3f	; 63
     468:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     46a:	f8 94       	cli
	return flags;
     46c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     46e:	e0 e5       	ldi	r30, 0x50	; 80
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	82 60       	ori	r24, 0x02	; 2
     476:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     478:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     47a:	81 81       	ldd	r24, Z+1	; 0x01
     47c:	81 ff       	sbrs	r24, 1
     47e:	fd cf       	rjmp	.-6      	; 0x47a <sysclk_enable_usb+0x30>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     480:	8f b7       	in	r24, 0x3f	; 63
     482:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     484:	f8 94       	cli
	return flags;
     486:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     488:	a0 e5       	ldi	r26, 0x50	; 80
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	16 96       	adiw	r26, 0x06	; 6
     48e:	8c 91       	ld	r24, X
     490:	16 97       	sbiw	r26, 0x06	; 6
     492:	89 7f       	andi	r24, 0xF9	; 249
     494:	16 96       	adiw	r26, 0x06	; 6
     496:	8c 93       	st	X, r24
     498:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     49a:	e0 e6       	ldi	r30, 0x60	; 96
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 e8       	ldi	r24, 0x80	; 128
     4a0:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     4a2:	8b eb       	ldi	r24, 0xBB	; 187
     4a4:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     4a6:	16 96       	adiw	r26, 0x06	; 6
     4a8:	8c 91       	ld	r24, X
     4aa:	16 97       	sbiw	r26, 0x06	; 6
     4ac:	84 60       	ori	r24, 0x04	; 4
     4ae:	16 96       	adiw	r26, 0x06	; 6
     4b0:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     4b2:	80 81       	ld	r24, Z
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     4b8:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     4ba:	63 60       	ori	r22, 0x03	; 3
     4bc:	84 e4       	ldi	r24, 0x44	; 68
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	d0 d7       	rcall	.+4000   	; 0x1462 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     4c2:	60 e4       	ldi	r22, 0x40	; 64
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	96 df       	rcall	.-212    	; 0x3f4 <sysclk_enable_module>
}
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	fc 01       	movw	r30, r24
     4d8:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     4de:	c6 2f       	mov	r28, r22
     4e0:	d0 e0       	ldi	r29, 0x00	; 0
     4e2:	de 01       	movw	r26, r28
     4e4:	02 2e       	mov	r0, r18
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <ioport_configure_port_pin+0x1a>
     4e8:	b5 95       	asr	r27
     4ea:	a7 95       	ror	r26
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <ioport_configure_port_pin+0x16>
     4f0:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     4f2:	50 83       	st	Z, r21
     4f4:	2f 5f       	subi	r18, 0xFF	; 255
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     4fa:	28 30       	cpi	r18, 0x08	; 8
     4fc:	31 05       	cpc	r19, r1
     4fe:	89 f7       	brne	.-30     	; 0x4e2 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     500:	40 ff       	sbrs	r20, 0
     502:	0a c0       	rjmp	.+20     	; 0x518 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     504:	41 ff       	sbrs	r20, 1
     506:	03 c0       	rjmp	.+6      	; 0x50e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     508:	fc 01       	movw	r30, r24
     50a:	65 83       	std	Z+5, r22	; 0x05
     50c:	02 c0       	rjmp	.+4      	; 0x512 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     50e:	fc 01       	movw	r30, r24
     510:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     512:	fc 01       	movw	r30, r24
     514:	61 83       	std	Z+1, r22	; 0x01
     516:	02 c0       	rjmp	.+4      	; 0x51c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     518:	fc 01       	movw	r30, r24
     51a:	62 83       	std	Z+2, r22	; 0x02
	}
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <udi_cdc_comm_disable>:
}

iram_size_t udi_cdc_get_free_tx_buffer(void)
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}
     522:	80 91 d2 21 	lds	r24, 0x21D2	; 0x8021d2 <udi_cdc_nb_comm_enabled>
     526:	81 50       	subi	r24, 0x01	; 1
     528:	80 93 d2 21 	sts	0x21D2, r24	; 0x8021d2 <udi_cdc_nb_comm_enabled>
     52c:	08 95       	ret

0000052e <udi_cdc_data_setup>:
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	08 95       	ret

00000532 <udi_cdc_getsetting>:
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	08 95       	ret

00000536 <udi_cdc_line_coding_received>:
     536:	62 ee       	ldi	r22, 0xE2	; 226
     538:	71 e2       	ldi	r23, 0x21	; 33
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0c 94 4e 12 	jmp	0x249c	; 0x249c <uart_config>
     540:	08 95       	ret

00000542 <udi_cdc_comm_enable>:
     542:	10 92 d2 21 	sts	0x21D2, r1	; 0x8021d2 <udi_cdc_nb_comm_enabled>
     546:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <udi_cdc_state>
     54a:	10 92 df 21 	sts	0x21DF, r1	; 0x8021df <udi_cdc_state+0x1>
     54e:	e4 ed       	ldi	r30, 0xD4	; 212
     550:	f1 e2       	ldi	r31, 0x21	; 33
     552:	81 ea       	ldi	r24, 0xA1	; 161
     554:	80 83       	st	Z, r24
     556:	80 e2       	ldi	r24, 0x20	; 32
     558:	81 83       	std	Z+1, r24	; 0x01
     55a:	12 82       	std	Z+2, r1	; 0x02
     55c:	13 82       	std	Z+3, r1	; 0x03
     55e:	14 82       	std	Z+4, r1	; 0x04
     560:	15 82       	std	Z+5, r1	; 0x05
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	86 83       	std	Z+6, r24	; 0x06
     568:	97 83       	std	Z+7, r25	; 0x07
     56a:	10 86       	std	Z+8, r1	; 0x08
     56c:	11 86       	std	Z+9, r1	; 0x09
     56e:	e2 ee       	ldi	r30, 0xE2	; 226
     570:	f1 e2       	ldi	r31, 0x21	; 33
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	92 ec       	ldi	r25, 0xC2	; 194
     576:	a1 e0       	ldi	r26, 0x01	; 1
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	80 83       	st	Z, r24
     57c:	91 83       	std	Z+1, r25	; 0x01
     57e:	a2 83       	std	Z+2, r26	; 0x02
     580:	b3 83       	std	Z+3, r27	; 0x03
     582:	14 82       	std	Z+4, r1	; 0x04
     584:	15 82       	std	Z+5, r1	; 0x05
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	86 83       	std	Z+6, r24	; 0x06
     58a:	bf 01       	movw	r22, r30
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 4e 12 	call	0x249c	; 0x249c <uart_config>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 3c 12 	call	0x2478	; 0x2478 <main_cdc_enable>
     598:	88 23       	and	r24, r24
     59a:	29 f0       	breq	.+10     	; 0x5a6 <udi_cdc_comm_enable+0x64>
     59c:	90 91 d2 21 	lds	r25, 0x21D2	; 0x8021d2 <udi_cdc_nb_comm_enabled>
     5a0:	9f 5f       	subi	r25, 0xFF	; 255
     5a2:	90 93 d2 21 	sts	0x21D2, r25	; 0x8021d2 <udi_cdc_nb_comm_enabled>
     5a6:	08 95       	ret

000005a8 <udi_cdc_tx_send>:
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	1f 92       	push	r1
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <udi_cdc_tx_trans_ongoing>
     5bc:	81 11       	cpse	r24, r1
     5be:	9e c0       	rjmp	.+316    	; 0x6fc <udi_cdc_tx_send+0x154>
     5c0:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <udd_is_high_speed>
     5c4:	88 23       	and	r24, r24
     5c6:	51 f0       	breq	.+20     	; 0x5dc <udi_cdc_tx_send+0x34>
     5c8:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udi_cdc_tx_sof_num>
     5cc:	10 91 c1 20 	lds	r17, 0x20C1	; 0x8020c1 <udi_cdc_tx_sof_num+0x1>
     5d0:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <udd_get_micro_frame_number>
     5d4:	08 17       	cp	r16, r24
     5d6:	19 07       	cpc	r17, r25
     5d8:	59 f4       	brne	.+22     	; 0x5f0 <udi_cdc_tx_send+0x48>
     5da:	90 c0       	rjmp	.+288    	; 0x6fc <udi_cdc_tx_send+0x154>
     5dc:	00 91 c0 20 	lds	r16, 0x20C0	; 0x8020c0 <udi_cdc_tx_sof_num>
     5e0:	10 91 c1 20 	lds	r17, 0x20C1	; 0x8020c1 <udi_cdc_tx_sof_num+0x1>
     5e4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <udd_get_frame_number>
     5e8:	08 17       	cp	r16, r24
     5ea:	19 07       	cpc	r17, r25
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <udi_cdc_tx_send+0x48>
     5ee:	86 c0       	rjmp	.+268    	; 0x6fc <udi_cdc_tx_send+0x154>
     5f0:	8f b7       	in	r24, 0x3f	; 63
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	f8 94       	cli
     5f6:	19 81       	ldd	r17, Y+1	; 0x01
     5f8:	00 91 c2 20 	lds	r16, 0x20C2	; 0x8020c2 <udi_cdc_tx_buf_sel>
     5fc:	e0 2f       	mov	r30, r16
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	ed 53       	subi	r30, 0x3D	; 61
     606:	ff 4d       	sbci	r31, 0xDF	; 223
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	89 2b       	or	r24, r25
     60e:	09 f5       	brne	.+66     	; 0x652 <udi_cdc_tx_send+0xaa>
     610:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <__data_end>
     614:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <__data_end+0x1>
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	80 93 bc 20 	sts	0x20BC, r24	; 0x8020bc <__data_end>
     61e:	90 93 bd 20 	sts	0x20BD, r25	; 0x8020bd <__data_end+0x1>
     622:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <udd_is_high_speed>
     626:	81 11       	cpse	r24, r1
     628:	07 c0       	rjmp	.+14     	; 0x638 <udi_cdc_tx_send+0x90>
     62a:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <__data_end>
     62e:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <__data_end+0x1>
     632:	84 36       	cpi	r24, 0x64	; 100
     634:	91 05       	cpc	r25, r1
     636:	58 f0       	brcs	.+22     	; 0x64e <udi_cdc_tx_send+0xa6>
     638:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <udd_is_high_speed>
     63c:	88 23       	and	r24, r24
     63e:	49 f0       	breq	.+18     	; 0x652 <udi_cdc_tx_send+0xaa>
     640:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <__data_end>
     644:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <__data_end+0x1>
     648:	80 32       	cpi	r24, 0x20	; 32
     64a:	93 40       	sbci	r25, 0x03	; 3
     64c:	10 f4       	brcc	.+4      	; 0x652 <udi_cdc_tx_send+0xaa>
     64e:	1f bf       	out	0x3f, r17	; 63
     650:	55 c0       	rjmp	.+170    	; 0x6fc <udi_cdc_tx_send+0x154>
     652:	10 92 bc 20 	sts	0x20BC, r1	; 0x8020bc <__data_end>
     656:	10 92 bd 20 	sts	0x20BD, r1	; 0x8020bd <__data_end+0x1>
     65a:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <udi_cdc_tx_both_buf_to_send>
     65e:	81 11       	cpse	r24, r1
     660:	06 c0       	rjmp	.+12     	; 0x66e <udi_cdc_tx_send+0xc6>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	01 11       	cpse	r16, r1
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <udi_cdc_tx_buf_sel>
     66c:	04 c0       	rjmp	.+8      	; 0x676 <udi_cdc_tx_send+0xce>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	01 11       	cpse	r16, r1
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	08 2f       	mov	r16, r24
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <udi_cdc_tx_trans_ongoing>
     67c:	1f bf       	out	0x3f, r17	; 63
     67e:	10 e0       	ldi	r17, 0x00	; 0
     680:	f8 01       	movw	r30, r16
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ed 53       	subi	r30, 0x3D	; 61
     688:	ff 4d       	sbci	r31, 0xDF	; 223
     68a:	ff 24       	eor	r15, r15
     68c:	f3 94       	inc	r15
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	80 34       	cpi	r24, 0x40	; 64
     694:	91 05       	cpc	r25, r1
     696:	09 f4       	brne	.+2      	; 0x69a <udi_cdc_tx_send+0xf2>
     698:	f1 2c       	mov	r15, r1
     69a:	ff 20       	and	r15, r15
     69c:	91 f0       	breq	.+36     	; 0x6c2 <udi_cdc_tx_send+0x11a>
     69e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <udd_is_high_speed>
     6a2:	88 23       	and	r24, r24
     6a4:	39 f0       	breq	.+14     	; 0x6b4 <udi_cdc_tx_send+0x10c>
     6a6:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <udd_get_micro_frame_number>
     6aa:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udi_cdc_tx_sof_num>
     6ae:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <udi_cdc_tx_sof_num+0x1>
     6b2:	0b c0       	rjmp	.+22     	; 0x6ca <udi_cdc_tx_send+0x122>
     6b4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <udd_get_frame_number>
     6b8:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <udi_cdc_tx_sof_num>
     6bc:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <udi_cdc_tx_sof_num+0x1>
     6c0:	04 c0       	rjmp	.+8      	; 0x6ca <udi_cdc_tx_send+0x122>
     6c2:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <udi_cdc_tx_sof_num>
     6c6:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <udi_cdc_tx_sof_num+0x1>
     6ca:	f8 01       	movw	r30, r16
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	ed 53       	subi	r30, 0x3D	; 61
     6d2:	ff 4d       	sbci	r31, 0xDF	; 223
     6d4:	20 81       	ld	r18, Z
     6d6:	31 81       	ldd	r19, Z+1	; 0x01
     6d8:	a8 01       	movw	r20, r16
     6da:	00 24       	eor	r0, r0
     6dc:	56 95       	lsr	r21
     6de:	47 95       	ror	r20
     6e0:	07 94       	ror	r0
     6e2:	56 95       	lsr	r21
     6e4:	47 95       	ror	r20
     6e6:	07 94       	ror	r0
     6e8:	54 2f       	mov	r21, r20
     6ea:	40 2d       	mov	r20, r0
     6ec:	48 53       	subi	r20, 0x38	; 56
     6ee:	5f 4d       	sbci	r21, 0xDF	; 223
     6f0:	05 e8       	ldi	r16, 0x85	; 133
     6f2:	13 e0       	ldi	r17, 0x03	; 3
     6f4:	6f 2d       	mov	r22, r15
     6f6:	81 e8       	ldi	r24, 0x81	; 129
     6f8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <udd_ep_run>
     6fc:	0f 90       	pop	r0
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	08 95       	ret

0000070a <udi_cdc_data_sent>:
     70a:	81 11       	cpse	r24, r1
     70c:	15 c0       	rjmp	.+42     	; 0x738 <udi_cdc_data_sent+0x2e>
     70e:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <udi_cdc_tx_buf_sel>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	22 23       	and	r18, r18
     718:	11 f0       	breq	.+4      	; 0x71e <udi_cdc_data_sent+0x14>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	fc 01       	movw	r30, r24
     724:	ed 53       	subi	r30, 0x3D	; 61
     726:	ff 4d       	sbci	r31, 0xDF	; 223
     728:	10 82       	st	Z, r1
     72a:	11 82       	std	Z+1, r1	; 0x01
     72c:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udi_cdc_tx_both_buf_to_send>
     730:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <udi_cdc_tx_trans_ongoing>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	38 cf       	rjmp	.-400    	; 0x5a8 <udi_cdc_tx_send>
     738:	08 95       	ret

0000073a <udi_cdc_data_sof_notify>:
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	35 cf       	rjmp	.-406    	; 0x5a8 <udi_cdc_tx_send>
     73e:	08 95       	ret

00000740 <udi_cdc_ctrl_state_notify>:
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	80 91 e0 21 	lds	r24, 0x21E0	; 0x8021e0 <udi_cdc_serial_state_msg_ongoing>
     748:	81 11       	cpse	r24, r1
     74a:	1f c0       	rjmp	.+62     	; 0x78a <udi_cdc_ctrl_state_notify+0x4a>
     74c:	20 91 de 21 	lds	r18, 0x21DE	; 0x8021de <udi_cdc_state>
     750:	30 91 df 21 	lds	r19, 0x21DF	; 0x8021df <udi_cdc_state+0x1>
     754:	80 91 dc 21 	lds	r24, 0x21DC	; 0x8021dc <uid_cdc_state_msg+0x8>
     758:	90 91 dd 21 	lds	r25, 0x21DD	; 0x8021dd <uid_cdc_state_msg+0x9>
     75c:	28 17       	cp	r18, r24
     75e:	39 07       	cpc	r19, r25
     760:	a1 f0       	breq	.+40     	; 0x78a <udi_cdc_ctrl_state_notify+0x4a>
     762:	86 2f       	mov	r24, r22
     764:	20 91 de 21 	lds	r18, 0x21DE	; 0x8021de <udi_cdc_state>
     768:	30 91 df 21 	lds	r19, 0x21DF	; 0x8021df <udi_cdc_state+0x1>
     76c:	20 93 dc 21 	sts	0x21DC, r18	; 0x8021dc <uid_cdc_state_msg+0x8>
     770:	30 93 dd 21 	sts	0x21DD, r19	; 0x8021dd <uid_cdc_state_msg+0x9>
     774:	02 ef       	ldi	r16, 0xF2	; 242
     776:	13 e0       	ldi	r17, 0x03	; 3
     778:	2a e0       	ldi	r18, 0x0A	; 10
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	44 ed       	ldi	r20, 0xD4	; 212
     77e:	51 e2       	ldi	r21, 0x21	; 33
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <udd_ep_run>
     786:	80 93 e0 21 	sts	0x21E0, r24	; 0x8021e0 <udi_cdc_serial_state_msg_ongoing>
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	08 95       	ret

00000790 <udi_cdc_ctrl_state_change>:
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	1f 92       	push	r1
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	8f b7       	in	r24, 0x3f	; 63
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	f8 94       	cli
     7a0:	29 81       	ldd	r18, Y+1	; 0x01
     7a2:	66 23       	and	r22, r22
     7a4:	59 f0       	breq	.+22     	; 0x7bc <udi_cdc_ctrl_state_change+0x2c>
     7a6:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <udi_cdc_state>
     7aa:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <udi_cdc_state+0x1>
     7ae:	48 2b       	or	r20, r24
     7b0:	59 2b       	or	r21, r25
     7b2:	40 93 de 21 	sts	0x21DE, r20	; 0x8021de <udi_cdc_state>
     7b6:	50 93 df 21 	sts	0x21DF, r21	; 0x8021df <udi_cdc_state+0x1>
     7ba:	0c c0       	rjmp	.+24     	; 0x7d4 <udi_cdc_ctrl_state_change+0x44>
     7bc:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <udi_cdc_state>
     7c0:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <udi_cdc_state+0x1>
     7c4:	40 95       	com	r20
     7c6:	50 95       	com	r21
     7c8:	48 23       	and	r20, r24
     7ca:	59 23       	and	r21, r25
     7cc:	40 93 de 21 	sts	0x21DE, r20	; 0x8021de <udi_cdc_state>
     7d0:	50 93 df 21 	sts	0x21DF, r21	; 0x8021df <udi_cdc_state+0x1>
     7d4:	2f bf       	out	0x3f, r18	; 63
     7d6:	62 e8       	ldi	r22, 0x82	; 130
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	b2 df       	rcall	.-156    	; 0x740 <udi_cdc_ctrl_state_notify>
     7dc:	0f 90       	pop	r0
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <udi_cdc_serial_state_msg_sent>:
     7e4:	10 92 e0 21 	sts	0x21E0, r1	; 0x8021e0 <udi_cdc_serial_state_msg_ongoing>
     7e8:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <udi_cdc_state>
     7ec:	90 91 df 21 	lds	r25, 0x21DF	; 0x8021df <udi_cdc_state+0x1>
     7f0:	83 78       	andi	r24, 0x83	; 131
     7f2:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <udi_cdc_state>
     7f6:	90 93 df 21 	sts	0x21DF, r25	; 0x8021df <udi_cdc_state+0x1>
     7fa:	e4 ed       	ldi	r30, 0xD4	; 212
     7fc:	f1 e2       	ldi	r31, 0x21	; 33
     7fe:	80 85       	ldd	r24, Z+8	; 0x08
     800:	91 85       	ldd	r25, Z+9	; 0x09
     802:	83 78       	andi	r24, 0x83	; 131
     804:	80 87       	std	Z+8, r24	; 0x08
     806:	91 87       	std	Z+9, r25	; 0x09
     808:	64 2f       	mov	r22, r20
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	99 cf       	rjmp	.-206    	; 0x740 <udi_cdc_ctrl_state_notify>
     80e:	08 95       	ret

00000810 <udi_cdc_data_disable>:
     810:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <udi_cdc_nb_data_enabled>
     814:	81 50       	subi	r24, 0x01	; 1
     816:	80 93 d1 21 	sts	0x21D1, r24	; 0x8021d1 <udi_cdc_nb_data_enabled>
     81a:	80 91 d1 21 	lds	r24, 0x21D1	; 0x8021d1 <udi_cdc_nb_data_enabled>
     81e:	0e 94 42 12 	call	0x2484	; 0x2484 <main_cdc_disable>
     822:	10 92 d0 21 	sts	0x21D0, r1	; 0x8021d0 <udi_cdc_data_running>
     826:	08 95       	ret

00000828 <udi_cdc_comm_setup>:
     828:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
     82c:	88 23       	and	r24, r24
     82e:	cc f4       	brge	.+50     	; 0x862 <udi_cdc_comm_setup+0x3a>
     830:	80 76       	andi	r24, 0x60	; 96
     832:	80 32       	cpi	r24, 0x20	; 32
     834:	f1 f5       	brne	.+124    	; 0x8b2 <udi_cdc_comm_setup+0x8a>
     836:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
     83a:	81 32       	cpi	r24, 0x21	; 33
     83c:	e1 f5       	brne	.+120    	; 0x8b6 <udi_cdc_comm_setup+0x8e>
     83e:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
     842:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
     846:	07 97       	sbiw	r24, 0x07	; 7
     848:	c1 f5       	brne	.+112    	; 0x8ba <udi_cdc_comm_setup+0x92>
     84a:	e8 e2       	ldi	r30, 0x28	; 40
     84c:	f3 e2       	ldi	r31, 0x23	; 35
     84e:	82 ee       	ldi	r24, 0xE2	; 226
     850:	91 e2       	ldi	r25, 0x21	; 33
     852:	80 87       	std	Z+8, r24	; 0x08
     854:	91 87       	std	Z+9, r25	; 0x09
     856:	87 e0       	ldi	r24, 0x07	; 7
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	82 87       	std	Z+10, r24	; 0x0a
     85c:	93 87       	std	Z+11, r25	; 0x0b
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	08 95       	ret
     862:	80 76       	andi	r24, 0x60	; 96
     864:	80 32       	cpi	r24, 0x20	; 32
     866:	59 f5       	brne	.+86     	; 0x8be <udi_cdc_comm_setup+0x96>
     868:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
     86c:	80 32       	cpi	r24, 0x20	; 32
     86e:	19 f0       	breq	.+6      	; 0x876 <udi_cdc_comm_setup+0x4e>
     870:	82 32       	cpi	r24, 0x22	; 34
     872:	b9 f0       	breq	.+46     	; 0x8a2 <udi_cdc_comm_setup+0x7a>
     874:	26 c0       	rjmp	.+76     	; 0x8c2 <udi_cdc_comm_setup+0x9a>
     876:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
     87a:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
     87e:	07 97       	sbiw	r24, 0x07	; 7
     880:	11 f5       	brne	.+68     	; 0x8c6 <udi_cdc_comm_setup+0x9e>
     882:	e8 e2       	ldi	r30, 0x28	; 40
     884:	f3 e2       	ldi	r31, 0x23	; 35
     886:	8b e9       	ldi	r24, 0x9B	; 155
     888:	92 e0       	ldi	r25, 0x02	; 2
     88a:	84 87       	std	Z+12, r24	; 0x0c
     88c:	95 87       	std	Z+13, r25	; 0x0d
     88e:	82 ee       	ldi	r24, 0xE2	; 226
     890:	91 e2       	ldi	r25, 0x21	; 33
     892:	80 87       	std	Z+8, r24	; 0x08
     894:	91 87       	std	Z+9, r25	; 0x09
     896:	87 e0       	ldi	r24, 0x07	; 7
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	82 87       	std	Z+10, r24	; 0x0a
     89c:	93 87       	std	Z+11, r25	; 0x0b
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	08 95       	ret
     8a2:	60 91 2a 23 	lds	r22, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
     8a6:	61 70       	andi	r22, 0x01	; 1
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0e 94 46 12 	call	0x248c	; 0x248c <main_cdc_set_dtr>
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	08 95       	ret
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	08 95       	ret
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	08 95       	ret
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	08 95       	ret
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	08 95       	ret
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	08 95       	ret
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	08 95       	ret

000008ca <udi_cdc_signal_framing_error>:
     8ca:	40 e1       	ldi	r20, 0x10	; 16
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	5e cf       	rjmp	.-324    	; 0x790 <udi_cdc_ctrl_state_change>
     8d4:	08 95       	ret

000008d6 <udi_cdc_signal_overrun>:
     8d6:	40 e4       	ldi	r20, 0x40	; 64
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	61 e0       	ldi	r22, 0x01	; 1
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	58 cf       	rjmp	.-336    	; 0x790 <udi_cdc_ctrl_state_change>
     8e0:	08 95       	ret

000008e2 <udi_cdc_multi_get_nb_received_data>:
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	1f 92       	push	r1
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	8f b7       	in	r24, 0x3f	; 63
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	f8 94       	cli
     8f2:	49 81       	ldd	r20, Y+1	; 0x01
     8f4:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <udi_cdc_rx_pos>
     8f8:	30 91 4a 21 	lds	r19, 0x214A	; 0x80214a <udi_cdc_rx_pos+0x1>
     8fc:	e0 91 4b 21 	lds	r30, 0x214B	; 0x80214b <udi_cdc_rx_buf_sel>
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e4 5b       	subi	r30, 0xB4	; 180
     908:	fe 4d       	sbci	r31, 0xDE	; 222
     90a:	80 81       	ld	r24, Z
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	4f bf       	out	0x3f, r20	; 63
     910:	82 1b       	sub	r24, r18
     912:	93 0b       	sbc	r25, r19
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <udi_cdc_multi_is_rx_ready>:
     91c:	e2 df       	rcall	.-60     	; 0x8e2 <udi_cdc_multi_get_nb_received_data>
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	89 2b       	or	r24, r25
     922:	09 f4       	brne	.+2      	; 0x926 <udi_cdc_multi_is_rx_ready+0xa>
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	82 2f       	mov	r24, r18
     928:	08 95       	ret

0000092a <udi_cdc_rx_start>:
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	1f 92       	push	r1
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	8f b7       	in	r24, 0x3f	; 63
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	f8 94       	cli
     93e:	99 81       	ldd	r25, Y+1	; 0x01
     940:	20 91 4b 21 	lds	r18, 0x214B	; 0x80214b <udi_cdc_rx_buf_sel>
     944:	80 91 48 21 	lds	r24, 0x2148	; 0x802148 <udi_cdc_rx_trans_ongoing>
     948:	81 11       	cpse	r24, r1
     94a:	10 c0       	rjmp	.+32     	; 0x96c <udi_cdc_rx_start+0x42>
     94c:	60 91 49 21 	lds	r22, 0x2149	; 0x802149 <udi_cdc_rx_pos>
     950:	70 91 4a 21 	lds	r23, 0x214A	; 0x80214a <udi_cdc_rx_pos+0x1>
     954:	02 2f       	mov	r16, r18
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	f8 01       	movw	r30, r16
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	e4 5b       	subi	r30, 0xB4	; 180
     960:	fe 4d       	sbci	r31, 0xDE	; 222
     962:	40 81       	ld	r20, Z
     964:	51 81       	ldd	r21, Z+1	; 0x01
     966:	64 17       	cp	r22, r20
     968:	75 07       	cpc	r23, r21
     96a:	18 f4       	brcc	.+6      	; 0x972 <udi_cdc_rx_start+0x48>
     96c:	9f bf       	out	0x3f, r25	; 63
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	28 c0       	rjmp	.+80     	; 0x9c2 <udi_cdc_rx_start+0x98>
     972:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <udi_cdc_rx_pos>
     976:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <udi_cdc_rx_pos+0x1>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	21 11       	cpse	r18, r1
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	80 93 4b 21 	sts	0x214B, r24	; 0x80214b <udi_cdc_rx_buf_sel>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <udi_cdc_rx_trans_ongoing>
     98a:	9f bf       	out	0x3f, r25	; 63
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	c6 df       	rcall	.-116    	; 0x91c <udi_cdc_multi_is_rx_ready>
     990:	88 23       	and	r24, r24
     992:	19 f0       	breq	.+6      	; 0x99a <udi_cdc_rx_start+0x70>
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <uart_rx_notify>
     99a:	a8 01       	movw	r20, r16
     99c:	00 24       	eor	r0, r0
     99e:	56 95       	lsr	r21
     9a0:	47 95       	ror	r20
     9a2:	07 94       	ror	r0
     9a4:	56 95       	lsr	r21
     9a6:	47 95       	ror	r20
     9a8:	07 94       	ror	r0
     9aa:	54 2f       	mov	r21, r20
     9ac:	40 2d       	mov	r20, r0
     9ae:	40 5b       	subi	r20, 0xB0	; 176
     9b0:	5e 4d       	sbci	r21, 0xDE	; 222
     9b2:	09 e1       	ldi	r16, 0x19	; 25
     9b4:	15 e0       	ldi	r17, 0x05	; 5
     9b6:	20 e4       	ldi	r18, 0x40	; 64
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <udd_ep_run>
     9c2:	0f 90       	pop	r0
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <udi_cdc_data_enable>:
     9ce:	10 92 d1 21 	sts	0x21D1, r1	; 0x8021d1 <udi_cdc_nb_data_enabled>
     9d2:	10 92 bf 20 	sts	0x20BF, r1	; 0x8020bf <udi_cdc_tx_trans_ongoing>
     9d6:	10 92 be 20 	sts	0x20BE, r1	; 0x8020be <udi_cdc_tx_both_buf_to_send>
     9da:	10 92 c2 20 	sts	0x20C2, r1	; 0x8020c2 <udi_cdc_tx_buf_sel>
     9de:	e3 ec       	ldi	r30, 0xC3	; 195
     9e0:	f0 e2       	ldi	r31, 0x20	; 32
     9e2:	10 82       	st	Z, r1
     9e4:	11 82       	std	Z+1, r1	; 0x01
     9e6:	12 82       	std	Z+2, r1	; 0x02
     9e8:	13 82       	std	Z+3, r1	; 0x03
     9ea:	10 92 c0 20 	sts	0x20C0, r1	; 0x8020c0 <udi_cdc_tx_sof_num>
     9ee:	10 92 c1 20 	sts	0x20C1, r1	; 0x8020c1 <udi_cdc_tx_sof_num+0x1>
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	d9 dd       	rcall	.-1102   	; 0x5a8 <udi_cdc_tx_send>
     9f6:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <udi_cdc_rx_trans_ongoing>
     9fa:	10 92 4b 21 	sts	0x214B, r1	; 0x80214b <udi_cdc_rx_buf_sel>
     9fe:	ec e4       	ldi	r30, 0x4C	; 76
     a00:	f1 e2       	ldi	r31, 0x21	; 33
     a02:	10 82       	st	Z, r1
     a04:	11 82       	std	Z+1, r1	; 0x01
     a06:	12 82       	std	Z+2, r1	; 0x02
     a08:	13 82       	std	Z+3, r1	; 0x03
     a0a:	10 92 49 21 	sts	0x2149, r1	; 0x802149 <udi_cdc_rx_pos>
     a0e:	10 92 4a 21 	sts	0x214A, r1	; 0x80214a <udi_cdc_rx_pos+0x1>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	8a df       	rcall	.-236    	; 0x92a <udi_cdc_rx_start>
     a16:	88 23       	and	r24, r24
     a18:	59 f0       	breq	.+22     	; 0xa30 <udi_cdc_data_enable+0x62>
     a1a:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <udi_cdc_nb_data_enabled>
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	90 93 d1 21 	sts	0x21D1, r25	; 0x8021d1 <udi_cdc_nb_data_enabled>
     a24:	90 91 d1 21 	lds	r25, 0x21D1	; 0x8021d1 <udi_cdc_nb_data_enabled>
     a28:	91 30       	cpi	r25, 0x01	; 1
     a2a:	11 f4       	brne	.+4      	; 0xa30 <udi_cdc_data_enable+0x62>
     a2c:	90 93 d0 21 	sts	0x21D0, r25	; 0x8021d0 <udi_cdc_data_running>
     a30:	08 95       	ret

00000a32 <udi_cdc_data_received>:
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	81 11       	cpse	r24, r1
     a38:	29 c0       	rjmp	.+82     	; 0xa8c <udi_cdc_data_received+0x5a>
     a3a:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <udi_cdc_rx_buf_sel>
     a3e:	e1 e0       	ldi	r30, 0x01	; 1
     a40:	81 11       	cpse	r24, r1
     a42:	e0 e0       	ldi	r30, 0x00	; 0
     a44:	84 2f       	mov	r24, r20
     a46:	61 15       	cp	r22, r1
     a48:	71 05       	cpc	r23, r1
     a4a:	a9 f4       	brne	.+42     	; 0xa76 <udi_cdc_data_received+0x44>
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	00 24       	eor	r0, r0
     a50:	f6 95       	lsr	r31
     a52:	e7 95       	ror	r30
     a54:	07 94       	ror	r0
     a56:	f6 95       	lsr	r31
     a58:	e7 95       	ror	r30
     a5a:	07 94       	ror	r0
     a5c:	fe 2f       	mov	r31, r30
     a5e:	e0 2d       	mov	r30, r0
     a60:	af 01       	movw	r20, r30
     a62:	40 5b       	subi	r20, 0xB0	; 176
     a64:	5e 4d       	sbci	r21, 0xDE	; 222
     a66:	09 e1       	ldi	r16, 0x19	; 25
     a68:	15 e0       	ldi	r17, 0x05	; 5
     a6a:	20 e4       	ldi	r18, 0x40	; 64
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <udd_ep_run>
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <udi_cdc_data_received+0x5a>
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	e4 5b       	subi	r30, 0xB4	; 180
     a7e:	fe 4d       	sbci	r31, 0xDE	; 222
     a80:	60 83       	st	Z, r22
     a82:	71 83       	std	Z+1, r23	; 0x01
     a84:	10 92 48 21 	sts	0x2148, r1	; 0x802148 <udi_cdc_rx_trans_ongoing>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	4f df       	rcall	.-354    	; 0x92a <udi_cdc_rx_start>
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <udi_cdc_is_rx_ready>:
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	43 cf       	rjmp	.-378    	; 0x91c <udi_cdc_multi_is_rx_ready>
     a96:	08 95       	ret

00000a98 <udi_cdc_multi_getc>:
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	1f 92       	push	r1
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	11 e0       	ldi	r17, 0x01	; 1
     aaa:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udi_cdc_line_coding+0x6>
     aae:	89 30       	cpi	r24, 0x09	; 9
     ab0:	09 f0       	breq	.+2      	; 0xab4 <udi_cdc_multi_getc+0x1c>
     ab2:	10 e0       	ldi	r17, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	8f b7       	in	r24, 0x3f	; 63
     aba:	89 83       	std	Y+1, r24	; 0x01
     abc:	f8 94       	cli
     abe:	a9 81       	ldd	r26, Y+1	; 0x01
     ac0:	20 91 49 21 	lds	r18, 0x2149	; 0x802149 <udi_cdc_rx_pos>
     ac4:	30 91 4a 21 	lds	r19, 0x214A	; 0x80214a <udi_cdc_rx_pos+0x1>
     ac8:	80 91 4b 21 	lds	r24, 0x214B	; 0x80214b <udi_cdc_rx_buf_sel>
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	e4 5b       	subi	r30, 0xB4	; 180
     ad6:	fe 4d       	sbci	r31, 0xDE	; 222
     ad8:	60 81       	ld	r22, Z
     ada:	71 81       	ldd	r23, Z+1	; 0x01
     adc:	af bf       	out	0x3f, r26	; 63
     ade:	26 17       	cp	r18, r22
     ae0:	37 07       	cpc	r19, r23
     ae2:	30 f0       	brcs	.+12     	; 0xaf0 <udi_cdc_multi_getc+0x58>
     ae4:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <udi_cdc_data_running>
     ae8:	81 11       	cpse	r24, r1
     aea:	e6 cf       	rjmp	.-52     	; 0xab8 <udi_cdc_multi_getc+0x20>
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	21 c0       	rjmp	.+66     	; 0xb32 <udi_cdc_multi_getc+0x9a>
     af0:	fc 01       	movw	r30, r24
     af2:	00 24       	eor	r0, r0
     af4:	f6 95       	lsr	r31
     af6:	e7 95       	ror	r30
     af8:	07 94       	ror	r0
     afa:	f6 95       	lsr	r31
     afc:	e7 95       	ror	r30
     afe:	07 94       	ror	r0
     b00:	fe 2f       	mov	r31, r30
     b02:	e0 2d       	mov	r30, r0
     b04:	e2 0f       	add	r30, r18
     b06:	f3 1f       	adc	r31, r19
     b08:	e0 5b       	subi	r30, 0xB0	; 176
     b0a:	fe 4d       	sbci	r31, 0xDE	; 222
     b0c:	80 81       	ld	r24, Z
     b0e:	7a 01       	movw	r14, r20
     b10:	e8 2a       	or	r14, r24
     b12:	2f 5f       	subi	r18, 0xFF	; 255
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	20 93 49 21 	sts	0x2149, r18	; 0x802149 <udi_cdc_rx_pos>
     b1a:	30 93 4a 21 	sts	0x214A, r19	; 0x80214a <udi_cdc_rx_pos+0x1>
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	04 df       	rcall	.-504    	; 0x92a <udi_cdc_rx_start>
     b22:	11 23       	and	r17, r17
     b24:	21 f0       	breq	.+8      	; 0xb2e <udi_cdc_multi_getc+0x96>
     b26:	5e 2d       	mov	r21, r14
     b28:	44 27       	eor	r20, r20
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	c5 cf       	rjmp	.-118    	; 0xab8 <udi_cdc_multi_getc+0x20>
     b2e:	8e 2d       	mov	r24, r14
     b30:	9f 2d       	mov	r25, r15
     b32:	0f 90       	pop	r0
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <udi_cdc_getc>:
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	aa cf       	rjmp	.-172    	; 0xa98 <udi_cdc_multi_getc>
     b44:	08 95       	ret

00000b46 <udi_cdc_multi_get_free_tx_buffer>:
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	1f 92       	push	r1
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	8f b7       	in	r24, 0x3f	; 63
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	f8 94       	cli
     b56:	99 81       	ldd	r25, Y+1	; 0x01
     b58:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <udi_cdc_tx_buf_sel>
     b5c:	e8 2f       	mov	r30, r24
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ed 53       	subi	r30, 0x3D	; 61
     b66:	ff 4d       	sbci	r31, 0xDF	; 223
     b68:	20 81       	ld	r18, Z
     b6a:	31 81       	ldd	r19, Z+1	; 0x01
     b6c:	20 34       	cpi	r18, 0x40	; 64
     b6e:	31 05       	cpc	r19, r1
     b70:	89 f4       	brne	.+34     	; 0xb94 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     b72:	40 91 bf 20 	lds	r20, 0x20BF	; 0x8020bf <udi_cdc_tx_trans_ongoing>
     b76:	41 11       	cpse	r20, r1
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     b7a:	40 91 be 20 	lds	r20, 0x20BE	; 0x8020be <udi_cdc_tx_both_buf_to_send>
     b7e:	41 11       	cpse	r20, r1
     b80:	09 c0       	rjmp	.+18     	; 0xb94 <udi_cdc_multi_get_free_tx_buffer+0x4e>
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	20 93 be 20 	sts	0x20BE, r18	; 0x8020be <udi_cdc_tx_both_buf_to_send>
     b88:	81 11       	cpse	r24, r1
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	20 93 c2 20 	sts	0x20C2, r18	; 0x8020c2 <udi_cdc_tx_buf_sel>
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	9f bf       	out	0x3f, r25	; 63
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	82 1b       	sub	r24, r18
     b9c:	93 0b       	sbc	r25, r19
     b9e:	0f 90       	pop	r0
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <udi_cdc_multi_is_tx_ready>:

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
     ba6:	cf df       	rcall	.-98     	; 0xb46 <udi_cdc_multi_get_free_tx_buffer>
     ba8:	21 e0       	ldi	r18, 0x01	; 1
     baa:	89 2b       	or	r24, r25
     bac:	09 f4       	brne	.+2      	; 0xbb0 <udi_cdc_multi_is_tx_ready+0xa>
     bae:	20 e0       	ldi	r18, 0x00	; 0
}
     bb0:	82 2f       	mov	r24, r18
     bb2:	08 95       	ret

00000bb4 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
	return udi_cdc_multi_is_tx_ready(0);
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	f7 cf       	rjmp	.-18     	; 0xba6 <udi_cdc_multi_is_tx_ready>
}
     bb8:	08 95       	ret

00000bba <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	1f 92       	push	r1
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	f6 2e       	mov	r15, r22
     bcc:	17 2f       	mov	r17, r23

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     bce:	01 e0       	ldi	r16, 0x01	; 1
     bd0:	80 91 e8 21 	lds	r24, 0x21E8	; 0x8021e8 <udi_cdc_line_coding+0x6>
     bd4:	89 30       	cpi	r24, 0x09	; 9
     bd6:	09 f0       	breq	.+2      	; 0xbda <udi_cdc_multi_putc+0x20>
     bd8:	00 e0       	ldi	r16, 0x00	; 0

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	e4 df       	rcall	.-56     	; 0xba6 <udi_cdc_multi_is_tx_ready>
     bde:	81 11       	cpse	r24, r1
     be0:	07 c0       	rjmp	.+14     	; 0xbf0 <udi_cdc_multi_putc+0x36>
		if (!udi_cdc_data_running) {
     be2:	80 91 d0 21 	lds	r24, 0x21D0	; 0x8021d0 <udi_cdc_data_running>
     be6:	81 11       	cpse	r24, r1
     be8:	f8 cf       	rjmp	.-16     	; 0xbda <udi_cdc_multi_putc+0x20>
			return false;
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	2d c0       	rjmp	.+90     	; 0xc4a <udi_cdc_multi_putc+0x90>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bf0:	8f b7       	in	r24, 0x3f	; 63
     bf2:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     bf4:	f8 94       	cli
	return flags;
     bf6:	29 81       	ldd	r18, Y+1	; 0x01
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
     bf8:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <udi_cdc_tx_buf_sel>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	df 01       	movw	r26, r30
     c00:	aa 0f       	add	r26, r26
     c02:	bb 1f       	adc	r27, r27
     c04:	ad 53       	subi	r26, 0x3D	; 61
     c06:	bf 4d       	sbci	r27, 0xDF	; 223
     c08:	8d 91       	ld	r24, X+
     c0a:	9c 91       	ld	r25, X
     c0c:	11 97       	sbiw	r26, 0x01	; 1
     c0e:	ac 01       	movw	r20, r24
     c10:	4f 5f       	subi	r20, 0xFF	; 255
     c12:	5f 4f       	sbci	r21, 0xFF	; 255
     c14:	4d 93       	st	X+, r20
     c16:	5c 93       	st	X, r21
     c18:	00 24       	eor	r0, r0
     c1a:	f6 95       	lsr	r31
     c1c:	e7 95       	ror	r30
     c1e:	07 94       	ror	r0
     c20:	f6 95       	lsr	r31
     c22:	e7 95       	ror	r30
     c24:	07 94       	ror	r0
     c26:	fe 2f       	mov	r31, r30
     c28:	e0 2d       	mov	r30, r0
     c2a:	8e 0f       	add	r24, r30
     c2c:	9f 1f       	adc	r25, r31
     c2e:	fc 01       	movw	r30, r24
     c30:	e8 53       	subi	r30, 0x38	; 56
     c32:	ff 4d       	sbci	r31, 0xDF	; 223
     c34:	f0 82       	st	Z, r15
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c36:	2f bf       	out	0x3f, r18	; 63
	cpu_irq_restore(flags);

	if (b_databit_9) {
     c38:	00 23       	and	r16, r16
     c3a:	29 f0       	breq	.+10     	; 0xc46 <udi_cdc_multi_putc+0x8c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
     c3c:	f1 2e       	mov	r15, r17
     c3e:	11 0f       	add	r17, r17
     c40:	11 0b       	sbc	r17, r17
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
     c42:	00 e0       	ldi	r16, 0x00	; 0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
     c44:	ca cf       	rjmp	.-108    	; 0xbda <udi_cdc_multi_putc+0x20>
	}
	return true;
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
}
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	08 95       	ret

00000c58 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
	return udi_cdc_multi_putc(0, value);
     c58:	bc 01       	movw	r22, r24
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	ae cf       	rjmp	.-164    	; 0xbba <udi_cdc_multi_putc>
}
     c5e:	08 95       	ret

00000c60 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     c60:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <udc_ptr_conf>
     c64:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     c68:	01 90       	ld	r0, Z+
     c6a:	f0 81       	ld	r31, Z
     c6c:	e0 2d       	mov	r30, r0
     c6e:	22 81       	ldd	r18, Z+2	; 0x02
     c70:	33 81       	ldd	r19, Z+3	; 0x03
     c72:	2e 0f       	add	r18, r30
     c74:	3f 1f       	adc	r19, r31
     c76:	fc 01       	movw	r30, r24
     c78:	40 81       	ld	r20, Z
     c7a:	e4 0f       	add	r30, r20
     c7c:	f1 1d       	adc	r31, r1
     c7e:	e2 17       	cp	r30, r18
     c80:	f3 07       	cpc	r31, r19
     c82:	b8 f4       	brcc	.+46     	; 0xcb2 <udc_next_desc_in_iface+0x52>
     c84:	81 81       	ldd	r24, Z+1	; 0x01
     c86:	84 30       	cpi	r24, 0x04	; 4
     c88:	b9 f0       	breq	.+46     	; 0xcb8 <udc_next_desc_in_iface+0x58>
     c8a:	86 13       	cpse	r24, r22
     c8c:	09 c0       	rjmp	.+18     	; 0xca0 <udc_next_desc_in_iface+0x40>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <udc_next_desc_in_iface+0x3a>
     c90:	81 81       	ldd	r24, Z+1	; 0x01
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	a1 f0       	breq	.+40     	; 0xcbe <udc_next_desc_in_iface+0x5e>
     c96:	86 13       	cpse	r24, r22
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <udc_next_desc_in_iface+0x40>
     c9a:	8e 2f       	mov	r24, r30
     c9c:	9f 2f       	mov	r25, r31
     c9e:	08 95       	ret
     ca0:	80 81       	ld	r24, Z
     ca2:	e8 0f       	add	r30, r24
     ca4:	f1 1d       	adc	r31, r1
     ca6:	e2 17       	cp	r30, r18
     ca8:	f3 07       	cpc	r31, r19
     caa:	90 f3       	brcs	.-28     	; 0xc90 <udc_next_desc_in_iface+0x30>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	08 95       	ret
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	08 95       	ret
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	08 95       	ret
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	08 95       	ret

00000cc4 <udc_valid_address>:
     cc4:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
     cc8:	8f 77       	andi	r24, 0x7F	; 127
     cca:	a8 c7       	rjmp	.+3920   	; 0x1c1c <udd_set_address>
     ccc:	08 95       	ret

00000cce <udc_update_iface_desc>:
     cce:	90 91 f0 21 	lds	r25, 0x21F0	; 0x8021f0 <udc_num_configuration>
     cd2:	99 23       	and	r25, r25
     cd4:	81 f1       	breq	.+96     	; 0xd36 <udc_update_iface_desc+0x68>
     cd6:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <udc_ptr_conf>
     cda:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     cde:	01 90       	ld	r0, Z+
     ce0:	f0 81       	ld	r31, Z
     ce2:	e0 2d       	mov	r30, r0
     ce4:	94 81       	ldd	r25, Z+4	; 0x04
     ce6:	89 17       	cp	r24, r25
     ce8:	40 f5       	brcc	.+80     	; 0xd3a <udc_update_iface_desc+0x6c>
     cea:	e0 93 ec 21 	sts	0x21EC, r30	; 0x8021ec <udc_ptr_iface>
     cee:	f0 93 ed 21 	sts	0x21ED, r31	; 0x8021ed <udc_ptr_iface+0x1>
     cf2:	22 81       	ldd	r18, Z+2	; 0x02
     cf4:	33 81       	ldd	r19, Z+3	; 0x03
     cf6:	2e 0f       	add	r18, r30
     cf8:	3f 1f       	adc	r19, r31
     cfa:	e2 17       	cp	r30, r18
     cfc:	f3 07       	cpc	r31, r19
     cfe:	f8 f4       	brcc	.+62     	; 0xd3e <udc_update_iface_desc+0x70>
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	94 30       	cpi	r25, 0x04	; 4
     d04:	61 f4       	brne	.+24     	; 0xd1e <udc_update_iface_desc+0x50>
     d06:	92 81       	ldd	r25, Z+2	; 0x02
     d08:	98 13       	cpse	r25, r24
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <udc_update_iface_desc+0x50>
     d0c:	93 81       	ldd	r25, Z+3	; 0x03
     d0e:	96 13       	cpse	r25, r22
     d10:	06 c0       	rjmp	.+12     	; 0xd1e <udc_update_iface_desc+0x50>
     d12:	e0 93 ec 21 	sts	0x21EC, r30	; 0x8021ec <udc_ptr_iface>
     d16:	f0 93 ed 21 	sts	0x21ED, r31	; 0x8021ed <udc_ptr_iface+0x1>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	08 95       	ret
     d1e:	90 81       	ld	r25, Z
     d20:	e9 0f       	add	r30, r25
     d22:	f1 1d       	adc	r31, r1
     d24:	e2 17       	cp	r30, r18
     d26:	f3 07       	cpc	r31, r19
     d28:	58 f3       	brcs	.-42     	; 0xd00 <udc_update_iface_desc+0x32>
     d2a:	e0 93 ec 21 	sts	0x21EC, r30	; 0x8021ec <udc_ptr_iface>
     d2e:	f0 93 ed 21 	sts	0x21ED, r31	; 0x8021ed <udc_ptr_iface+0x1>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	08 95       	ret
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	08 95       	ret
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	08 95       	ret
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret

00000d42 <udc_iface_disable>:
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	c8 2f       	mov	r28, r24
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	be df       	rcall	.-132    	; 0xcce <udc_update_iface_desc>
     d52:	18 2f       	mov	r17, r24
     d54:	88 23       	and	r24, r24
     d56:	81 f1       	breq	.+96     	; 0xdb8 <udc_iface_disable+0x76>
     d58:	a0 91 ee 21 	lds	r26, 0x21EE	; 0x8021ee <udc_ptr_conf>
     d5c:	b0 91 ef 21 	lds	r27, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     d60:	ec 2f       	mov	r30, r28
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	8d 91       	ld	r24, X+
     d6c:	9c 91       	ld	r25, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	e8 0f       	add	r30, r24
     d72:	f9 1f       	adc	r31, r25
     d74:	e0 80       	ld	r14, Z
     d76:	f1 80       	ldd	r15, Z+1	; 0x01
     d78:	d7 01       	movw	r26, r14
     d7a:	16 96       	adiw	r26, 0x06	; 6
     d7c:	ed 91       	ld	r30, X+
     d7e:	fc 91       	ld	r31, X
     d80:	17 97       	sbiw	r26, 0x07	; 7
     d82:	09 95       	icall
     d84:	68 2f       	mov	r22, r24
     d86:	8c 2f       	mov	r24, r28
     d88:	a2 df       	rcall	.-188    	; 0xcce <udc_update_iface_desc>
     d8a:	18 2f       	mov	r17, r24
     d8c:	88 23       	and	r24, r24
     d8e:	a1 f0       	breq	.+40     	; 0xdb8 <udc_iface_disable+0x76>
     d90:	c0 91 ec 21 	lds	r28, 0x21EC	; 0x8021ec <udc_ptr_iface>
     d94:	d0 91 ed 21 	lds	r29, 0x21ED	; 0x8021ed <udc_ptr_iface+0x1>
     d98:	65 e0       	ldi	r22, 0x05	; 5
     d9a:	ce 01       	movw	r24, r28
     d9c:	61 df       	rcall	.-318    	; 0xc60 <udc_next_desc_in_iface>
     d9e:	ec 01       	movw	r28, r24
     da0:	89 2b       	or	r24, r25
     da2:	21 f0       	breq	.+8      	; 0xdac <udc_iface_disable+0x6a>
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	0e 94 0d 10 	call	0x201a	; 0x201a <udd_ep_free>
     daa:	f6 cf       	rjmp	.-20     	; 0xd98 <udc_iface_disable+0x56>
     dac:	d7 01       	movw	r26, r14
     dae:	12 96       	adiw	r26, 0x02	; 2
     db0:	ed 91       	ld	r30, X+
     db2:	fc 91       	ld	r31, X
     db4:	13 97       	sbiw	r26, 0x03	; 3
     db6:	09 95       	icall
     db8:	81 2f       	mov	r24, r17
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	08 95       	ret

00000dc6 <udc_iface_enable>:
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	18 2f       	mov	r17, r24
     dce:	7f df       	rcall	.-258    	; 0xcce <udc_update_iface_desc>
     dd0:	88 23       	and	r24, r24
     dd2:	39 f1       	breq	.+78     	; 0xe22 <udc_iface_enable+0x5c>
     dd4:	c0 91 ec 21 	lds	r28, 0x21EC	; 0x8021ec <udc_ptr_iface>
     dd8:	d0 91 ed 21 	lds	r29, 0x21ED	; 0x8021ed <udc_ptr_iface+0x1>
     ddc:	65 e0       	ldi	r22, 0x05	; 5
     dde:	ce 01       	movw	r24, r28
     de0:	3f df       	rcall	.-386    	; 0xc60 <udc_next_desc_in_iface>
     de2:	ec 01       	movw	r28, r24
     de4:	89 2b       	or	r24, r25
     de6:	41 f0       	breq	.+16     	; 0xdf8 <udc_iface_enable+0x32>
     de8:	4c 81       	ldd	r20, Y+4	; 0x04
     dea:	5d 81       	ldd	r21, Y+5	; 0x05
     dec:	6b 81       	ldd	r22, Y+3	; 0x03
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	2a d7       	rcall	.+3668   	; 0x1c46 <udd_ep_alloc>
     df2:	81 11       	cpse	r24, r1
     df4:	f3 cf       	rjmp	.-26     	; 0xddc <udc_iface_enable+0x16>
     df6:	15 c0       	rjmp	.+42     	; 0xe22 <udc_iface_enable+0x5c>
     df8:	a0 91 ee 21 	lds	r26, 0x21EE	; 0x8021ee <udc_ptr_conf>
     dfc:	b0 91 ef 21 	lds	r27, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     e00:	e1 2f       	mov	r30, r17
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	12 96       	adiw	r26, 0x02	; 2
     e0a:	8d 91       	ld	r24, X+
     e0c:	9c 91       	ld	r25, X
     e0e:	13 97       	sbiw	r26, 0x03	; 3
     e10:	e8 0f       	add	r30, r24
     e12:	f9 1f       	adc	r31, r25
     e14:	01 90       	ld	r0, Z+
     e16:	f0 81       	ld	r31, Z
     e18:	e0 2d       	mov	r30, r0
     e1a:	01 90       	ld	r0, Z+
     e1c:	f0 81       	ld	r31, Z
     e1e:	e0 2d       	mov	r30, r0
     e20:	09 95       	icall
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	08 95       	ret

00000e2a <udc_start>:
     e2a:	74 c6       	rjmp	.+3304   	; 0x1b14 <udd_enable>
     e2c:	08 95       	ret

00000e2e <udc_reset>:
     e2e:	cf 93       	push	r28
     e30:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_num_configuration>
     e34:	88 23       	and	r24, r24
     e36:	c1 f0       	breq	.+48     	; 0xe68 <udc_reset+0x3a>
     e38:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <udc_ptr_conf>
     e3c:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     e40:	01 90       	ld	r0, Z+
     e42:	f0 81       	ld	r31, Z
     e44:	e0 2d       	mov	r30, r0
     e46:	84 81       	ldd	r24, Z+4	; 0x04
     e48:	88 23       	and	r24, r24
     e4a:	71 f0       	breq	.+28     	; 0xe68 <udc_reset+0x3a>
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	8c 2f       	mov	r24, r28
     e50:	78 df       	rcall	.-272    	; 0xd42 <udc_iface_disable>
     e52:	cf 5f       	subi	r28, 0xFF	; 255
     e54:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <udc_ptr_conf>
     e58:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     e5c:	01 90       	ld	r0, Z+
     e5e:	f0 81       	ld	r31, Z
     e60:	e0 2d       	mov	r30, r0
     e62:	84 81       	ldd	r24, Z+4	; 0x04
     e64:	c8 17       	cp	r28, r24
     e66:	98 f3       	brcs	.-26     	; 0xe4e <udc_reset+0x20>
     e68:	10 92 f0 21 	sts	0x21F0, r1	; 0x8021f0 <udc_num_configuration>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udc_device_status>
     e74:	90 93 f5 21 	sts	0x21F5, r25	; 0x8021f5 <udc_device_status+0x1>
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     e7c:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     e7e:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_num_configuration>
     e82:	88 23       	and	r24, r24
     e84:	49 f1       	breq	.+82     	; 0xed8 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     e86:	a0 91 ee 21 	lds	r26, 0x21EE	; 0x8021ee <udc_ptr_conf>
     e8a:	b0 91 ef 21 	lds	r27, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     e8e:	ed 91       	ld	r30, X+
     e90:	fc 91       	ld	r31, X
     e92:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     e94:	84 81       	ldd	r24, Z+4	; 0x04
     e96:	88 23       	and	r24, r24
     e98:	f9 f0       	breq	.+62     	; 0xed8 <udc_sof_notify+0x5c>
     e9a:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     e9c:	ec 2f       	mov	r30, r28
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	12 96       	adiw	r26, 0x02	; 2
     ea6:	8d 91       	ld	r24, X+
     ea8:	9c 91       	ld	r25, X
     eaa:	13 97       	sbiw	r26, 0x03	; 3
     eac:	e8 0f       	add	r30, r24
     eae:	f9 1f       	adc	r31, r25
     eb0:	01 90       	ld	r0, Z+
     eb2:	f0 81       	ld	r31, Z
     eb4:	e0 2d       	mov	r30, r0
     eb6:	00 84       	ldd	r0, Z+8	; 0x08
     eb8:	f1 85       	ldd	r31, Z+9	; 0x09
     eba:	e0 2d       	mov	r30, r0
     ebc:	30 97       	sbiw	r30, 0x00	; 0
     ebe:	09 f0       	breq	.+2      	; 0xec2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     ec0:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     ec2:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ec4:	a0 91 ee 21 	lds	r26, 0x21EE	; 0x8021ee <udc_ptr_conf>
     ec8:	b0 91 ef 21 	lds	r27, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
     ecc:	ed 91       	ld	r30, X+
     ece:	fc 91       	ld	r31, X
     ed0:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     ed2:	84 81       	ldd	r24, Z+4	; 0x04
     ed4:	c8 17       	cp	r28, r24
     ed6:	10 f3       	brcs	.-60     	; 0xe9c <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     ee4:	e8 e2       	ldi	r30, 0x28	; 40
     ee6:	f3 e2       	ldi	r31, 0x23	; 35
     ee8:	12 86       	std	Z+10, r1	; 0x0a
     eea:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     eec:	14 86       	std	Z+12, r1	; 0x0c
     eee:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     ef0:	16 86       	std	Z+14, r1	; 0x0e
     ef2:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     ef4:	80 81       	ld	r24, Z
     ef6:	88 23       	and	r24, r24
     ef8:	0c f0       	brlt	.+2      	; 0xefc <udc_process_setup+0x20>
     efa:	5a c2       	rjmp	.+1204   	; 0x13b0 <udc_process_setup+0x4d4>
		if (udd_g_ctrlreq.req.wLength == 0) {
     efc:	20 91 2e 23 	lds	r18, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
     f00:	30 91 2f 23 	lds	r19, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
     f04:	21 15       	cp	r18, r1
     f06:	31 05       	cpc	r19, r1
     f08:	09 f0       	breq	.+2      	; 0xf0c <udc_process_setup+0x30>
     f0a:	57 c2       	rjmp	.+1198   	; 0x13ba <udc_process_setup+0x4de>
     f0c:	4d c2       	rjmp	.+1178   	; 0x13a8 <udc_process_setup+0x4cc>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     f0e:	8f 71       	andi	r24, 0x1F	; 31
     f10:	09 f0       	breq	.+2      	; 0xf14 <udc_process_setup+0x38>
     f12:	a3 c0       	rjmp	.+326    	; 0x105a <udc_process_setup+0x17e>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     f14:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
     f18:	96 30       	cpi	r25, 0x06	; 6
     f1a:	79 f0       	breq	.+30     	; 0xf3a <udc_process_setup+0x5e>
     f1c:	98 30       	cpi	r25, 0x08	; 8
     f1e:	09 f4       	brne	.+2      	; 0xf22 <udc_process_setup+0x46>
     f20:	92 c0       	rjmp	.+292    	; 0x1046 <udc_process_setup+0x16a>
     f22:	91 11       	cpse	r25, r1
     f24:	9a c0       	rjmp	.+308    	; 0x105a <udc_process_setup+0x17e>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <udc_process_setup+0x52>
     f2c:	c6 c1       	rjmp	.+908    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     f2e:	62 e0       	ldi	r22, 0x02	; 2
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	84 ef       	ldi	r24, 0xF4	; 244
     f34:	91 e2       	ldi	r25, 0x21	; 33
     f36:	80 d6       	rcall	.+3328   	; 0x1c38 <udd_set_setup_payload>
     f38:	45 c2       	rjmp	.+1162   	; 0x13c4 <udc_process_setup+0x4e8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     f3a:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
     f3e:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     f42:	29 2f       	mov	r18, r25
     f44:	33 27       	eor	r19, r19
     f46:	22 30       	cpi	r18, 0x02	; 2
     f48:	31 05       	cpc	r19, r1
     f4a:	a9 f0       	breq	.+42     	; 0xf76 <udc_process_setup+0x9a>
     f4c:	24 f4       	brge	.+8      	; 0xf56 <udc_process_setup+0x7a>
     f4e:	21 30       	cpi	r18, 0x01	; 1
     f50:	31 05       	cpc	r19, r1
     f52:	41 f0       	breq	.+16     	; 0xf64 <udc_process_setup+0x88>
     f54:	a9 c1       	rjmp	.+850    	; 0x12a8 <udc_process_setup+0x3cc>
     f56:	23 30       	cpi	r18, 0x03	; 3
     f58:	31 05       	cpc	r19, r1
     f5a:	d9 f1       	breq	.+118    	; 0xfd2 <udc_process_setup+0xf6>
     f5c:	2f 30       	cpi	r18, 0x0F	; 15
     f5e:	31 05       	cpc	r19, r1
     f60:	51 f1       	breq	.+84     	; 0xfb6 <udc_process_setup+0xda>
     f62:	a2 c1       	rjmp	.+836    	; 0x12a8 <udc_process_setup+0x3cc>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     f64:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <udc_config>
     f68:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     f6c:	dc 01       	movw	r26, r24
     f6e:	6c 91       	ld	r22, X
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	62 d6       	rcall	.+3268   	; 0x1c38 <udd_set_setup_payload>
     f74:	59 c0       	rjmp	.+178    	; 0x1028 <udc_process_setup+0x14c>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     f76:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
     f7a:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
     f7e:	21 89       	ldd	r18, Z+17	; 0x11
     f80:	82 17       	cp	r24, r18
     f82:	08 f0       	brcs	.+2      	; 0xf86 <udc_process_setup+0xaa>
     f84:	9a c1       	rjmp	.+820    	; 0x12ba <udc_process_setup+0x3de>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     f86:	99 27       	eor	r25, r25
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
     f94:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
     f98:	e8 0f       	add	r30, r24
     f9a:	f9 1f       	adc	r31, r25
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     fa0:	fc 01       	movw	r30, r24
     fa2:	62 81       	ldd	r22, Z+2	; 0x02
     fa4:	73 81       	ldd	r23, Z+3	; 0x03
     fa6:	48 d6       	rcall	.+3216   	; 0x1c38 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     fa8:	e0 91 30 23 	lds	r30, 0x2330	; 0x802330 <udd_g_ctrlreq+0x8>
     fac:	f0 91 31 23 	lds	r31, 0x2331	; 0x802331 <udd_g_ctrlreq+0x9>
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	81 83       	std	Z+1, r24	; 0x01
     fb4:	39 c0       	rjmp	.+114    	; 0x1028 <udc_process_setup+0x14c>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     fb6:	80 91 1e 20 	lds	r24, 0x201E	; 0x80201e <udc_config+0x4>
     fba:	90 91 1f 20 	lds	r25, 0x201F	; 0x80201f <udc_config+0x5>
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <udc_process_setup+0xe8>
     fc2:	7b c1       	rjmp	.+758    	; 0x12ba <udc_process_setup+0x3de>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     fc4:	dc 01       	movw	r26, r24
     fc6:	12 96       	adiw	r26, 0x02	; 2
     fc8:	6d 91       	ld	r22, X+
     fca:	7c 91       	ld	r23, X
     fcc:	13 97       	sbiw	r26, 0x03	; 3
     fce:	34 d6       	rcall	.+3176   	; 0x1c38 <udd_set_setup_payload>
     fd0:	2b c0       	rjmp	.+86     	; 0x1028 <udc_process_setup+0x14c>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     fd2:	99 27       	eor	r25, r25
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	71 f0       	breq	.+28     	; 0xff6 <udc_process_setup+0x11a>
     fda:	38 f0       	brcs	.+14     	; 0xfea <udc_process_setup+0x10e>
     fdc:	02 97       	sbiw	r24, 0x02	; 2
     fde:	09 f0       	breq	.+2      	; 0xfe2 <udc_process_setup+0x106>
     fe0:	6c c1       	rjmp	.+728    	; 0x12ba <udc_process_setup+0x3de>
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
		str = udc_string_product_name;
     fe2:	8e e9       	ldi	r24, 0x9E	; 158
     fe4:	90 e2       	ldi	r25, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     fe6:	2f e0       	ldi	r18, 0x0F	; 15
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <udc_process_setup+0x120>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     fea:	64 e0       	ldi	r22, 0x04	; 4
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	88 eb       	ldi	r24, 0xB8	; 184
     ff0:	90 e2       	ldi	r25, 0x20	; 32
     ff2:	22 d6       	rcall	.+3140   	; 0x1c38 <udd_set_setup_payload>
     ff4:	19 c0       	rjmp	.+50     	; 0x1028 <udc_process_setup+0x14c>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     ff6:	8e ea       	ldi	r24, 0xAE	; 174
     ff8:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     ffa:	29 e0       	ldi	r18, 0x09	; 9
     ffc:	38 2f       	mov	r19, r24
     ffe:	a0 e8       	ldi	r26, 0x80	; 128
    1000:	b0 e2       	ldi	r27, 0x20	; 32
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1002:	e8 2f       	mov	r30, r24
    1004:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1006:	81 91       	ld	r24, Z+
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	8d 93       	st	X+, r24
    100c:	9d 93       	st	X+, r25
    100e:	8e 2f       	mov	r24, r30
    1010:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1012:	82 17       	cp	r24, r18
    1014:	c0 f3       	brcs	.-16     	; 0x1006 <udc_process_setup+0x12a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1016:	62 2f       	mov	r22, r18
    1018:	66 0f       	add	r22, r22
    101a:	6e 5f       	subi	r22, 0xFE	; 254
    101c:	60 93 7e 20 	sts	0x207E, r22	; 0x80207e <udc_string_desc>
		udd_set_setup_payload(
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	8e e7       	ldi	r24, 0x7E	; 126
    1024:	90 e2       	ldi	r25, 0x20	; 32
    1026:	08 d6       	rcall	.+3088   	; 0x1c38 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1028:	e8 e2       	ldi	r30, 0x28	; 40
    102a:	f3 e2       	ldi	r31, 0x23	; 35
    102c:	86 81       	ldd	r24, Z+6	; 0x06
    102e:	97 81       	ldd	r25, Z+7	; 0x07
    1030:	22 85       	ldd	r18, Z+10	; 0x0a
    1032:	33 85       	ldd	r19, Z+11	; 0x0b
    1034:	82 17       	cp	r24, r18
    1036:	93 07       	cpc	r25, r19
    1038:	08 f0       	brcs	.+2      	; 0x103c <udc_process_setup+0x160>
    103a:	c4 c1       	rjmp	.+904    	; 0x13c4 <udc_process_setup+0x4e8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    103c:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <udd_g_ctrlreq+0xa>
    1040:	90 93 33 23 	sts	0x2333, r25	; 0x802333 <udd_g_ctrlreq+0xb>
    1044:	bf c1       	rjmp	.+894    	; 0x13c4 <udc_process_setup+0x4e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1046:	21 30       	cpi	r18, 0x01	; 1
    1048:	31 05       	cpc	r19, r1
    104a:	09 f0       	breq	.+2      	; 0x104e <udc_process_setup+0x172>
    104c:	36 c1       	rjmp	.+620    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	80 ef       	ldi	r24, 0xF0	; 240
    1054:	91 e2       	ldi	r25, 0x21	; 33
    1056:	f0 d5       	rcall	.+3040   	; 0x1c38 <udd_set_setup_payload>
    1058:	b5 c1       	rjmp	.+874    	; 0x13c4 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	e1 f5       	brne	.+120    	; 0x10d6 <udc_process_setup+0x1fa>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    105e:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1062:	9a 30       	cpi	r25, 0x0A	; 10
    1064:	c1 f5       	brne	.+112    	; 0x10d6 <udc_process_setup+0x1fa>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1066:	21 30       	cpi	r18, 0x01	; 1
    1068:	31 05       	cpc	r19, r1
    106a:	09 f0       	breq	.+2      	; 0x106e <udc_process_setup+0x192>
    106c:	26 c1       	rjmp	.+588    	; 0x12ba <udc_process_setup+0x3de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    106e:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_num_configuration>
    1072:	88 23       	and	r24, r24
    1074:	09 f4       	brne	.+2      	; 0x1078 <udc_process_setup+0x19c>
    1076:	21 c1       	rjmp	.+578    	; 0x12ba <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1078:	c0 91 2c 23 	lds	r28, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    107c:	d0 91 2d 23 	lds	r29, 0x232D	; 0x80232d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1080:	00 91 ee 21 	lds	r16, 0x21EE	; 0x8021ee <udc_ptr_conf>
    1084:	10 91 ef 21 	lds	r17, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
    1088:	d8 01       	movw	r26, r16
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	84 81       	ldd	r24, Z+4	; 0x04
    1090:	c8 17       	cp	r28, r24
    1092:	08 f0       	brcs	.+2      	; 0x1096 <udc_process_setup+0x1ba>
    1094:	12 c1       	rjmp	.+548    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	8c 2f       	mov	r24, r28
    109a:	19 de       	rcall	.-974    	; 0xcce <udc_update_iface_desc>
    109c:	88 23       	and	r24, r24
    109e:	09 f4       	brne	.+2      	; 0x10a2 <udc_process_setup+0x1c6>
    10a0:	0c c1       	rjmp	.+536    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    10a2:	ce 01       	movw	r24, r28
    10a4:	99 27       	eor	r25, r25
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	d8 01       	movw	r26, r16
    10ac:	12 96       	adiw	r26, 0x02	; 2
    10ae:	ed 91       	ld	r30, X+
    10b0:	fc 91       	ld	r31, X
    10b2:	13 97       	sbiw	r26, 0x03	; 3
    10b4:	e8 0f       	add	r30, r24
    10b6:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    10b8:	01 90       	ld	r0, Z+
    10ba:	f0 81       	ld	r31, Z
    10bc:	e0 2d       	mov	r30, r0
    10be:	86 81       	ldd	r24, Z+6	; 0x06
    10c0:	97 81       	ldd	r25, Z+7	; 0x07
    10c2:	fc 01       	movw	r30, r24
    10c4:	09 95       	icall
    10c6:	80 93 f2 21 	sts	0x21F2, r24	; 0x8021f2 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    10ca:	61 e0       	ldi	r22, 0x01	; 1
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	82 ef       	ldi	r24, 0xF2	; 242
    10d0:	91 e2       	ldi	r25, 0x21	; 33
    10d2:	b2 d5       	rcall	.+2916   	; 0x1c38 <udd_set_setup_payload>
    10d4:	77 c1       	rjmp	.+750    	; 0x13c4 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	09 f0       	breq	.+2      	; 0x10dc <udc_process_setup+0x200>
    10da:	ef c0       	rjmp	.+478    	; 0x12ba <udc_process_setup+0x3de>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    10dc:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    10e0:	81 11       	cpse	r24, r1
    10e2:	e4 c0       	rjmp	.+456    	; 0x12ac <udc_process_setup+0x3d0>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <udc_process_setup+0x210>
    10ea:	e7 c0       	rjmp	.+462    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    10ec:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    10f0:	32 d6       	rcall	.+3172   	; 0x1d56 <udd_ep_is_halted>
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	80 93 ea 21 	sts	0x21EA, r24	; 0x8021ea <udc_ep_status.4577>
    10f8:	90 93 eb 21 	sts	0x21EB, r25	; 0x8021eb <udc_ep_status.4577+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    10fc:	62 e0       	ldi	r22, 0x02	; 2
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	8a ee       	ldi	r24, 0xEA	; 234
    1102:	91 e2       	ldi	r25, 0x21	; 33
    1104:	99 d5       	rcall	.+2866   	; 0x1c38 <udd_set_setup_payload>
    1106:	5e c1       	rjmp	.+700    	; 0x13c4 <udc_process_setup+0x4e8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1108:	8f 71       	andi	r24, 0x1F	; 31
    110a:	09 f0       	breq	.+2      	; 0x110e <udc_process_setup+0x232>
    110c:	83 c0       	rjmp	.+262    	; 0x1214 <udc_process_setup+0x338>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    110e:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1112:	93 30       	cpi	r25, 0x03	; 3
    1114:	09 f4       	brne	.+2      	; 0x1118 <udc_process_setup+0x23c>
    1116:	cc c0       	rjmp	.+408    	; 0x12b0 <udc_process_setup+0x3d4>
    1118:	18 f4       	brcc	.+6      	; 0x1120 <udc_process_setup+0x244>
    111a:	91 30       	cpi	r25, 0x01	; 1
    111c:	a1 f0       	breq	.+40     	; 0x1146 <udc_process_setup+0x26a>
    111e:	7a c0       	rjmp	.+244    	; 0x1214 <udc_process_setup+0x338>
    1120:	95 30       	cpi	r25, 0x05	; 5
    1122:	19 f0       	breq	.+6      	; 0x112a <udc_process_setup+0x24e>
    1124:	99 30       	cpi	r25, 0x09	; 9
    1126:	39 f1       	breq	.+78     	; 0x1176 <udc_process_setup+0x29a>
    1128:	75 c0       	rjmp	.+234    	; 0x1214 <udc_process_setup+0x338>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    112a:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    112e:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1132:	89 2b       	or	r24, r25
    1134:	09 f0       	breq	.+2      	; 0x1138 <udc_process_setup+0x25c>
    1136:	c1 c0       	rjmp	.+386    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1138:	82 e6       	ldi	r24, 0x62	; 98
    113a:	96 e0       	ldi	r25, 0x06	; 6
    113c:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <udd_g_ctrlreq+0xc>
    1140:	90 93 35 23 	sts	0x2335, r25	; 0x802335 <udd_g_ctrlreq+0xd>
    1144:	3f c1       	rjmp	.+638    	; 0x13c4 <udc_process_setup+0x4e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1146:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    114a:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    114e:	89 2b       	or	r24, r25
    1150:	09 f0       	breq	.+2      	; 0x1154 <udc_process_setup+0x278>
    1152:	b3 c0       	rjmp	.+358    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1154:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1158:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	09 f0       	breq	.+2      	; 0x1162 <udc_process_setup+0x286>
    1160:	ac c0       	rjmp	.+344    	; 0x12ba <udc_process_setup+0x3de>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1162:	80 91 f4 21 	lds	r24, 0x21F4	; 0x8021f4 <udc_device_status>
    1166:	90 91 f5 21 	lds	r25, 0x21F5	; 0x8021f5 <udc_device_status+0x1>
    116a:	8d 7f       	andi	r24, 0xFD	; 253
    116c:	80 93 f4 21 	sts	0x21F4, r24	; 0x8021f4 <udc_device_status>
    1170:	90 93 f5 21 	sts	0x21F5, r25	; 0x8021f5 <udc_device_status+0x1>
    1174:	27 c1       	rjmp	.+590    	; 0x13c4 <udc_process_setup+0x4e8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1176:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    117a:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    117e:	89 2b       	or	r24, r25
    1180:	09 f0       	breq	.+2      	; 0x1184 <udc_process_setup+0x2a8>
    1182:	9b c0       	rjmp	.+310    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1184:	4e d5       	rcall	.+2716   	; 0x1c22 <udd_getaddress>
    1186:	88 23       	and	r24, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <udc_process_setup+0x2b0>
    118a:	97 c0       	rjmp	.+302    	; 0x12ba <udc_process_setup+0x3de>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    118c:	20 91 2a 23 	lds	r18, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1190:	30 91 2b 23 	lds	r19, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    1194:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1196:	e0 91 1a 20 	lds	r30, 0x201A	; 0x80201a <udc_config>
    119a:	f0 91 1b 20 	lds	r31, 0x201B	; 0x80201b <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    119e:	81 89       	ldd	r24, Z+17	; 0x11
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	82 17       	cp	r24, r18
    11a4:	93 07       	cpc	r25, r19
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <udc_process_setup+0x2ce>
    11a8:	88 c0       	rjmp	.+272    	; 0x12ba <udc_process_setup+0x3de>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    11aa:	41 de       	rcall	.-894    	; 0xe2e <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    11ac:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    11b0:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    11b4:	80 93 f0 21 	sts	0x21F0, r24	; 0x8021f0 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <udc_process_setup+0x2e2>
    11bc:	03 c1       	rjmp	.+518    	; 0x13c4 <udc_process_setup+0x4e8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    11be:	99 27       	eor	r25, r25
    11c0:	81 50       	subi	r24, 0x01	; 1
    11c2:	90 4c       	sbci	r25, 0xC0	; 192
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <udc_config+0x2>
    11d0:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <udc_config+0x3>
    11d4:	e8 0f       	add	r30, r24
    11d6:	f9 1f       	adc	r31, r25
    11d8:	e0 93 ee 21 	sts	0x21EE, r30	; 0x8021ee <udc_ptr_conf>
    11dc:	f0 93 ef 21 	sts	0x21EF, r31	; 0x8021ef <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11e0:	01 90       	ld	r0, Z+
    11e2:	f0 81       	ld	r31, Z
    11e4:	e0 2d       	mov	r30, r0
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
    11e8:	88 23       	and	r24, r24
    11ea:	09 f4       	brne	.+2      	; 0x11ee <udc_process_setup+0x312>
    11ec:	eb c0       	rjmp	.+470    	; 0x13c4 <udc_process_setup+0x4e8>
    11ee:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8c 2f       	mov	r24, r28
    11f4:	e8 dd       	rcall	.-1072   	; 0xdc6 <udc_iface_enable>
    11f6:	88 23       	and	r24, r24
    11f8:	09 f4       	brne	.+2      	; 0x11fc <udc_process_setup+0x320>
    11fa:	5f c0       	rjmp	.+190    	; 0x12ba <udc_process_setup+0x3de>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    11fc:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11fe:	e0 91 ee 21 	lds	r30, 0x21EE	; 0x8021ee <udc_ptr_conf>
    1202:	f0 91 ef 21 	lds	r31, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
    1206:	01 90       	ld	r0, Z+
    1208:	f0 81       	ld	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	84 81       	ldd	r24, Z+4	; 0x04
    120e:	c8 17       	cp	r28, r24
    1210:	78 f3       	brcs	.-34     	; 0x11f0 <udc_process_setup+0x314>
    1212:	d8 c0       	rjmp	.+432    	; 0x13c4 <udc_process_setup+0x4e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	e1 f4       	brne	.+56     	; 0x1250 <udc_process_setup+0x374>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1218:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    121c:	9b 30       	cpi	r25, 0x0B	; 11
    121e:	c1 f4       	brne	.+48     	; 0x1250 <udc_process_setup+0x374>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1220:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1224:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1228:	89 2b       	or	r24, r25
    122a:	09 f0       	breq	.+2      	; 0x122e <udc_process_setup+0x352>
    122c:	46 c0       	rjmp	.+140    	; 0x12ba <udc_process_setup+0x3de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    122e:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_num_configuration>
    1232:	88 23       	and	r24, r24
    1234:	09 f4       	brne	.+2      	; 0x1238 <udc_process_setup+0x35c>
    1236:	41 c0       	rjmp	.+130    	; 0x12ba <udc_process_setup+0x3de>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1238:	e8 e2       	ldi	r30, 0x28	; 40
    123a:	f3 e2       	ldi	r31, 0x23	; 35
    123c:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    123e:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1240:	8c 2f       	mov	r24, r28
    1242:	7f dd       	rcall	.-1282   	; 0xd42 <udc_iface_disable>
    1244:	88 23       	and	r24, r24
    1246:	c9 f1       	breq	.+114    	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1248:	6d 2f       	mov	r22, r29
    124a:	8c 2f       	mov	r24, r28
    124c:	bc dd       	rcall	.-1160   	; 0xdc6 <udc_iface_enable>
    124e:	33 c0       	rjmp	.+102    	; 0x12b6 <udc_process_setup+0x3da>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	99 f5       	brne	.+102    	; 0x12ba <udc_process_setup+0x3de>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1254:	80 91 29 23 	lds	r24, 0x2329	; 0x802329 <udd_g_ctrlreq+0x1>
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	19 f0       	breq	.+6      	; 0x1262 <udc_process_setup+0x386>
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	89 f0       	breq	.+34     	; 0x1282 <udc_process_setup+0x3a6>
    1260:	29 c0       	rjmp	.+82     	; 0x12b4 <udc_process_setup+0x3d8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1262:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1266:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    126a:	89 2b       	or	r24, r25
    126c:	31 f5       	brne	.+76     	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    126e:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1272:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    1276:	89 2b       	or	r24, r25
    1278:	01 f5       	brne	.+64     	; 0x12ba <udc_process_setup+0x3de>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    127a:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    127e:	86 d5       	rcall	.+2828   	; 0x1d8c <udd_ep_clear_halt>
    1280:	1a c0       	rjmp	.+52     	; 0x12b6 <udc_process_setup+0x3da>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1282:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1286:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    128a:	89 2b       	or	r24, r25
    128c:	b1 f4       	brne	.+44     	; 0x12ba <udc_process_setup+0x3de>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    128e:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <udd_g_ctrlreq+0x2>
    1292:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <udd_g_ctrlreq+0x3>
    1296:	89 2b       	or	r24, r25
    1298:	81 f4       	brne	.+32     	; 0x12ba <udc_process_setup+0x3de>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    129a:	c8 e2       	ldi	r28, 0x28	; 40
    129c:	d3 e2       	ldi	r29, 0x23	; 35
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	73 d6       	rcall	.+3302   	; 0x1f88 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	d6 d6       	rcall	.+3500   	; 0x2052 <udd_ep_set_halt>
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <udc_process_setup+0x3da>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <udc_process_setup+0x3da>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <udc_process_setup+0x3da>
				break;
			}
		}
#endif
	}
	return false;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    12b6:	81 11       	cpse	r24, r1
    12b8:	86 c0       	rjmp	.+268    	; 0x13c6 <udc_process_setup+0x4ea>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    12ba:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
    12be:	8f 71       	andi	r24, 0x1F	; 31
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	71 f5       	brne	.+92     	; 0x1320 <udc_process_setup+0x444>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    12c4:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_num_configuration>
    12c8:	88 23       	and	r24, r24
    12ca:	51 f1       	breq	.+84     	; 0x1320 <udc_process_setup+0x444>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    12cc:	00 91 2c 23 	lds	r16, 0x232C	; 0x80232c <udd_g_ctrlreq+0x4>
    12d0:	10 91 2d 23 	lds	r17, 0x232D	; 0x80232d <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    12d4:	c0 91 ee 21 	lds	r28, 0x21EE	; 0x8021ee <udc_ptr_conf>
    12d8:	d0 91 ef 21 	lds	r29, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
    12dc:	e8 81       	ld	r30, Y
    12de:	f9 81       	ldd	r31, Y+1	; 0x01
    12e0:	84 81       	ldd	r24, Z+4	; 0x04
    12e2:	08 17       	cp	r16, r24
    12e4:	e8 f4       	brcc	.+58     	; 0x1320 <udc_process_setup+0x444>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	80 2f       	mov	r24, r16
    12ea:	f1 dc       	rcall	.-1566   	; 0xcce <udc_update_iface_desc>
    12ec:	88 23       	and	r24, r24
    12ee:	c1 f0       	breq	.+48     	; 0x1320 <udc_process_setup+0x444>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    12f0:	f8 01       	movw	r30, r16
    12f2:	ff 27       	eor	r31, r31
    12f4:	cf 01       	movw	r24, r30
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	ea 81       	ldd	r30, Y+2	; 0x02
    12fc:	fb 81       	ldd	r31, Y+3	; 0x03
    12fe:	e8 0f       	add	r30, r24
    1300:	f9 1f       	adc	r31, r25
    1302:	c0 81       	ld	r28, Z
    1304:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1306:	ee 81       	ldd	r30, Y+6	; 0x06
    1308:	ff 81       	ldd	r31, Y+7	; 0x07
    130a:	09 95       	icall
    130c:	68 2f       	mov	r22, r24
    130e:	80 2f       	mov	r24, r16
    1310:	de dc       	rcall	.-1604   	; 0xcce <udc_update_iface_desc>
    1312:	88 23       	and	r24, r24
    1314:	29 f0       	breq	.+10     	; 0x1320 <udc_process_setup+0x444>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1316:	ec 81       	ldd	r30, Y+4	; 0x04
    1318:	fd 81       	ldd	r31, Y+5	; 0x05
    131a:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    131c:	81 11       	cpse	r24, r1
    131e:	53 c0       	rjmp	.+166    	; 0x13c6 <udc_process_setup+0x4ea>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1320:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
    1324:	8f 71       	andi	r24, 0x1F	; 31
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	09 f0       	breq	.+2      	; 0x132c <udc_process_setup+0x450>
    132a:	40 c0       	rjmp	.+128    	; 0x13ac <udc_process_setup+0x4d0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    132c:	80 91 f0 21 	lds	r24, 0x21F0	; 0x8021f0 <udc_num_configuration>
    1330:	88 23       	and	r24, r24
    1332:	b1 f1       	breq	.+108    	; 0x13a0 <udc_process_setup+0x4c4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1334:	a0 91 ee 21 	lds	r26, 0x21EE	; 0x8021ee <udc_ptr_conf>
    1338:	b0 91 ef 21 	lds	r27, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
    133c:	ed 91       	ld	r30, X+
    133e:	fc 91       	ld	r31, X
    1340:	11 97       	sbiw	r26, 0x01	; 1
    1342:	84 81       	ldd	r24, Z+4	; 0x04
    1344:	88 23       	and	r24, r24
    1346:	71 f1       	breq	.+92     	; 0x13a4 <udc_process_setup+0x4c8>
    1348:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    134a:	ec 2f       	mov	r30, r28
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	8d 91       	ld	r24, X+
    1356:	9c 91       	ld	r25, X
    1358:	13 97       	sbiw	r26, 0x03	; 3
    135a:	e8 0f       	add	r30, r24
    135c:	f9 1f       	adc	r31, r25
    135e:	00 81       	ld	r16, Z
    1360:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1362:	d8 01       	movw	r26, r16
    1364:	16 96       	adiw	r26, 0x06	; 6
    1366:	ed 91       	ld	r30, X+
    1368:	fc 91       	ld	r31, X
    136a:	17 97       	sbiw	r26, 0x07	; 7
    136c:	09 95       	icall
    136e:	68 2f       	mov	r22, r24
    1370:	8c 2f       	mov	r24, r28
    1372:	ad dc       	rcall	.-1702   	; 0xcce <udc_update_iface_desc>
    1374:	88 23       	and	r24, r24
    1376:	39 f1       	breq	.+78     	; 0x13c6 <udc_process_setup+0x4ea>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1378:	d8 01       	movw	r26, r16
    137a:	14 96       	adiw	r26, 0x04	; 4
    137c:	ed 91       	ld	r30, X+
    137e:	fc 91       	ld	r31, X
    1380:	15 97       	sbiw	r26, 0x05	; 5
    1382:	09 95       	icall
    1384:	81 11       	cpse	r24, r1
    1386:	1f c0       	rjmp	.+62     	; 0x13c6 <udc_process_setup+0x4ea>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1388:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    138a:	a0 91 ee 21 	lds	r26, 0x21EE	; 0x8021ee <udc_ptr_conf>
    138e:	b0 91 ef 21 	lds	r27, 0x21EF	; 0x8021ef <udc_ptr_conf+0x1>
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	94 81       	ldd	r25, Z+4	; 0x04
    139a:	c9 17       	cp	r28, r25
    139c:	b0 f2       	brcs	.-84     	; 0x134a <udc_process_setup+0x46e>
    139e:	13 c0       	rjmp	.+38     	; 0x13c6 <udc_process_setup+0x4ea>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	11 c0       	rjmp	.+34     	; 0x13c6 <udc_process_setup+0x4ea>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	0f c0       	rjmp	.+30     	; 0x13c6 <udc_process_setup+0x4ea>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <udc_process_setup+0x4ea>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0b c0       	rjmp	.+22     	; 0x13c6 <udc_process_setup+0x4ea>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    13b0:	98 2f       	mov	r25, r24
    13b2:	90 76       	andi	r25, 0x60	; 96
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <udc_process_setup+0x4dc>
    13b6:	81 cf       	rjmp	.-254    	; 0x12ba <udc_process_setup+0x3de>
    13b8:	a7 ce       	rjmp	.-690    	; 0x1108 <udc_process_setup+0x22c>
    13ba:	98 2f       	mov	r25, r24
    13bc:	90 76       	andi	r25, 0x60	; 96
    13be:	09 f0       	breq	.+2      	; 0x13c2 <udc_process_setup+0x4e6>
    13c0:	7c cf       	rjmp	.-264    	; 0x12ba <udc_process_setup+0x3de>
    13c2:	a5 cd       	rjmp	.-1206   	; 0xf0e <udc_process_setup+0x32>
		if (udc_reqstd()) {
			return true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    13d0:	43 e0       	ldi	r20, 0x03	; 3
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	96 e0       	ldi	r25, 0x06	; 6
    13da:	7b d8       	rcall	.-3850   	; 0x4d2 <ioport_configure_port_pin>
    13dc:	43 e0       	ldi	r20, 0x03	; 3
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	62 e0       	ldi	r22, 0x02	; 2
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	96 e0       	ldi	r25, 0x06	; 6
    13e6:	75 d8       	rcall	.-3862   	; 0x4d2 <ioport_configure_port_pin>
    13e8:	43 e0       	ldi	r20, 0x03	; 3
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	64 e0       	ldi	r22, 0x04	; 4
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	96 e0       	ldi	r25, 0x06	; 6
    13f2:	6f d8       	rcall	.-3874   	; 0x4d2 <ioport_configure_port_pin>
    13f4:	43 e0       	ldi	r20, 0x03	; 3
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	68 e0       	ldi	r22, 0x08	; 8
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	96 e0       	ldi	r25, 0x06	; 6
    13fe:	69 d8       	rcall	.-3886   	; 0x4d2 <ioport_configure_port_pin>
    1400:	43 e0       	ldi	r20, 0x03	; 3
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e1       	ldi	r22, 0x10	; 16
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	96 e0       	ldi	r25, 0x06	; 6
    140a:	63 d8       	rcall	.-3898   	; 0x4d2 <ioport_configure_port_pin>
    140c:	43 e0       	ldi	r20, 0x03	; 3
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e2       	ldi	r22, 0x20	; 32
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	96 e0       	ldi	r25, 0x06	; 6
    1416:	5d d8       	rcall	.-3910   	; 0x4d2 <ioport_configure_port_pin>
    1418:	43 e0       	ldi	r20, 0x03	; 3
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	60 e4       	ldi	r22, 0x40	; 64
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	96 e0       	ldi	r25, 0x06	; 6
    1422:	57 d8       	rcall	.-3922   	; 0x4d2 <ioport_configure_port_pin>
    1424:	43 e0       	ldi	r20, 0x03	; 3
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	60 e8       	ldi	r22, 0x80	; 128
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	96 e0       	ldi	r25, 0x06	; 6
    142e:	51 d8       	rcall	.-3934   	; 0x4d2 <ioport_configure_port_pin>
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	58 e1       	ldi	r21, 0x18	; 24
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	80 e2       	ldi	r24, 0x20	; 32
    1438:	96 e0       	ldi	r25, 0x06	; 6
    143a:	4b d8       	rcall	.-3946   	; 0x4d2 <ioport_configure_port_pin>
    143c:	40 e0       	ldi	r20, 0x00	; 0
    143e:	58 e1       	ldi	r21, 0x18	; 24
    1440:	62 e0       	ldi	r22, 0x02	; 2
    1442:	80 e2       	ldi	r24, 0x20	; 32
    1444:	96 e0       	ldi	r25, 0x06	; 6
    1446:	45 d8       	rcall	.-3958   	; 0x4d2 <ioport_configure_port_pin>
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	58 e1       	ldi	r21, 0x18	; 24
    144c:	64 e0       	ldi	r22, 0x04	; 4
    144e:	80 e2       	ldi	r24, 0x20	; 32
    1450:	96 e0       	ldi	r25, 0x06	; 6
    1452:	3f d8       	rcall	.-3970   	; 0x4d2 <ioport_configure_port_pin>
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	58 e1       	ldi	r21, 0x18	; 24
    1458:	68 e0       	ldi	r22, 0x08	; 8
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	96 e0       	ldi	r25, 0x06	; 6
    145e:	39 c8       	rjmp	.-3982   	; 0x4d2 <ioport_configure_port_pin>
    1460:	08 95       	ret

00001462 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1462:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1464:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1466:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1468:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    146a:	60 83       	st	Z, r22
	ret                             // Return to caller
    146c:	08 95       	ret

0000146e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    146e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1472:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1474:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1476:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    147a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    147c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1480:	08 95       	ret

00001482 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	00 d0       	rcall	.+0      	; 0x1488 <udd_sleep_mode+0x6>
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	81 11       	cpse	r24, r1
    148e:	26 c0       	rjmp	.+76     	; 0x14dc <udd_sleep_mode+0x5a>
    1490:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <udd_b_idle>
    1494:	99 23       	and	r25, r25
    1496:	f9 f0       	breq	.+62     	; 0x14d6 <udd_sleep_mode+0x54>
    1498:	90 91 23 23 	lds	r25, 0x2323	; 0x802323 <sleepmgr_locks+0x1>
    149c:	91 11       	cpse	r25, r1
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <udd_sleep_mode+0x20>
    14a0:	ff cf       	rjmp	.-2      	; 0x14a0 <udd_sleep_mode+0x1e>
    14a2:	9f b7       	in	r25, 0x3f	; 63
    14a4:	9a 83       	std	Y+2, r25	; 0x02
    14a6:	f8 94       	cli
    14a8:	2a 81       	ldd	r18, Y+2	; 0x02
    14aa:	e2 e2       	ldi	r30, 0x22	; 34
    14ac:	f3 e2       	ldi	r31, 0x23	; 35
    14ae:	91 81       	ldd	r25, Z+1	; 0x01
    14b0:	91 50       	subi	r25, 0x01	; 1
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	2f bf       	out	0x3f, r18	; 63
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <udd_sleep_mode+0x54>
    14b8:	90 91 23 23 	lds	r25, 0x2323	; 0x802323 <sleepmgr_locks+0x1>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	09 f4       	brne	.+2      	; 0x14c2 <udd_sleep_mode+0x40>
    14c0:	ff cf       	rjmp	.-2      	; 0x14c0 <udd_sleep_mode+0x3e>
    14c2:	9f b7       	in	r25, 0x3f	; 63
    14c4:	99 83       	std	Y+1, r25	; 0x01
    14c6:	f8 94       	cli
    14c8:	29 81       	ldd	r18, Y+1	; 0x01
    14ca:	e2 e2       	ldi	r30, 0x22	; 34
    14cc:	f3 e2       	ldi	r31, 0x23	; 35
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	9f 5f       	subi	r25, 0xFF	; 255
    14d2:	91 83       	std	Z+1, r25	; 0x01
    14d4:	2f bf       	out	0x3f, r18	; 63
    14d6:	80 93 20 23 	sts	0x2320, r24	; 0x802320 <udd_b_idle>
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <udd_sleep_mode+0x64>
    14dc:	90 91 20 23 	lds	r25, 0x2320	; 0x802320 <udd_b_idle>
    14e0:	99 23       	and	r25, r25
    14e2:	51 f3       	breq	.-44     	; 0x14b8 <udd_sleep_mode+0x36>
    14e4:	f8 cf       	rjmp	.-16     	; 0x14d6 <udd_sleep_mode+0x54>
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <udd_ctrl_init>:
    14f0:	0f 93       	push	r16
    14f2:	e8 ec       	ldi	r30, 0xC8	; 200
    14f4:	f4 e0       	ldi	r31, 0x04	; 4
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 7d       	andi	r24, 0xDF	; 223
    14fa:	80 83       	st	Z, r24
    14fc:	80 81       	ld	r24, Z
    14fe:	8f 7d       	andi	r24, 0xDF	; 223
    1500:	80 83       	st	Z, r24
    1502:	e4 ef       	ldi	r30, 0xF4	; 244
    1504:	f2 e2       	ldi	r31, 0x22	; 34
    1506:	02 e0       	ldi	r16, 0x02	; 2
    1508:	05 93       	las	Z, r16
    150a:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_sram+0x16>
    150e:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_sram+0x17>
    1512:	00 e2       	ldi	r16, 0x20	; 32
    1514:	06 93       	lac	Z, r16
    1516:	00 e4       	ldi	r16, 0x40	; 64
    1518:	06 93       	lac	Z, r16
    151a:	ec ee       	ldi	r30, 0xEC	; 236
    151c:	f2 e2       	ldi	r31, 0x22	; 34
    151e:	00 e4       	ldi	r16, 0x40	; 64
    1520:	06 93       	lac	Z, r16
    1522:	e8 e2       	ldi	r30, 0x28	; 40
    1524:	f3 e2       	ldi	r31, 0x23	; 35
    1526:	14 86       	std	Z+12, r1	; 0x0c
    1528:	15 86       	std	Z+13, r1	; 0x0d
    152a:	16 86       	std	Z+14, r1	; 0x0e
    152c:	17 86       	std	Z+15, r1	; 0x0f
    152e:	12 86       	std	Z+10, r1	; 0x0a
    1530:	13 86       	std	Z+11, r1	; 0x0b
    1532:	10 92 df 22 	sts	0x22DF, r1	; 0x8022df <udd_ep_control_state>
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <udd_ctrl_stall_data>:
    153a:	0f 93       	push	r16
    153c:	85 e0       	ldi	r24, 0x05	; 5
    153e:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <udd_ep_control_state>
    1542:	e5 ef       	ldi	r30, 0xF5	; 245
    1544:	f2 e2       	ldi	r31, 0x22	; 34
    1546:	04 e0       	ldi	r16, 0x04	; 4
    1548:	05 93       	las	Z, r16
    154a:	ed ee       	ldi	r30, 0xED	; 237
    154c:	f2 e2       	ldi	r31, 0x22	; 34
    154e:	04 e0       	ldi	r16, 0x04	; 4
    1550:	05 93       	las	Z, r16
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <udd_ctrl_send_zlp_in>:
    1556:	0f 93       	push	r16
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <udd_ep_control_state>
    155e:	10 92 f6 22 	sts	0x22F6, r1	; 0x8022f6 <udd_sram+0x16>
    1562:	10 92 f7 22 	sts	0x22F7, r1	; 0x8022f7 <udd_sram+0x17>
    1566:	e4 ef       	ldi	r30, 0xF4	; 244
    1568:	f2 e2       	ldi	r31, 0x22	; 34
    156a:	02 e0       	ldi	r16, 0x02	; 2
    156c:	06 93       	lac	Z, r16
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <udd_ctrl_endofrequest>:
    1572:	e0 91 34 23 	lds	r30, 0x2334	; 0x802334 <udd_g_ctrlreq+0xc>
    1576:	f0 91 35 23 	lds	r31, 0x2335	; 0x802335 <udd_g_ctrlreq+0xd>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <udd_ctrl_endofrequest+0xe>
    157e:	09 95       	icall
    1580:	08 95       	ret

00001582 <udd_ctrl_in_sent>:
    1582:	0f 93       	push	r16
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ep_control_state>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	19 f4       	brne	.+6      	; 0x1596 <udd_ctrl_in_sent+0x14>
    1590:	f0 df       	rcall	.-32     	; 0x1572 <udd_ctrl_endofrequest>
    1592:	ae df       	rcall	.-164    	; 0x14f0 <udd_ctrl_init>
    1594:	5e c0       	rjmp	.+188    	; 0x1652 <udd_ctrl_in_sent+0xd0>
    1596:	80 91 db 22 	lds	r24, 0x22DB	; 0x8022db <udd_ctrl_payload_nb_trans>
    159a:	90 91 dc 22 	lds	r25, 0x22DC	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    159e:	c0 91 32 23 	lds	r28, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
    15a2:	d0 91 33 23 	lds	r29, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
    15a6:	c8 1b       	sub	r28, r24
    15a8:	d9 0b       	sbc	r29, r25
    15aa:	71 f5       	brne	.+92     	; 0x1608 <udd_ctrl_in_sent+0x86>
    15ac:	20 91 dd 22 	lds	r18, 0x22DD	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    15b0:	30 91 de 22 	lds	r19, 0x22DE	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    15bc:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
    15c0:	20 91 2e 23 	lds	r18, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    15c4:	30 91 2f 23 	lds	r19, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    15c8:	82 17       	cp	r24, r18
    15ca:	93 07       	cpc	r25, r19
    15cc:	21 f0       	breq	.+8      	; 0x15d6 <udd_ctrl_in_sent+0x54>
    15ce:	80 91 f6 21 	lds	r24, 0x21F6	; 0x8021f6 <b_shortpacket.5291>
    15d2:	88 23       	and	r24, r24
    15d4:	41 f0       	breq	.+16     	; 0x15e6 <udd_ctrl_in_sent+0x64>
    15d6:	84 e0       	ldi	r24, 0x04	; 4
    15d8:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <udd_ep_control_state>
    15dc:	ec ee       	ldi	r30, 0xEC	; 236
    15de:	f2 e2       	ldi	r31, 0x22	; 34
    15e0:	02 e0       	ldi	r16, 0x02	; 2
    15e2:	06 93       	lac	Z, r16
    15e4:	36 c0       	rjmp	.+108    	; 0x1652 <udd_ctrl_in_sent+0xd0>
    15e6:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <udd_g_ctrlreq+0xe>
    15ea:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <udd_g_ctrlreq+0xf>
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	99 f0       	breq	.+38     	; 0x1618 <udd_ctrl_in_sent+0x96>
    15f2:	09 95       	icall
    15f4:	88 23       	and	r24, r24
    15f6:	81 f0       	breq	.+32     	; 0x1618 <udd_ctrl_in_sent+0x96>
    15f8:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <udd_ctrl_payload_nb_trans>
    15fc:	10 92 dc 22 	sts	0x22DC, r1	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    1600:	c0 91 32 23 	lds	r28, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
    1604:	d0 91 33 23 	lds	r29, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
    1608:	c0 34       	cpi	r28, 0x40	; 64
    160a:	d1 05       	cpc	r29, r1
    160c:	28 f0       	brcs	.+10     	; 0x1618 <udd_ctrl_in_sent+0x96>
    160e:	10 92 f6 21 	sts	0x21F6, r1	; 0x8021f6 <b_shortpacket.5291>
    1612:	c0 e4       	ldi	r28, 0x40	; 64
    1614:	d0 e0       	ldi	r29, 0x00	; 0
    1616:	03 c0       	rjmp	.+6      	; 0x161e <udd_ctrl_in_sent+0x9c>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	80 93 f6 21 	sts	0x21F6, r24	; 0x8021f6 <b_shortpacket.5291>
    161e:	e0 ee       	ldi	r30, 0xE0	; 224
    1620:	f2 e2       	ldi	r31, 0x22	; 34
    1622:	c6 8b       	std	Z+22, r28	; 0x16
    1624:	d7 8b       	std	Z+23, r29	; 0x17
    1626:	80 91 db 22 	lds	r24, 0x22DB	; 0x8022db <udd_ctrl_payload_nb_trans>
    162a:	90 91 dc 22 	lds	r25, 0x22DC	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    162e:	20 91 30 23 	lds	r18, 0x2330	; 0x802330 <udd_g_ctrlreq+0x8>
    1632:	30 91 31 23 	lds	r19, 0x2331	; 0x802331 <udd_g_ctrlreq+0x9>
    1636:	28 0f       	add	r18, r24
    1638:	39 1f       	adc	r19, r25
    163a:	20 8f       	std	Z+24, r18	; 0x18
    163c:	31 8f       	std	Z+25, r19	; 0x19
    163e:	c8 0f       	add	r28, r24
    1640:	d9 1f       	adc	r29, r25
    1642:	c0 93 db 22 	sts	0x22DB, r28	; 0x8022db <udd_ctrl_payload_nb_trans>
    1646:	d0 93 dc 22 	sts	0x22DC, r29	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    164a:	e4 ef       	ldi	r30, 0xF4	; 244
    164c:	f2 e2       	ldi	r31, 0x22	; 34
    164e:	02 e0       	ldi	r16, 0x02	; 2
    1650:	06 93       	lac	Z, r16
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	0f 91       	pop	r16
    1658:	08 95       	ret

0000165a <udd_ep_get_size>:
    165a:	fc 01       	movw	r30, r24
    165c:	81 81       	ldd	r24, Z+1	; 0x01
    165e:	e8 2f       	mov	r30, r24
    1660:	e7 70       	andi	r30, 0x07	; 7
    1662:	8e 2f       	mov	r24, r30
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	fc 01       	movw	r30, r24
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	e7 30       	cpi	r30, 0x07	; 7
    166c:	f1 05       	cpc	r31, r1
    166e:	c8 f4       	brcc	.+50     	; 0x16a2 <udd_ep_get_size+0x48>
    1670:	e2 50       	subi	r30, 0x02	; 2
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__tablejump2__>
    1678:	80 e1       	ldi	r24, 0x10	; 16
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	08 95       	ret
    167e:	80 e2       	ldi	r24, 0x20	; 32
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	08 95       	ret
    1684:	80 e4       	ldi	r24, 0x40	; 64
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	08 95       	ret
    168a:	80 e8       	ldi	r24, 0x80	; 128
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	08 95       	ret
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	08 95       	ret
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	92 e0       	ldi	r25, 0x02	; 2
    169a:	08 95       	ret
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	08 95       	ret
    16a2:	88 e0       	ldi	r24, 0x08	; 8
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	08 95       	ret

000016a8 <udd_ep_get_job>:
    16a8:	28 2f       	mov	r18, r24
    16aa:	2f 70       	andi	r18, 0x0F	; 15
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	08 2e       	mov	r0, r24
    16b4:	00 0c       	add	r0, r0
    16b6:	99 0b       	sbc	r25, r25
    16b8:	88 27       	eor	r24, r24
    16ba:	99 0f       	add	r25, r25
    16bc:	88 1f       	adc	r24, r24
    16be:	99 27       	eor	r25, r25
    16c0:	82 0f       	add	r24, r18
    16c2:	93 1f       	adc	r25, r19
    16c4:	02 97       	sbiw	r24, 0x02	; 2
    16c6:	9c 01       	movw	r18, r24
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	22 0f       	add	r18, r18
    16d2:	33 1f       	adc	r19, r19
    16d4:	82 0f       	add	r24, r18
    16d6:	93 1f       	adc	r25, r19
    16d8:	89 58       	subi	r24, 0x89	; 137
    16da:	9d 4d       	sbci	r25, 0xDD	; 221
    16dc:	08 95       	ret

000016de <udd_ctrl_interrupt_tc_setup>:
    16de:	0f 93       	push	r16
    16e0:	cf 93       	push	r28
    16e2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    16e6:	80 ff       	sbrs	r24, 0
    16e8:	64 c0       	rjmp	.+200    	; 0x17b2 <udd_ctrl_interrupt_tc_setup+0xd4>
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    16f0:	ec ee       	ldi	r30, 0xEC	; 236
    16f2:	f2 e2       	ldi	r31, 0x22	; 34
    16f4:	00 e8       	ldi	r16, 0x80	; 128
    16f6:	06 93       	lac	Z, r16
    16f8:	e4 ef       	ldi	r30, 0xF4	; 244
    16fa:	f2 e2       	ldi	r31, 0x22	; 34
    16fc:	00 e8       	ldi	r16, 0x80	; 128
    16fe:	06 93       	lac	Z, r16
    1700:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    1704:	ec ee       	ldi	r30, 0xEC	; 236
    1706:	f2 e2       	ldi	r31, 0x22	; 34
    1708:	00 e1       	ldi	r16, 0x10	; 16
    170a:	06 93       	lac	Z, r16
    170c:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ep_control_state>
    1710:	88 23       	and	r24, r24
    1712:	29 f0       	breq	.+10     	; 0x171e <udd_ctrl_interrupt_tc_setup+0x40>
    1714:	83 50       	subi	r24, 0x03	; 3
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	08 f4       	brcc	.+2      	; 0x171c <udd_ctrl_interrupt_tc_setup+0x3e>
    171a:	2b df       	rcall	.-426    	; 0x1572 <udd_ctrl_endofrequest>
    171c:	e9 de       	rcall	.-558    	; 0x14f0 <udd_ctrl_init>
    171e:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <udd_sram+0xe>
    1722:	90 91 ef 22 	lds	r25, 0x22EF	; 0x8022ef <udd_sram+0xf>
    1726:	08 97       	sbiw	r24, 0x08	; 8
    1728:	09 f0       	breq	.+2      	; 0x172c <udd_ctrl_interrupt_tc_setup+0x4e>
    172a:	45 c0       	rjmp	.+138    	; 0x17b6 <udd_ctrl_interrupt_tc_setup+0xd8>
    172c:	88 e0       	ldi	r24, 0x08	; 8
    172e:	eb e9       	ldi	r30, 0x9B	; 155
    1730:	f2 e2       	ldi	r31, 0x22	; 34
    1732:	a8 e2       	ldi	r26, 0x28	; 40
    1734:	b3 e2       	ldi	r27, 0x23	; 35
    1736:	01 90       	ld	r0, Z+
    1738:	0d 92       	st	X+, r0
    173a:	8a 95       	dec	r24
    173c:	e1 f7       	brne	.-8      	; 0x1736 <udd_ctrl_interrupt_tc_setup+0x58>
    173e:	e8 ec       	ldi	r30, 0xC8	; 200
    1740:	f4 e0       	ldi	r31, 0x04	; 4
    1742:	80 81       	ld	r24, Z
    1744:	80 62       	ori	r24, 0x20	; 32
    1746:	80 83       	st	Z, r24
    1748:	80 81       	ld	r24, Z
    174a:	80 62       	ori	r24, 0x20	; 32
    174c:	80 83       	st	Z, r24
    174e:	c6 db       	rcall	.-2164   	; 0xedc <udc_process_setup>
    1750:	c8 2f       	mov	r28, r24
    1752:	81 11       	cpse	r24, r1
    1754:	03 c0       	rjmp	.+6      	; 0x175c <udd_ctrl_interrupt_tc_setup+0x7e>
    1756:	f1 de       	rcall	.-542    	; 0x153a <udd_ctrl_stall_data>
    1758:	c1 e0       	ldi	r28, 0x01	; 1
    175a:	2e c0       	rjmp	.+92     	; 0x17b8 <udd_ctrl_interrupt_tc_setup+0xda>
    175c:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <udd_g_ctrlreq>
    1760:	88 23       	and	r24, r24
    1762:	6c f4       	brge	.+26     	; 0x177e <udd_ctrl_interrupt_tc_setup+0xa0>
    1764:	10 92 dd 22 	sts	0x22DD, r1	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    1768:	10 92 de 22 	sts	0x22DE, r1	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
    176c:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <udd_ctrl_payload_nb_trans>
    1770:	10 92 dc 22 	sts	0x22DC, r1	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    1774:	82 e0       	ldi	r24, 0x02	; 2
    1776:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <udd_ep_control_state>
    177a:	03 df       	rcall	.-506    	; 0x1582 <udd_ctrl_in_sent>
    177c:	1d c0       	rjmp	.+58     	; 0x17b8 <udd_ctrl_interrupt_tc_setup+0xda>
    177e:	80 91 2e 23 	lds	r24, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    1782:	90 91 2f 23 	lds	r25, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    1786:	89 2b       	or	r24, r25
    1788:	11 f4       	brne	.+4      	; 0x178e <udd_ctrl_interrupt_tc_setup+0xb0>
    178a:	e5 de       	rcall	.-566    	; 0x1556 <udd_ctrl_send_zlp_in>
    178c:	15 c0       	rjmp	.+42     	; 0x17b8 <udd_ctrl_interrupt_tc_setup+0xda>
    178e:	10 92 dd 22 	sts	0x22DD, r1	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    1792:	10 92 de 22 	sts	0x22DE, r1	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
    1796:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <udd_ctrl_payload_nb_trans>
    179a:	10 92 dc 22 	sts	0x22DC, r1	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <udd_ep_control_state>
    17a4:	ec ee       	ldi	r30, 0xEC	; 236
    17a6:	f2 e2       	ldi	r31, 0x22	; 34
    17a8:	02 e0       	ldi	r16, 0x02	; 2
    17aa:	06 93       	lac	Z, r16
    17ac:	00 e2       	ldi	r16, 0x20	; 32
    17ae:	06 93       	lac	Z, r16
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <udd_ctrl_interrupt_tc_setup+0xda>
    17b2:	c0 e0       	ldi	r28, 0x00	; 0
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <udd_ctrl_interrupt_tc_setup+0xda>
    17b6:	c1 e0       	ldi	r28, 0x01	; 1
    17b8:	8c 2f       	mov	r24, r28
    17ba:	cf 91       	pop	r28
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <udd_ep_trans_complet>:
    17c0:	8f 92       	push	r8
    17c2:	9f 92       	push	r9
    17c4:	af 92       	push	r10
    17c6:	bf 92       	push	r11
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	d8 2e       	mov	r13, r24
    17d8:	67 df       	rcall	.-306    	; 0x16a8 <udd_ep_get_job>
    17da:	8c 01       	movw	r16, r24
    17dc:	bd 2c       	mov	r11, r13
    17de:	bb 1c       	adc	r11, r11
    17e0:	bb 24       	eor	r11, r11
    17e2:	bb 1c       	adc	r11, r11
    17e4:	cd 2d       	mov	r28, r13
    17e6:	cf 70       	andi	r28, 0x0F	; 15
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
    17ea:	cc 0f       	add	r28, r28
    17ec:	dd 1f       	adc	r29, r29
    17ee:	cb 0d       	add	r28, r11
    17f0:	d1 1d       	adc	r29, r1
    17f2:	ce 01       	movw	r24, r28
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	9c 01       	movw	r18, r24
    1802:	24 51       	subi	r18, 0x14	; 20
    1804:	3d 4d       	sbci	r19, 0xDD	; 221
    1806:	79 01       	movw	r14, r18
    1808:	c9 01       	movw	r24, r18
    180a:	27 df       	rcall	.-434    	; 0x165a <udd_ep_get_size>
    180c:	4c 01       	movw	r8, r24
    180e:	bb 20       	and	r11, r11
    1810:	09 f4       	brne	.+2      	; 0x1814 <udd_ep_trans_complet+0x54>
    1812:	79 c0       	rjmp	.+242    	; 0x1906 <udd_ep_trans_complet+0x146>
    1814:	fe 01       	movw	r30, r28
    1816:	ee 0f       	add	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	e0 52       	subi	r30, 0x20	; 32
    1824:	fd 4d       	sbci	r31, 0xDD	; 221
    1826:	22 89       	ldd	r18, Z+18	; 0x12
    1828:	33 89       	ldd	r19, Z+19	; 0x13
    182a:	d8 01       	movw	r26, r16
    182c:	15 96       	adiw	r26, 0x05	; 5
    182e:	8d 91       	ld	r24, X+
    1830:	9c 91       	ld	r25, X
    1832:	16 97       	sbiw	r26, 0x06	; 6
    1834:	82 0f       	add	r24, r18
    1836:	93 1f       	adc	r25, r19
    1838:	15 96       	adiw	r26, 0x05	; 5
    183a:	8d 93       	st	X+, r24
    183c:	9c 93       	st	X, r25
    183e:	16 97       	sbiw	r26, 0x06	; 6
    1840:	13 96       	adiw	r26, 0x03	; 3
    1842:	2d 91       	ld	r18, X+
    1844:	3c 91       	ld	r19, X
    1846:	14 97       	sbiw	r26, 0x04	; 4
    1848:	82 17       	cp	r24, r18
    184a:	93 07       	cpc	r25, r19
    184c:	09 f4       	brne	.+2      	; 0x1850 <udd_ep_trans_complet+0x90>
    184e:	45 c0       	rjmp	.+138    	; 0x18da <udd_ep_trans_complet+0x11a>
    1850:	28 1b       	sub	r18, r24
    1852:	39 0b       	sbc	r19, r25
    1854:	21 15       	cp	r18, r1
    1856:	b4 e0       	ldi	r27, 0x04	; 4
    1858:	3b 07       	cpc	r19, r27
    185a:	38 f0       	brcs	.+14     	; 0x186a <udd_ep_trans_complet+0xaa>
    185c:	2f ef       	ldi	r18, 0xFF	; 255
    185e:	33 e0       	ldi	r19, 0x03	; 3
    1860:	c9 01       	movw	r24, r18
    1862:	b4 01       	movw	r22, r8
    1864:	19 d7       	rcall	.+3634   	; 0x2698 <__udivmodhi4>
    1866:	28 1b       	sub	r18, r24
    1868:	39 0b       	sbc	r19, r25
    186a:	f8 01       	movw	r30, r16
    186c:	80 81       	ld	r24, Z
    186e:	81 ff       	sbrs	r24, 1
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <udd_ep_trans_complet+0xc4>
    1872:	c9 01       	movw	r24, r18
    1874:	b4 01       	movw	r22, r8
    1876:	10 d7       	rcall	.+3616   	; 0x2698 <__udivmodhi4>
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	89 2b       	or	r24, r25
    187c:	09 f0       	breq	.+2      	; 0x1880 <udd_ep_trans_complet+0xc0>
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	84 2f       	mov	r24, r20
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <udd_ep_trans_complet+0xc6>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	d8 01       	movw	r26, r16
    1888:	9c 91       	ld	r25, X
    188a:	80 fb       	bst	r24, 0
    188c:	91 f9       	bld	r25, 1
    188e:	9c 93       	st	X, r25
    1890:	fe 01       	movw	r30, r28
    1892:	ee 0f       	add	r30, r30
    1894:	ff 1f       	adc	r31, r31
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	e0 52       	subi	r30, 0x20	; 32
    18a0:	fd 4d       	sbci	r31, 0xDD	; 221
    18a2:	12 8a       	std	Z+18, r1	; 0x12
    18a4:	13 8a       	std	Z+19, r1	; 0x13
    18a6:	26 87       	std	Z+14, r18	; 0x0e
    18a8:	37 87       	std	Z+15, r19	; 0x0f
    18aa:	11 96       	adiw	r26, 0x01	; 1
    18ac:	2d 91       	ld	r18, X+
    18ae:	3c 91       	ld	r19, X
    18b0:	12 97       	sbiw	r26, 0x02	; 2
    18b2:	15 96       	adiw	r26, 0x05	; 5
    18b4:	8d 91       	ld	r24, X+
    18b6:	9c 91       	ld	r25, X
    18b8:	16 97       	sbiw	r26, 0x06	; 6
    18ba:	82 0f       	add	r24, r18
    18bc:	93 1f       	adc	r25, r19
    18be:	cc 0f       	add	r28, r28
    18c0:	dd 1f       	adc	r29, r29
    18c2:	cc 0f       	add	r28, r28
    18c4:	dd 1f       	adc	r29, r29
    18c6:	cc 0f       	add	r28, r28
    18c8:	dd 1f       	adc	r29, r29
    18ca:	c0 51       	subi	r28, 0x10	; 16
    18cc:	dd 4d       	sbci	r29, 0xDD	; 221
    18ce:	88 83       	st	Y, r24
    18d0:	99 83       	std	Y+1, r25	; 0x01
    18d2:	f7 01       	movw	r30, r14
    18d4:	02 e0       	ldi	r16, 0x02	; 2
    18d6:	06 93       	lac	Z, r16
    18d8:	e4 c0       	rjmp	.+456    	; 0x1aa2 <udd_ep_trans_complet+0x2e2>
    18da:	d8 01       	movw	r26, r16
    18dc:	8c 91       	ld	r24, X
    18de:	81 ff       	sbrs	r24, 1
    18e0:	cd c0       	rjmp	.+410    	; 0x1a7c <udd_ep_trans_complet+0x2bc>
    18e2:	8d 7f       	andi	r24, 0xFD	; 253
    18e4:	8c 93       	st	X, r24
    18e6:	cc 0f       	add	r28, r28
    18e8:	dd 1f       	adc	r29, r29
    18ea:	cc 0f       	add	r28, r28
    18ec:	dd 1f       	adc	r29, r29
    18ee:	cc 0f       	add	r28, r28
    18f0:	dd 1f       	adc	r29, r29
    18f2:	c0 52       	subi	r28, 0x20	; 32
    18f4:	dd 4d       	sbci	r29, 0xDD	; 221
    18f6:	1a 8a       	std	Y+18, r1	; 0x12
    18f8:	1b 8a       	std	Y+19, r1	; 0x13
    18fa:	1e 86       	std	Y+14, r1	; 0x0e
    18fc:	1f 86       	std	Y+15, r1	; 0x0f
    18fe:	f7 01       	movw	r30, r14
    1900:	02 e0       	ldi	r16, 0x02	; 2
    1902:	06 93       	lac	Z, r16
    1904:	ce c0       	rjmp	.+412    	; 0x1aa2 <udd_ep_trans_complet+0x2e2>
    1906:	fe 01       	movw	r30, r28
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	ee 0f       	add	r30, r30
    190e:	ff 1f       	adc	r31, r31
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	e0 52       	subi	r30, 0x20	; 32
    1916:	fd 4d       	sbci	r31, 0xDD	; 221
    1918:	a6 84       	ldd	r10, Z+14	; 0x0e
    191a:	b7 84       	ldd	r11, Z+15	; 0x0f
    191c:	d8 01       	movw	r26, r16
    191e:	8c 91       	ld	r24, X
    1920:	82 ff       	sbrs	r24, 2
    1922:	19 c0       	rjmp	.+50     	; 0x1956 <udd_ep_trans_complet+0x196>
    1924:	11 96       	adiw	r26, 0x01	; 1
    1926:	ed 91       	ld	r30, X+
    1928:	fc 91       	ld	r31, X
    192a:	12 97       	sbiw	r26, 0x02	; 2
    192c:	15 96       	adiw	r26, 0x05	; 5
    192e:	2d 91       	ld	r18, X+
    1930:	3c 91       	ld	r19, X
    1932:	16 97       	sbiw	r26, 0x06	; 6
    1934:	13 96       	adiw	r26, 0x03	; 3
    1936:	8d 91       	ld	r24, X+
    1938:	9c 91       	ld	r25, X
    193a:	14 97       	sbiw	r26, 0x04	; 4
    193c:	b4 01       	movw	r22, r8
    193e:	ac d6       	rcall	.+3416   	; 0x2698 <__udivmodhi4>
    1940:	b0 e4       	ldi	r27, 0x40	; 64
    1942:	db 9e       	mul	r13, r27
    1944:	b0 01       	movw	r22, r0
    1946:	11 24       	eor	r1, r1
    1948:	69 54       	subi	r22, 0x49	; 73
    194a:	7e 4d       	sbci	r23, 0xDE	; 222
    194c:	ac 01       	movw	r20, r24
    194e:	cf 01       	movw	r24, r30
    1950:	82 0f       	add	r24, r18
    1952:	93 1f       	adc	r25, r19
    1954:	dd d6       	rcall	.+3514   	; 0x2710 <memcpy>
    1956:	f8 01       	movw	r30, r16
    1958:	25 81       	ldd	r18, Z+5	; 0x05
    195a:	36 81       	ldd	r19, Z+6	; 0x06
    195c:	2a 0d       	add	r18, r10
    195e:	3b 1d       	adc	r19, r11
    1960:	25 83       	std	Z+5, r18	; 0x05
    1962:	36 83       	std	Z+6, r19	; 0x06
    1964:	83 81       	ldd	r24, Z+3	; 0x03
    1966:	94 81       	ldd	r25, Z+4	; 0x04
    1968:	82 17       	cp	r24, r18
    196a:	93 07       	cpc	r25, r19
    196c:	68 f4       	brcc	.+26     	; 0x1988 <udd_ep_trans_complet+0x1c8>
    196e:	85 83       	std	Z+5, r24	; 0x05
    1970:	96 83       	std	Z+6, r25	; 0x06
    1972:	cc 0f       	add	r28, r28
    1974:	dd 1f       	adc	r29, r29
    1976:	cc 0f       	add	r28, r28
    1978:	dd 1f       	adc	r29, r29
    197a:	cc 0f       	add	r28, r28
    197c:	dd 1f       	adc	r29, r29
    197e:	c0 52       	subi	r28, 0x20	; 32
    1980:	dd 4d       	sbci	r29, 0xDD	; 221
    1982:	8a 89       	ldd	r24, Y+18	; 0x12
    1984:	9b 89       	ldd	r25, Y+19	; 0x13
    1986:	7a c0       	rjmp	.+244    	; 0x1a7c <udd_ep_trans_complet+0x2bc>
    1988:	fe 01       	movw	r30, r28
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	ee 0f       	add	r30, r30
    1994:	ff 1f       	adc	r31, r31
    1996:	e0 52       	subi	r30, 0x20	; 32
    1998:	fd 4d       	sbci	r31, 0xDD	; 221
    199a:	42 89       	ldd	r20, Z+18	; 0x12
    199c:	53 89       	ldd	r21, Z+19	; 0x13
    199e:	4a 15       	cp	r20, r10
    19a0:	5b 05       	cpc	r21, r11
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <udd_ep_trans_complet+0x1e6>
    19a4:	6b c0       	rjmp	.+214    	; 0x1a7c <udd_ep_trans_complet+0x2bc>
    19a6:	28 17       	cp	r18, r24
    19a8:	39 07       	cpc	r19, r25
    19aa:	09 f4       	brne	.+2      	; 0x19ae <udd_ep_trans_complet+0x1ee>
    19ac:	67 c0       	rjmp	.+206    	; 0x1a7c <udd_ep_trans_complet+0x2bc>
    19ae:	ac 01       	movw	r20, r24
    19b0:	42 1b       	sub	r20, r18
    19b2:	53 0b       	sbc	r21, r19
    19b4:	9a 01       	movw	r18, r20
    19b6:	21 15       	cp	r18, r1
    19b8:	54 e0       	ldi	r21, 0x04	; 4
    19ba:	35 07       	cpc	r19, r21
    19bc:	50 f0       	brcs	.+20     	; 0x19d2 <udd_ep_trans_complet+0x212>
    19be:	2f ef       	ldi	r18, 0xFF	; 255
    19c0:	33 e0       	ldi	r19, 0x03	; 3
    19c2:	c9 01       	movw	r24, r18
    19c4:	b4 01       	movw	r22, r8
    19c6:	68 d6       	rcall	.+3280   	; 0x2698 <__udivmodhi4>
    19c8:	d9 01       	movw	r26, r18
    19ca:	a8 1b       	sub	r26, r24
    19cc:	b9 0b       	sbc	r27, r25
    19ce:	cd 01       	movw	r24, r26
    19d0:	07 c0       	rjmp	.+14     	; 0x19e0 <udd_ep_trans_complet+0x220>
    19d2:	c9 01       	movw	r24, r18
    19d4:	b4 01       	movw	r22, r8
    19d6:	60 d6       	rcall	.+3264   	; 0x2698 <__udivmodhi4>
    19d8:	f9 01       	movw	r30, r18
    19da:	e8 1b       	sub	r30, r24
    19dc:	f9 0b       	sbc	r31, r25
    19de:	cf 01       	movw	r24, r30
    19e0:	fe 01       	movw	r30, r28
    19e2:	ee 0f       	add	r30, r30
    19e4:	ff 1f       	adc	r31, r31
    19e6:	ee 0f       	add	r30, r30
    19e8:	ff 1f       	adc	r31, r31
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	e0 52       	subi	r30, 0x20	; 32
    19f0:	fd 4d       	sbci	r31, 0xDD	; 221
    19f2:	16 86       	std	Z+14, r1	; 0x0e
    19f4:	17 86       	std	Z+15, r1	; 0x0f
    19f6:	88 15       	cp	r24, r8
    19f8:	99 05       	cpc	r25, r9
    19fa:	00 f5       	brcc	.+64     	; 0x1a3c <udd_ep_trans_complet+0x27c>
    19fc:	d8 01       	movw	r26, r16
    19fe:	8c 91       	ld	r24, X
    1a00:	84 60       	ori	r24, 0x04	; 4
    1a02:	8c 93       	st	X, r24
    1a04:	b0 e4       	ldi	r27, 0x40	; 64
    1a06:	db 9e       	mul	r13, r27
    1a08:	c0 01       	movw	r24, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	89 54       	subi	r24, 0x49	; 73
    1a0e:	9e 4d       	sbci	r25, 0xDE	; 222
    1a10:	fe 01       	movw	r30, r28
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	e0 51       	subi	r30, 0x10	; 16
    1a20:	fd 4d       	sbci	r31, 0xDD	; 221
    1a22:	80 83       	st	Z, r24
    1a24:	91 83       	std	Z+1, r25	; 0x01
    1a26:	cc 0f       	add	r28, r28
    1a28:	dd 1f       	adc	r29, r29
    1a2a:	cc 0f       	add	r28, r28
    1a2c:	dd 1f       	adc	r29, r29
    1a2e:	cc 0f       	add	r28, r28
    1a30:	dd 1f       	adc	r29, r29
    1a32:	c0 52       	subi	r28, 0x20	; 32
    1a34:	dd 4d       	sbci	r29, 0xDD	; 221
    1a36:	8a 8a       	std	Y+18, r8	; 0x12
    1a38:	9b 8a       	std	Y+19, r9	; 0x13
    1a3a:	1c c0       	rjmp	.+56     	; 0x1a74 <udd_ep_trans_complet+0x2b4>
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	41 81       	ldd	r20, Z+1	; 0x01
    1a40:	52 81       	ldd	r21, Z+2	; 0x02
    1a42:	25 81       	ldd	r18, Z+5	; 0x05
    1a44:	36 81       	ldd	r19, Z+6	; 0x06
    1a46:	24 0f       	add	r18, r20
    1a48:	35 1f       	adc	r19, r21
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	ee 0f       	add	r30, r30
    1a4e:	ff 1f       	adc	r31, r31
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	e0 51       	subi	r30, 0x10	; 16
    1a5a:	fd 4d       	sbci	r31, 0xDD	; 221
    1a5c:	20 83       	st	Z, r18
    1a5e:	31 83       	std	Z+1, r19	; 0x01
    1a60:	cc 0f       	add	r28, r28
    1a62:	dd 1f       	adc	r29, r29
    1a64:	cc 0f       	add	r28, r28
    1a66:	dd 1f       	adc	r29, r29
    1a68:	cc 0f       	add	r28, r28
    1a6a:	dd 1f       	adc	r29, r29
    1a6c:	c0 52       	subi	r28, 0x20	; 32
    1a6e:	dd 4d       	sbci	r29, 0xDD	; 221
    1a70:	8a 8b       	std	Y+18, r24	; 0x12
    1a72:	9b 8b       	std	Y+19, r25	; 0x13
    1a74:	f7 01       	movw	r30, r14
    1a76:	02 e0       	ldi	r16, 0x02	; 2
    1a78:	06 93       	lac	Z, r16
    1a7a:	13 c0       	rjmp	.+38     	; 0x1aa2 <udd_ep_trans_complet+0x2e2>
    1a7c:	d8 01       	movw	r26, r16
    1a7e:	8c 91       	ld	r24, X
    1a80:	80 ff       	sbrs	r24, 0
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <udd_ep_trans_complet+0x2e2>
    1a84:	8e 7f       	andi	r24, 0xFE	; 254
    1a86:	8c 93       	st	X, r24
    1a88:	17 96       	adiw	r26, 0x07	; 7
    1a8a:	ed 91       	ld	r30, X+
    1a8c:	fc 91       	ld	r31, X
    1a8e:	18 97       	sbiw	r26, 0x08	; 8
    1a90:	30 97       	sbiw	r30, 0x00	; 0
    1a92:	39 f0       	breq	.+14     	; 0x1aa2 <udd_ep_trans_complet+0x2e2>
    1a94:	15 96       	adiw	r26, 0x05	; 5
    1a96:	6d 91       	ld	r22, X+
    1a98:	7c 91       	ld	r23, X
    1a9a:	16 97       	sbiw	r26, 0x06	; 6
    1a9c:	4d 2d       	mov	r20, r13
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	09 95       	icall
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	bf 90       	pop	r11
    1ab2:	af 90       	pop	r10
    1ab4:	9f 90       	pop	r9
    1ab6:	8f 90       	pop	r8
    1ab8:	08 95       	ret

00001aba <udd_attach>:
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	8f b7       	in	r24, 0x3f	; 63
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	f8 94       	cli
    1acc:	19 81       	ldd	r17, Y+1	; 0x01
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	d8 dc       	rcall	.-1616   	; 0x1482 <udd_sleep_mode>
    1ad2:	ea ec       	ldi	r30, 0xCA	; 202
    1ad4:	f4 e0       	ldi	r31, 0x04	; 4
    1ad6:	80 e4       	ldi	r24, 0x40	; 64
    1ad8:	80 83       	st	Z, r24
    1ada:	80 e2       	ldi	r24, 0x20	; 32
    1adc:	80 83       	st	Z, r24
    1ade:	e1 ec       	ldi	r30, 0xC1	; 193
    1ae0:	f4 e0       	ldi	r31, 0x04	; 4
    1ae2:	80 81       	ld	r24, Z
    1ae4:	81 60       	ori	r24, 0x01	; 1
    1ae6:	80 83       	st	Z, r24
    1ae8:	a9 ec       	ldi	r26, 0xC9	; 201
    1aea:	b4 e0       	ldi	r27, 0x04	; 4
    1aec:	8c 91       	ld	r24, X
    1aee:	82 60       	ori	r24, 0x02	; 2
    1af0:	8c 93       	st	X, r24
    1af2:	e8 ec       	ldi	r30, 0xC8	; 200
    1af4:	f4 e0       	ldi	r31, 0x04	; 4
    1af6:	80 81       	ld	r24, Z
    1af8:	80 64       	ori	r24, 0x40	; 64
    1afa:	80 83       	st	Z, r24
    1afc:	8c 91       	ld	r24, X
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	8c 93       	st	X, r24
    1b02:	80 81       	ld	r24, Z
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	80 83       	st	Z, r24
    1b08:	1f bf       	out	0x3f, r17	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	08 95       	ret

00001b14 <udd_enable>:
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <udd_enable+0xa>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	00 e6       	ldi	r16, 0x60	; 96
    1b24:	10 e0       	ldi	r17, 0x00	; 0
    1b26:	f8 01       	movw	r30, r16
    1b28:	10 82       	st	Z, r1
    1b2a:	80 e3       	ldi	r24, 0x30	; 48
    1b2c:	0e 94 25 02 	call	0x44a	; 0x44a <sysclk_enable_usb>
    1b30:	e0 ec       	ldi	r30, 0xC0	; 192
    1b32:	f4 e0       	ldi	r31, 0x04	; 4
    1b34:	80 81       	ld	r24, Z
    1b36:	80 64       	ori	r24, 0x40	; 64
    1b38:	80 83       	st	Z, r24
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	80 83       	st	Z, r24
    1b40:	8f b7       	in	r24, 0x3f	; 63
    1b42:	8a 83       	std	Y+2, r24	; 0x02
    1b44:	f8 94       	cli
    1b46:	1a 81       	ldd	r17, Y+2	; 0x02
    1b48:	e0 ee       	ldi	r30, 0xE0	; 224
    1b4a:	f2 e2       	ldi	r31, 0x22	; 34
    1b4c:	15 86       	std	Z+13, r1	; 0x0d
    1b4e:	15 8a       	std	Z+21, r1	; 0x15
    1b50:	15 8e       	std	Z+29, r1	; 0x1d
    1b52:	15 a2       	std	Z+37, r1	; 0x25
    1b54:	15 a6       	std	Z+45, r1	; 0x2d
    1b56:	15 aa       	std	Z+53, r1	; 0x35
    1b58:	e7 e7       	ldi	r30, 0x77	; 119
    1b5a:	f2 e2       	ldi	r31, 0x22	; 34
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8e 7f       	andi	r24, 0xFE	; 254
    1b60:	80 83       	st	Z, r24
    1b62:	e0 e8       	ldi	r30, 0x80	; 128
    1b64:	f2 e2       	ldi	r31, 0x22	; 34
    1b66:	80 81       	ld	r24, Z
    1b68:	8e 7f       	andi	r24, 0xFE	; 254
    1b6a:	80 83       	st	Z, r24
    1b6c:	e9 e8       	ldi	r30, 0x89	; 137
    1b6e:	f2 e2       	ldi	r31, 0x22	; 34
    1b70:	80 81       	ld	r24, Z
    1b72:	8e 7f       	andi	r24, 0xFE	; 254
    1b74:	80 83       	st	Z, r24
    1b76:	e2 e9       	ldi	r30, 0x92	; 146
    1b78:	f2 e2       	ldi	r31, 0x22	; 34
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8e 7f       	andi	r24, 0xFE	; 254
    1b7e:	80 83       	st	Z, r24
    1b80:	6a e1       	ldi	r22, 0x1A	; 26
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	73 dc       	rcall	.-1818   	; 0x146e <nvm_read_byte>
    1b88:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <udd_enable+0x7e>
    1b8c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <udd_enable+0x84>
    1b92:	8f e1       	ldi	r24, 0x1F	; 31
    1b94:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    1b98:	6b e1       	ldi	r22, 0x1B	; 27
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	67 dc       	rcall	.-1842   	; 0x146e <nvm_read_byte>
    1ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ba2:	19 f0       	breq	.+6      	; 0x1baa <udd_enable+0x96>
    1ba4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <udd_enable+0x9c>
    1baa:	8f e1       	ldi	r24, 0x1F	; 31
    1bac:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    1bb0:	e0 ec       	ldi	r30, 0xC0	; 192
    1bb2:	f4 e0       	ldi	r31, 0x04	; 4
    1bb4:	80 81       	ld	r24, Z
    1bb6:	82 60       	ori	r24, 0x02	; 2
    1bb8:	80 83       	st	Z, r24
    1bba:	80 81       	ld	r24, Z
    1bbc:	80 68       	ori	r24, 0x80	; 128
    1bbe:	80 83       	st	Z, r24
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 61       	ori	r24, 0x10	; 16
    1bc4:	80 83       	st	Z, r24
    1bc6:	8c ee       	ldi	r24, 0xEC	; 236
    1bc8:	92 e2       	ldi	r25, 0x22	; 34
    1bca:	86 83       	std	Z+6, r24	; 0x06
    1bcc:	97 83       	std	Z+7, r25	; 0x07
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 62       	ori	r24, 0x20	; 32
    1bd2:	80 83       	st	Z, r24
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    1bda:	e8 ec       	ldi	r30, 0xC8	; 200
    1bdc:	f4 e0       	ldi	r31, 0x04	; 4
    1bde:	80 81       	ld	r24, Z
    1be0:	81 60       	ori	r24, 0x01	; 1
    1be2:	80 83       	st	Z, r24
    1be4:	10 92 20 23 	sts	0x2320, r1	; 0x802320 <udd_b_idle>
    1be8:	80 91 27 23 	lds	r24, 0x2327	; 0x802327 <sleepmgr_locks+0x5>
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <udd_enable+0xde>
    1bf0:	ff cf       	rjmp	.-2      	; 0x1bf0 <udd_enable+0xdc>
    1bf2:	8f b7       	in	r24, 0x3f	; 63
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	f8 94       	cli
    1bf8:	99 81       	ldd	r25, Y+1	; 0x01
    1bfa:	e2 e2       	ldi	r30, 0x22	; 34
    1bfc:	f3 e2       	ldi	r31, 0x23	; 35
    1bfe:	85 81       	ldd	r24, Z+5	; 0x05
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	85 83       	std	Z+5, r24	; 0x05
    1c04:	9f bf       	out	0x3f, r25	; 63
    1c06:	59 df       	rcall	.-334    	; 0x1aba <udd_attach>
    1c08:	1f bf       	out	0x3f, r17	; 63
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <udd_is_high_speed>:
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	08 95       	ret

00001c1c <udd_set_address>:
    1c1c:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1c20:	08 95       	ret

00001c22 <udd_getaddress>:
    1c22:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    1c26:	08 95       	ret

00001c28 <udd_get_frame_number>:
    1c28:	80 91 1c 23 	lds	r24, 0x231C	; 0x80231c <udd_sram+0x3c>
    1c2c:	90 91 1d 23 	lds	r25, 0x231D	; 0x80231d <udd_sram+0x3d>
    1c30:	08 95       	ret

00001c32 <udd_get_micro_frame_number>:
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	08 95       	ret

00001c38 <udd_set_setup_payload>:
    1c38:	e8 e2       	ldi	r30, 0x28	; 40
    1c3a:	f3 e2       	ldi	r31, 0x23	; 35
    1c3c:	80 87       	std	Z+8, r24	; 0x08
    1c3e:	91 87       	std	Z+9, r25	; 0x09
    1c40:	62 87       	std	Z+10, r22	; 0x0a
    1c42:	73 87       	std	Z+11, r23	; 0x0b
    1c44:	08 95       	ret

00001c46 <udd_ep_alloc>:
    1c46:	28 2f       	mov	r18, r24
    1c48:	2f 70       	andi	r18, 0x0F	; 15
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	22 0f       	add	r18, r18
    1c4e:	33 1f       	adc	r19, r19
    1c50:	08 2e       	mov	r0, r24
    1c52:	00 0c       	add	r0, r0
    1c54:	99 0b       	sbc	r25, r25
    1c56:	88 27       	eor	r24, r24
    1c58:	99 0f       	add	r25, r25
    1c5a:	88 1f       	adc	r24, r24
    1c5c:	99 27       	eor	r25, r25
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	fc 01       	movw	r30, r24
    1c64:	ee 0f       	add	r30, r30
    1c66:	ff 1f       	adc	r31, r31
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	ee 0f       	add	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	e0 52       	subi	r30, 0x20	; 32
    1c72:	fd 4d       	sbci	r31, 0xDD	; 221
    1c74:	25 85       	ldd	r18, Z+13	; 0x0d
    1c76:	20 7c       	andi	r18, 0xC0	; 192
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <udd_ep_alloc+0x36>
    1c7a:	69 c0       	rjmp	.+210    	; 0x1d4e <udd_ep_alloc+0x108>
    1c7c:	63 70       	andi	r22, 0x03	; 3
    1c7e:	61 30       	cpi	r22, 0x01	; 1
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <udd_ep_alloc+0x40>
    1c82:	18 f4       	brcc	.+6      	; 0x1c8a <udd_ep_alloc+0x44>
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <udd_ep_alloc+0x48>
    1c86:	20 ec       	ldi	r18, 0xC0	; 192
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <udd_ep_alloc+0x4a>
    1c8a:	20 e8       	ldi	r18, 0x80	; 128
    1c8c:	01 c0       	rjmp	.+2      	; 0x1c90 <udd_ep_alloc+0x4a>
    1c8e:	20 e4       	ldi	r18, 0x40	; 64
    1c90:	40 38       	cpi	r20, 0x80	; 128
    1c92:	51 05       	cpc	r21, r1
    1c94:	e9 f0       	breq	.+58     	; 0x1cd0 <udd_ep_alloc+0x8a>
    1c96:	50 f4       	brcc	.+20     	; 0x1cac <udd_ep_alloc+0x66>
    1c98:	40 32       	cpi	r20, 0x20	; 32
    1c9a:	51 05       	cpc	r21, r1
    1c9c:	a9 f0       	breq	.+42     	; 0x1cc8 <udd_ep_alloc+0x82>
    1c9e:	40 34       	cpi	r20, 0x40	; 64
    1ca0:	51 05       	cpc	r21, r1
    1ca2:	a1 f0       	breq	.+40     	; 0x1ccc <udd_ep_alloc+0x86>
    1ca4:	40 31       	cpi	r20, 0x10	; 16
    1ca6:	51 05       	cpc	r21, r1
    1ca8:	d9 f4       	brne	.+54     	; 0x1ce0 <udd_ep_alloc+0x9a>
    1caa:	0c c0       	rjmp	.+24     	; 0x1cc4 <udd_ep_alloc+0x7e>
    1cac:	41 15       	cp	r20, r1
    1cae:	32 e0       	ldi	r19, 0x02	; 2
    1cb0:	53 07       	cpc	r21, r19
    1cb2:	91 f0       	breq	.+36     	; 0x1cd8 <udd_ep_alloc+0x92>
    1cb4:	4f 3f       	cpi	r20, 0xFF	; 255
    1cb6:	33 e0       	ldi	r19, 0x03	; 3
    1cb8:	53 07       	cpc	r21, r19
    1cba:	81 f0       	breq	.+32     	; 0x1cdc <udd_ep_alloc+0x96>
    1cbc:	41 15       	cp	r20, r1
    1cbe:	51 40       	sbci	r21, 0x01	; 1
    1cc0:	79 f4       	brne	.+30     	; 0x1ce0 <udd_ep_alloc+0x9a>
    1cc2:	08 c0       	rjmp	.+16     	; 0x1cd4 <udd_ep_alloc+0x8e>
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0d c0       	rjmp	.+26     	; 0x1ce2 <udd_ep_alloc+0x9c>
    1cc8:	42 e0       	ldi	r20, 0x02	; 2
    1cca:	0b c0       	rjmp	.+22     	; 0x1ce2 <udd_ep_alloc+0x9c>
    1ccc:	43 e0       	ldi	r20, 0x03	; 3
    1cce:	09 c0       	rjmp	.+18     	; 0x1ce2 <udd_ep_alloc+0x9c>
    1cd0:	44 e0       	ldi	r20, 0x04	; 4
    1cd2:	07 c0       	rjmp	.+14     	; 0x1ce2 <udd_ep_alloc+0x9c>
    1cd4:	45 e0       	ldi	r20, 0x05	; 5
    1cd6:	05 c0       	rjmp	.+10     	; 0x1ce2 <udd_ep_alloc+0x9c>
    1cd8:	46 e0       	ldi	r20, 0x06	; 6
    1cda:	03 c0       	rjmp	.+6      	; 0x1ce2 <udd_ep_alloc+0x9c>
    1cdc:	47 e0       	ldi	r20, 0x07	; 7
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <udd_ep_alloc+0x9c>
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	ee 0f       	add	r30, r30
    1ce6:	ff 1f       	adc	r31, r31
    1ce8:	ee 0f       	add	r30, r30
    1cea:	ff 1f       	adc	r31, r31
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	e0 52       	subi	r30, 0x20	; 32
    1cf2:	fd 4d       	sbci	r31, 0xDD	; 221
    1cf4:	15 86       	std	Z+13, r1	; 0x0d
    1cf6:	36 e0       	ldi	r19, 0x06	; 6
    1cf8:	34 87       	std	Z+12, r19	; 0x0c
    1cfa:	24 2b       	or	r18, r20
    1cfc:	25 87       	std	Z+13, r18	; 0x0d
    1cfe:	fc 01       	movw	r30, r24
    1d00:	ee 0f       	add	r30, r30
    1d02:	ff 1f       	adc	r31, r31
    1d04:	ee 0f       	add	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	ee 0f       	add	r30, r30
    1d0a:	ff 1f       	adc	r31, r31
    1d0c:	e0 52       	subi	r30, 0x20	; 32
    1d0e:	fd 4d       	sbci	r31, 0xDD	; 221
    1d10:	25 85       	ldd	r18, Z+13	; 0x0d
    1d12:	20 7c       	andi	r18, 0xC0	; 192
    1d14:	20 3c       	cpi	r18, 0xC0	; 192
    1d16:	69 f4       	brne	.+26     	; 0x1d32 <udd_ep_alloc+0xec>
    1d18:	fc 01       	movw	r30, r24
    1d1a:	ee 0f       	add	r30, r30
    1d1c:	ff 1f       	adc	r31, r31
    1d1e:	ee 0f       	add	r30, r30
    1d20:	ff 1f       	adc	r31, r31
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	e0 52       	subi	r30, 0x20	; 32
    1d28:	fd 4d       	sbci	r31, 0xDD	; 221
    1d2a:	25 85       	ldd	r18, Z+13	; 0x0d
    1d2c:	27 70       	andi	r18, 0x07	; 7
    1d2e:	27 30       	cpi	r18, 0x07	; 7
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <udd_ep_alloc+0x10c>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e0 52       	subi	r30, 0x20	; 32
    1d42:	fd 4d       	sbci	r31, 0xDD	; 221
    1d44:	85 85       	ldd	r24, Z+13	; 0x0d
    1d46:	80 62       	ori	r24, 0x20	; 32
    1d48:	85 87       	std	Z+13, r24	; 0x0d
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	08 95       	ret
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	08 95       	ret
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	08 95       	ret

00001d56 <udd_ep_is_halted>:
    1d56:	e8 2f       	mov	r30, r24
    1d58:	ef 70       	andi	r30, 0x0F	; 15
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	08 2e       	mov	r0, r24
    1d62:	00 0c       	add	r0, r0
    1d64:	99 0b       	sbc	r25, r25
    1d66:	88 27       	eor	r24, r24
    1d68:	99 0f       	add	r25, r25
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	99 27       	eor	r25, r25
    1d6e:	e8 0f       	add	r30, r24
    1d70:	f9 1f       	adc	r31, r25
    1d72:	ee 0f       	add	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	ee 0f       	add	r30, r30
    1d78:	ff 1f       	adc	r31, r31
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	e0 52       	subi	r30, 0x20	; 32
    1d80:	fd 4d       	sbci	r31, 0xDD	; 221
    1d82:	85 85       	ldd	r24, Z+13	; 0x0d
    1d84:	82 fb       	bst	r24, 2
    1d86:	88 27       	eor	r24, r24
    1d88:	80 f9       	bld	r24, 0
    1d8a:	08 95       	ret

00001d8c <udd_ep_clear_halt>:
    1d8c:	0f 93       	push	r16
    1d8e:	28 2f       	mov	r18, r24
    1d90:	2f 70       	andi	r18, 0x0F	; 15
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	a9 01       	movw	r20, r18
    1d96:	44 0f       	add	r20, r20
    1d98:	55 1f       	adc	r21, r21
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	08 2e       	mov	r0, r24
    1d9e:	00 0c       	add	r0, r0
    1da0:	33 0b       	sbc	r19, r19
    1da2:	22 27       	eor	r18, r18
    1da4:	33 0f       	add	r19, r19
    1da6:	22 1f       	adc	r18, r18
    1da8:	33 27       	eor	r19, r19
    1daa:	24 0f       	add	r18, r20
    1dac:	35 1f       	adc	r19, r21
    1dae:	a9 01       	movw	r20, r18
    1db0:	44 0f       	add	r20, r20
    1db2:	55 1f       	adc	r21, r21
    1db4:	44 0f       	add	r20, r20
    1db6:	55 1f       	adc	r21, r21
    1db8:	44 0f       	add	r20, r20
    1dba:	55 1f       	adc	r21, r21
    1dbc:	fa 01       	movw	r30, r20
    1dbe:	e4 51       	subi	r30, 0x14	; 20
    1dc0:	fd 4d       	sbci	r31, 0xDD	; 221
    1dc2:	01 e0       	ldi	r16, 0x01	; 1
    1dc4:	06 93       	lac	Z, r16
    1dc6:	fa 01       	movw	r30, r20
    1dc8:	e0 52       	subi	r30, 0x20	; 32
    1dca:	fd 4d       	sbci	r31, 0xDD	; 221
    1dcc:	95 85       	ldd	r25, Z+13	; 0x0d
    1dce:	92 ff       	sbrs	r25, 2
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <udd_ep_clear_halt+0x68>
    1dd2:	fa 01       	movw	r30, r20
    1dd4:	e0 52       	subi	r30, 0x20	; 32
    1dd6:	fd 4d       	sbci	r31, 0xDD	; 221
    1dd8:	95 85       	ldd	r25, Z+13	; 0x0d
    1dda:	9b 7f       	andi	r25, 0xFB	; 251
    1ddc:	95 87       	std	Z+13, r25	; 0x0d
    1dde:	64 dc       	rcall	.-1848   	; 0x16a8 <udd_ep_get_job>
    1de0:	fc 01       	movw	r30, r24
    1de2:	80 81       	ld	r24, Z
    1de4:	80 ff       	sbrs	r24, 0
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <udd_ep_clear_halt+0x68>
    1de8:	8e 7f       	andi	r24, 0xFE	; 254
    1dea:	80 83       	st	Z, r24
    1dec:	07 80       	ldd	r0, Z+7	; 0x07
    1dee:	f0 85       	ldd	r31, Z+8	; 0x08
    1df0:	e0 2d       	mov	r30, r0
    1df2:	09 95       	icall
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <udd_ep_run>:
    1dfa:	5f 92       	push	r5
    1dfc:	6f 92       	push	r6
    1dfe:	7f 92       	push	r7
    1e00:	8f 92       	push	r8
    1e02:	9f 92       	push	r9
    1e04:	af 92       	push	r10
    1e06:	bf 92       	push	r11
    1e08:	cf 92       	push	r12
    1e0a:	df 92       	push	r13
    1e0c:	ef 92       	push	r14
    1e0e:	ff 92       	push	r15
    1e10:	0f 93       	push	r16
    1e12:	1f 93       	push	r17
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	1f 92       	push	r1
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	78 2e       	mov	r7, r24
    1e20:	66 2e       	mov	r6, r22
    1e22:	4a 01       	movw	r8, r20
    1e24:	59 01       	movw	r10, r18
    1e26:	40 dc       	rcall	.-1920   	; 0x16a8 <udd_ep_get_job>
    1e28:	6c 01       	movw	r12, r24
    1e2a:	57 2c       	mov	r5, r7
    1e2c:	55 1c       	adc	r5, r5
    1e2e:	55 24       	eor	r5, r5
    1e30:	55 1c       	adc	r5, r5
    1e32:	87 2d       	mov	r24, r7
    1e34:	8f 70       	andi	r24, 0x0F	; 15
    1e36:	e8 2e       	mov	r14, r24
    1e38:	f1 2c       	mov	r15, r1
    1e3a:	ee 0c       	add	r14, r14
    1e3c:	ff 1c       	adc	r15, r15
    1e3e:	e5 0c       	add	r14, r5
    1e40:	f1 1c       	adc	r15, r1
    1e42:	f7 01       	movw	r30, r14
    1e44:	ee 0f       	add	r30, r30
    1e46:	ff 1f       	adc	r31, r31
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	e0 52       	subi	r30, 0x20	; 32
    1e52:	fd 4d       	sbci	r31, 0xDD	; 221
    1e54:	85 85       	ldd	r24, Z+13	; 0x0d
    1e56:	80 7c       	andi	r24, 0xC0	; 192
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <udd_ep_run+0x62>
    1e5a:	81 c0       	rjmp	.+258    	; 0x1f5e <udd_ep_run+0x164>
    1e5c:	f7 01       	movw	r30, r14
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	e0 52       	subi	r30, 0x20	; 32
    1e6c:	fd 4d       	sbci	r31, 0xDD	; 221
    1e6e:	85 85       	ldd	r24, Z+13	; 0x0d
    1e70:	80 7c       	andi	r24, 0xC0	; 192
    1e72:	80 3c       	cpi	r24, 0xC0	; 192
    1e74:	61 f0       	breq	.+24     	; 0x1e8e <udd_ep_run+0x94>
    1e76:	f7 01       	movw	r30, r14
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	e0 52       	subi	r30, 0x20	; 32
    1e86:	fd 4d       	sbci	r31, 0xDD	; 221
    1e88:	85 85       	ldd	r24, Z+13	; 0x0d
    1e8a:	82 fd       	sbrc	r24, 2
    1e8c:	6a c0       	rjmp	.+212    	; 0x1f62 <udd_ep_run+0x168>
    1e8e:	8f b7       	in	r24, 0x3f	; 63
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	f8 94       	cli
    1e94:	89 81       	ldd	r24, Y+1	; 0x01
    1e96:	f6 01       	movw	r30, r12
    1e98:	90 81       	ld	r25, Z
    1e9a:	90 ff       	sbrs	r25, 0
    1e9c:	03 c0       	rjmp	.+6      	; 0x1ea4 <udd_ep_run+0xaa>
    1e9e:	8f bf       	out	0x3f, r24	; 63
    1ea0:	51 2c       	mov	r5, r1
    1ea2:	60 c0       	rjmp	.+192    	; 0x1f64 <udd_ep_run+0x16a>
    1ea4:	f6 01       	movw	r30, r12
    1ea6:	90 81       	ld	r25, Z
    1ea8:	91 60       	ori	r25, 0x01	; 1
    1eaa:	90 83       	st	Z, r25
    1eac:	8f bf       	out	0x3f, r24	; 63
    1eae:	81 82       	std	Z+1, r8	; 0x01
    1eb0:	92 82       	std	Z+2, r9	; 0x02
    1eb2:	a3 82       	std	Z+3, r10	; 0x03
    1eb4:	b4 82       	std	Z+4, r11	; 0x04
    1eb6:	15 82       	std	Z+5, r1	; 0x05
    1eb8:	16 82       	std	Z+6, r1	; 0x06
    1eba:	07 83       	std	Z+7, r16	; 0x07
    1ebc:	10 87       	std	Z+8, r17	; 0x08
    1ebe:	61 10       	cpse	r6, r1
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <udd_ep_run+0xd4>
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	a1 14       	cp	r10, r1
    1ec6:	b1 04       	cpc	r11, r1
    1ec8:	19 f0       	breq	.+6      	; 0x1ed0 <udd_ep_run+0xd6>
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <udd_ep_run+0xd6>
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	f6 01       	movw	r30, r12
    1ed2:	80 81       	ld	r24, Z
    1ed4:	90 fb       	bst	r25, 0
    1ed6:	81 f9       	bld	r24, 1
    1ed8:	8b 7f       	andi	r24, 0xFB	; 251
    1eda:	80 83       	st	Z, r24
    1edc:	55 20       	and	r5, r5
    1ede:	61 f0       	breq	.+24     	; 0x1ef8 <udd_ep_run+0xfe>
    1ee0:	f7 01       	movw	r30, r14
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	e0 52       	subi	r30, 0x20	; 32
    1ef0:	fd 4d       	sbci	r31, 0xDD	; 221
    1ef2:	12 8a       	std	Z+18, r1	; 0x12
    1ef4:	13 8a       	std	Z+19, r1	; 0x13
    1ef6:	2e c0       	rjmp	.+92     	; 0x1f54 <udd_ep_run+0x15a>
    1ef8:	f7 01       	movw	r30, r14
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	ee 0f       	add	r30, r30
    1f00:	ff 1f       	adc	r31, r31
    1f02:	ee 0f       	add	r30, r30
    1f04:	ff 1f       	adc	r31, r31
    1f06:	e0 52       	subi	r30, 0x20	; 32
    1f08:	fd 4d       	sbci	r31, 0xDD	; 221
    1f0a:	85 85       	ldd	r24, Z+13	; 0x0d
    1f0c:	80 7c       	andi	r24, 0xC0	; 192
    1f0e:	80 3c       	cpi	r24, 0xC0	; 192
    1f10:	a1 f4       	brne	.+40     	; 0x1f3a <udd_ep_run+0x140>
    1f12:	c7 01       	movw	r24, r14
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	84 51       	subi	r24, 0x14	; 20
    1f22:	9d 4d       	sbci	r25, 0xDD	; 221
    1f24:	9a db       	rcall	.-2252   	; 0x165a <udd_ep_get_size>
    1f26:	bc 01       	movw	r22, r24
    1f28:	c5 01       	movw	r24, r10
    1f2a:	b6 d3       	rcall	.+1900   	; 0x2698 <__udivmodhi4>
    1f2c:	89 2b       	or	r24, r25
    1f2e:	29 f0       	breq	.+10     	; 0x1f3a <udd_ep_run+0x140>
    1f30:	f6 01       	movw	r30, r12
    1f32:	80 81       	ld	r24, Z
    1f34:	8e 7f       	andi	r24, 0xFE	; 254
    1f36:	80 83       	st	Z, r24
    1f38:	15 c0       	rjmp	.+42     	; 0x1f64 <udd_ep_run+0x16a>
    1f3a:	f7 01       	movw	r30, r14
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	e0 52       	subi	r30, 0x20	; 32
    1f4a:	fd 4d       	sbci	r31, 0xDD	; 221
    1f4c:	16 86       	std	Z+14, r1	; 0x0e
    1f4e:	17 86       	std	Z+15, r1	; 0x0f
    1f50:	12 8a       	std	Z+18, r1	; 0x12
    1f52:	13 8a       	std	Z+19, r1	; 0x13
    1f54:	87 2d       	mov	r24, r7
    1f56:	34 dc       	rcall	.-1944   	; 0x17c0 <udd_ep_trans_complet>
    1f58:	55 24       	eor	r5, r5
    1f5a:	53 94       	inc	r5
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <udd_ep_run+0x16a>
    1f5e:	51 2c       	mov	r5, r1
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <udd_ep_run+0x16a>
    1f62:	51 2c       	mov	r5, r1
    1f64:	85 2d       	mov	r24, r5
    1f66:	0f 90       	pop	r0
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	9f 90       	pop	r9
    1f7e:	8f 90       	pop	r8
    1f80:	7f 90       	pop	r7
    1f82:	6f 90       	pop	r6
    1f84:	5f 90       	pop	r5
    1f86:	08 95       	ret

00001f88 <udd_ep_abort>:
    1f88:	ff 92       	push	r15
    1f8a:	0f 93       	push	r16
    1f8c:	1f 93       	push	r17
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	18 2f       	mov	r17, r24
    1f94:	f8 2e       	mov	r15, r24
    1f96:	ff 1c       	adc	r15, r15
    1f98:	ff 24       	eor	r15, r15
    1f9a:	ff 1c       	adc	r15, r15
    1f9c:	c8 2f       	mov	r28, r24
    1f9e:	cf 70       	andi	r28, 0x0F	; 15
    1fa0:	d0 e0       	ldi	r29, 0x00	; 0
    1fa2:	cc 0f       	add	r28, r28
    1fa4:	dd 1f       	adc	r29, r29
    1fa6:	cf 0d       	add	r28, r15
    1fa8:	d1 1d       	adc	r29, r1
    1faa:	7e db       	rcall	.-2308   	; 0x16a8 <udd_ep_get_job>
    1fac:	dc 01       	movw	r26, r24
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ee 0f       	add	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	ee 0f       	add	r30, r30
    1fba:	ff 1f       	adc	r31, r31
    1fbc:	e4 51       	subi	r30, 0x14	; 20
    1fbe:	fd 4d       	sbci	r31, 0xDD	; 221
    1fc0:	02 e0       	ldi	r16, 0x02	; 2
    1fc2:	05 93       	las	Z, r16
    1fc4:	8c 91       	ld	r24, X
    1fc6:	80 ff       	sbrs	r24, 0
    1fc8:	22 c0       	rjmp	.+68     	; 0x200e <udd_ep_abort+0x86>
    1fca:	8e 7f       	andi	r24, 0xFE	; 254
    1fcc:	8c 93       	st	X, r24
    1fce:	17 96       	adiw	r26, 0x07	; 7
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	18 97       	sbiw	r26, 0x08	; 8
    1fd6:	30 97       	sbiw	r30, 0x00	; 0
    1fd8:	d1 f0       	breq	.+52     	; 0x200e <udd_ep_abort+0x86>
    1fda:	ff 20       	and	r15, r15
    1fdc:	59 f0       	breq	.+22     	; 0x1ff4 <udd_ep_abort+0x6c>
    1fde:	cc 0f       	add	r28, r28
    1fe0:	dd 1f       	adc	r29, r29
    1fe2:	cc 0f       	add	r28, r28
    1fe4:	dd 1f       	adc	r29, r29
    1fe6:	cc 0f       	add	r28, r28
    1fe8:	dd 1f       	adc	r29, r29
    1fea:	c0 52       	subi	r28, 0x20	; 32
    1fec:	dd 4d       	sbci	r29, 0xDD	; 221
    1fee:	6a 89       	ldd	r22, Y+18	; 0x12
    1ff0:	7b 89       	ldd	r23, Y+19	; 0x13
    1ff2:	0a c0       	rjmp	.+20     	; 0x2008 <udd_ep_abort+0x80>
    1ff4:	cc 0f       	add	r28, r28
    1ff6:	dd 1f       	adc	r29, r29
    1ff8:	cc 0f       	add	r28, r28
    1ffa:	dd 1f       	adc	r29, r29
    1ffc:	cc 0f       	add	r28, r28
    1ffe:	dd 1f       	adc	r29, r29
    2000:	c0 52       	subi	r28, 0x20	; 32
    2002:	dd 4d       	sbci	r29, 0xDD	; 221
    2004:	6e 85       	ldd	r22, Y+14	; 0x0e
    2006:	7f 85       	ldd	r23, Y+15	; 0x0f
    2008:	41 2f       	mov	r20, r17
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	09 95       	icall
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	08 95       	ret

0000201a <udd_ep_free>:
    201a:	cf 93       	push	r28
    201c:	c8 2f       	mov	r28, r24
    201e:	b4 df       	rcall	.-152    	; 0x1f88 <udd_ep_abort>
    2020:	ec 2f       	mov	r30, r28
    2022:	ef 70       	andi	r30, 0x0F	; 15
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	8c 2f       	mov	r24, r28
    202c:	cc 0f       	add	r28, r28
    202e:	99 0b       	sbc	r25, r25
    2030:	88 27       	eor	r24, r24
    2032:	99 0f       	add	r25, r25
    2034:	88 1f       	adc	r24, r24
    2036:	99 27       	eor	r25, r25
    2038:	e8 0f       	add	r30, r24
    203a:	f9 1f       	adc	r31, r25
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	e0 52       	subi	r30, 0x20	; 32
    204a:	fd 4d       	sbci	r31, 0xDD	; 221
    204c:	15 86       	std	Z+13, r1	; 0x0d
    204e:	cf 91       	pop	r28
    2050:	08 95       	ret

00002052 <udd_ep_set_halt>:
    2052:	e8 2f       	mov	r30, r24
    2054:	ef 70       	andi	r30, 0x0F	; 15
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	ee 0f       	add	r30, r30
    205a:	ff 1f       	adc	r31, r31
    205c:	28 2f       	mov	r18, r24
    205e:	08 2e       	mov	r0, r24
    2060:	00 0c       	add	r0, r0
    2062:	33 0b       	sbc	r19, r19
    2064:	22 27       	eor	r18, r18
    2066:	33 0f       	add	r19, r19
    2068:	22 1f       	adc	r18, r18
    206a:	33 27       	eor	r19, r19
    206c:	e2 0f       	add	r30, r18
    206e:	f3 1f       	adc	r31, r19
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	ee 0f       	add	r30, r30
    2076:	ff 1f       	adc	r31, r31
    2078:	ee 0f       	add	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	e0 52       	subi	r30, 0x20	; 32
    207e:	fd 4d       	sbci	r31, 0xDD	; 221
    2080:	95 85       	ldd	r25, Z+13	; 0x0d
    2082:	94 60       	ori	r25, 0x04	; 4
    2084:	95 87       	std	Z+13, r25	; 0x0d
    2086:	80 df       	rcall	.-256    	; 0x1f88 <udd_ep_abort>
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	08 95       	ret

0000208c <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    208c:	1f 92       	push	r1
    208e:	0f 92       	push	r0
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	0f 92       	push	r0
    2094:	11 24       	eor	r1, r1
    2096:	0f 93       	push	r16
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    20b0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    20b4:	88 23       	and	r24, r24
    20b6:	3c f4       	brge	.+14     	; 0x20c6 <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
    20b8:	80 e8       	ldi	r24, 0x80	; 128
    20ba:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    20be:	0e 94 3e 07 	call	0xe7c	; 0xe7c <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    20c2:	d2 d1       	rcall	.+932    	; 0x2468 <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    20c4:	88 c0       	rjmp	.+272    	; 0x21d6 <__vector_125+0x14a>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    20c6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    20ca:	82 ff       	sbrs	r24, 2
    20cc:	20 c0       	rjmp	.+64     	; 0x210e <__vector_125+0x82>
		udd_ack_underflow_event();
    20ce:	84 e0       	ldi	r24, 0x04	; 4
    20d0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    20d4:	80 91 f4 22 	lds	r24, 0x22F4	; 0x8022f4 <udd_sram+0x14>
    20d8:	86 ff       	sbrs	r24, 6
    20da:	7d c0       	rjmp	.+250    	; 0x21d6 <__vector_125+0x14a>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    20dc:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    20e0:	81 fd       	sbrc	r24, 1
    20e2:	79 c0       	rjmp	.+242    	; 0x21d6 <__vector_125+0x14a>
    20e4:	fc da       	rcall	.-2568   	; 0x16de <udd_ctrl_interrupt_tc_setup>
    20e6:	81 11       	cpse	r24, r1
    20e8:	76 c0       	rjmp	.+236    	; 0x21d6 <__vector_125+0x14a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    20ea:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ep_control_state>
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	11 f4       	brne	.+4      	; 0x20f6 <__vector_125+0x6a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    20f2:	31 da       	rcall	.-2974   	; 0x1556 <udd_ctrl_send_zlp_in>
    20f4:	70 c0       	rjmp	.+224    	; 0x21d6 <__vector_125+0x14a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	09 f0       	breq	.+2      	; 0x20fc <__vector_125+0x70>
    20fa:	6d c0       	rjmp	.+218    	; 0x21d6 <__vector_125+0x14a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    20fc:	e5 ef       	ldi	r30, 0xF5	; 245
    20fe:	f2 e2       	ldi	r31, 0x22	; 34
    2100:	04 e0       	ldi	r16, 0x04	; 4
    2102:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2104:	ed ee       	ldi	r30, 0xED	; 237
    2106:	f2 e2       	ldi	r31, 0x22	; 34
    2108:	04 e0       	ldi	r16, 0x04	; 4
    210a:	05 93       	las	Z, r16
    210c:	64 c0       	rjmp	.+200    	; 0x21d6 <__vector_125+0x14a>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    210e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2112:	81 ff       	sbrs	r24, 1
    2114:	5b c0       	rjmp	.+182    	; 0x21cc <__vector_125+0x140>
		udd_ack_overflow_event();
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    211c:	80 91 ec 22 	lds	r24, 0x22EC	; 0x8022ec <udd_sram+0xc>
    2120:	86 ff       	sbrs	r24, 6
    2122:	59 c0       	rjmp	.+178    	; 0x21d6 <__vector_125+0x14a>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2124:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2128:	81 fd       	sbrc	r24, 1
    212a:	55 c0       	rjmp	.+170    	; 0x21d6 <__vector_125+0x14a>
    212c:	d8 da       	rcall	.-2640   	; 0x16de <udd_ctrl_interrupt_tc_setup>
    212e:	81 11       	cpse	r24, r1
    2130:	52 c0       	rjmp	.+164    	; 0x21d6 <__vector_125+0x14a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2132:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ep_control_state>
    2136:	82 30       	cpi	r24, 0x02	; 2
    2138:	41 f4       	brne	.+16     	; 0x214a <__vector_125+0xbe>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    213a:	84 e0       	ldi	r24, 0x04	; 4
    213c:	80 93 df 22 	sts	0x22DF, r24	; 0x8022df <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2140:	ec ee       	ldi	r30, 0xEC	; 236
    2142:	f2 e2       	ldi	r31, 0x22	; 34
    2144:	02 e0       	ldi	r16, 0x02	; 2
    2146:	06 93       	lac	Z, r16
    2148:	46 c0       	rjmp	.+140    	; 0x21d6 <__vector_125+0x14a>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	09 f0       	breq	.+2      	; 0x2150 <__vector_125+0xc4>
    214e:	43 c0       	rjmp	.+134    	; 0x21d6 <__vector_125+0x14a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2150:	e5 ef       	ldi	r30, 0xF5	; 245
    2152:	f2 e2       	ldi	r31, 0x22	; 34
    2154:	04 e0       	ldi	r16, 0x04	; 4
    2156:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2158:	ed ee       	ldi	r30, 0xED	; 237
    215a:	f2 e2       	ldi	r31, 0x22	; 34
    215c:	04 e0       	ldi	r16, 0x04	; 4
    215e:	05 93       	las	Z, r16
    2160:	3a c0       	rjmp	.+116    	; 0x21d6 <__vector_125+0x14a>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2162:	80 e1       	ldi	r24, 0x10	; 16
    2164:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	0e df       	rcall	.-484    	; 0x1f88 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    216c:	81 e8       	ldi	r24, 0x81	; 129
    216e:	0c df       	rcall	.-488    	; 0x1f88 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	0a df       	rcall	.-492    	; 0x1f88 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2174:	82 e8       	ldi	r24, 0x82	; 130
    2176:	08 df       	rcall	.-496    	; 0x1f88 <udd_ep_abort>
		}
#endif
		udc_reset();
    2178:	0e 94 17 07 	call	0xe2e	; 0xe2e <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    217c:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2180:	e0 ee       	ldi	r30, 0xE0	; 224
    2182:	f2 e2       	ldi	r31, 0x22	; 34
    2184:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2186:	96 e0       	ldi	r25, 0x06	; 6
    2188:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    218a:	83 e4       	ldi	r24, 0x43	; 67
    218c:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    218e:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2190:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2192:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2194:	8b e9       	ldi	r24, 0x9B	; 155
    2196:	92 e2       	ldi	r25, 0x22	; 34
    2198:	80 8b       	std	Z+16, r24	; 0x10
    219a:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    219c:	a9 d9       	rcall	.-3246   	; 0x14f0 <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    219e:	1b c0       	rjmp	.+54     	; 0x21d6 <__vector_125+0x14a>
	}

	if (udd_is_suspend_event()) {
    21a0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    21a4:	86 ff       	sbrs	r24, 6
    21a6:	07 c0       	rjmp	.+14     	; 0x21b6 <__vector_125+0x12a>
		udd_ack_suspend_event();
    21a8:	80 e4       	ldi	r24, 0x40	; 64
    21aa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	68 d9       	rcall	.-3376   	; 0x1482 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    21b2:	54 d1       	rcall	.+680    	; 0x245c <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    21b4:	10 c0       	rjmp	.+32     	; 0x21d6 <__vector_125+0x14a>
	}

	if (udd_is_resume_event()) {
    21b6:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    21ba:	85 ff       	sbrs	r24, 5
    21bc:	0c c0       	rjmp	.+24     	; 0x21d6 <__vector_125+0x14a>
		udd_ack_resume_event();
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	5d d9       	rcall	.-3398   	; 0x1482 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    21c8:	4c d1       	rcall	.+664    	; 0x2462 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <__vector_125+0x14a>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    21cc:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    21d0:	84 fd       	sbrc	r24, 4
    21d2:	c7 cf       	rjmp	.-114    	; 0x2162 <__vector_125+0xd6>
    21d4:	e5 cf       	rjmp	.-54     	; 0x21a0 <__vector_125+0x114>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    21d6:	ff 91       	pop	r31
    21d8:	ef 91       	pop	r30
    21da:	bf 91       	pop	r27
    21dc:	af 91       	pop	r26
    21de:	9f 91       	pop	r25
    21e0:	8f 91       	pop	r24
    21e2:	7f 91       	pop	r23
    21e4:	6f 91       	pop	r22
    21e6:	5f 91       	pop	r21
    21e8:	4f 91       	pop	r20
    21ea:	3f 91       	pop	r19
    21ec:	2f 91       	pop	r18
    21ee:	0f 91       	pop	r16
    21f0:	0f 90       	pop	r0
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	0f 90       	pop	r0
    21f6:	1f 90       	pop	r1
    21f8:	18 95       	reti

000021fa <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    21fa:	1f 92       	push	r1
    21fc:	0f 92       	push	r0
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	0f 92       	push	r0
    2202:	11 24       	eor	r1, r1
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	2f 93       	push	r18
    220a:	3f 93       	push	r19
    220c:	4f 93       	push	r20
    220e:	5f 93       	push	r21
    2210:	6f 93       	push	r22
    2212:	7f 93       	push	r23
    2214:	8f 93       	push	r24
    2216:	9f 93       	push	r25
    2218:	af 93       	push	r26
    221a:	bf 93       	push	r27
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	ef 93       	push	r30
    2222:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2224:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2228:	81 fd       	sbrc	r24, 1
    222a:	03 c0       	rjmp	.+6      	; 0x2232 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    222c:	58 da       	rcall	.-2896   	; 0x16de <udd_ctrl_interrupt_tc_setup>
    222e:	81 11       	cpse	r24, r1
    2230:	c3 c0       	rjmp	.+390    	; 0x23b8 <__vector_126+0x1be>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2238:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    223c:	81 95       	neg	r24
    223e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2240:	ec ee       	ldi	r30, 0xEC	; 236
    2242:	f2 e2       	ldi	r31, 0x22	; 34
    2244:	e8 1b       	sub	r30, r24
    2246:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2248:	20 81       	ld	r18, Z
    224a:	31 81       	ldd	r19, Z+1	; 0x01
    224c:	2c 5e       	subi	r18, 0xEC	; 236
    224e:	32 42       	sbci	r19, 0x22	; 34
    2250:	36 95       	lsr	r19
    2252:	27 95       	ror	r18
    2254:	36 95       	lsr	r19
    2256:	27 95       	ror	r18
    2258:	36 95       	lsr	r19
    225a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    225c:	82 2f       	mov	r24, r18
    225e:	86 95       	lsr	r24
    2260:	20 fd       	sbrc	r18, 0
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <__vector_126+0x6e>
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	01 c0       	rjmp	.+2      	; 0x226a <__vector_126+0x70>
    2268:	90 e8       	ldi	r25, 0x80	; 128
    226a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    226c:	e8 2f       	mov	r30, r24
    226e:	ef 70       	andi	r30, 0x0F	; 15
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2276:	28 2f       	mov	r18, r24
    2278:	08 2e       	mov	r0, r24
    227a:	00 0c       	add	r0, r0
    227c:	33 0b       	sbc	r19, r19
    227e:	22 27       	eor	r18, r18
    2280:	33 0f       	add	r19, r19
    2282:	22 1f       	adc	r18, r18
    2284:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2286:	e2 0f       	add	r30, r18
    2288:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    228a:	df 01       	movw	r26, r30
    228c:	aa 0f       	add	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	aa 0f       	add	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	aa 0f       	add	r26, r26
    2296:	bb 1f       	adc	r27, r27
    2298:	a0 52       	subi	r26, 0x20	; 32
    229a:	bd 4d       	sbci	r27, 0xDD	; 221
    229c:	1c 96       	adiw	r26, 0x0c	; 12
    229e:	9c 91       	ld	r25, X
    22a0:	95 ff       	sbrs	r25, 5
    22a2:	8a c0       	rjmp	.+276    	; 0x23b8 <__vector_126+0x1be>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	ee 0f       	add	r30, r30
    22aa:	ff 1f       	adc	r31, r31
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	e4 51       	subi	r30, 0x14	; 20
    22b2:	fd 4d       	sbci	r31, 0xDD	; 221
    22b4:	00 e2       	ldi	r16, 0x20	; 32
    22b6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    22b8:	81 11       	cpse	r24, r1
    22ba:	79 c0       	rjmp	.+242    	; 0x23ae <__vector_126+0x1b4>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    22bc:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <udd_ep_control_state>
    22c0:	84 30       	cpi	r24, 0x04	; 4
    22c2:	19 f4       	brne	.+6      	; 0x22ca <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    22c4:	56 d9       	rcall	.-3412   	; 0x1572 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    22c6:	14 d9       	rcall	.-3544   	; 0x14f0 <udd_ctrl_init>
    22c8:	77 c0       	rjmp	.+238    	; 0x23b8 <__vector_126+0x1be>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    22ca:	00 91 ee 22 	lds	r16, 0x22EE	; 0x8022ee <udd_sram+0xe>
    22ce:	10 91 ef 22 	lds	r17, 0x22EF	; 0x8022ef <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    22d2:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
    22d6:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
    22da:	c0 91 db 22 	lds	r28, 0x22DB	; 0x8022db <udd_ctrl_payload_nb_trans>
    22de:	d0 91 dc 22 	lds	r29, 0x22DC	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    22e2:	9e 01       	movw	r18, r28
    22e4:	20 0f       	add	r18, r16
    22e6:	31 1f       	adc	r19, r17
    22e8:	82 17       	cp	r24, r18
    22ea:	93 07       	cpc	r25, r19
    22ec:	18 f4       	brcc	.+6      	; 0x22f4 <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    22ee:	8c 01       	movw	r16, r24
    22f0:	0c 1b       	sub	r16, r28
    22f2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    22f4:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udd_g_ctrlreq+0x8>
    22f8:	90 91 31 23 	lds	r25, 0x2331	; 0x802331 <udd_g_ctrlreq+0x9>
    22fc:	a8 01       	movw	r20, r16
    22fe:	6b e9       	ldi	r22, 0x9B	; 155
    2300:	72 e2       	ldi	r23, 0x22	; 34
    2302:	8c 0f       	add	r24, r28
    2304:	9d 1f       	adc	r25, r29
    2306:	04 d2       	rcall	.+1032   	; 0x2710 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2308:	c0 0f       	add	r28, r16
    230a:	d1 1f       	adc	r29, r17
    230c:	c0 93 db 22 	sts	0x22DB, r28	; 0x8022db <udd_ctrl_payload_nb_trans>
    2310:	d0 93 dc 22 	sts	0x22DC, r29	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2314:	00 34       	cpi	r16, 0x40	; 64
    2316:	11 05       	cpc	r17, r1
    2318:	69 f4       	brne	.+26     	; 0x2334 <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    231a:	80 91 dd 22 	lds	r24, 0x22DD	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    231e:	90 91 de 22 	lds	r25, 0x22DE	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
    2322:	8c 0f       	add	r24, r28
    2324:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2326:	20 91 2e 23 	lds	r18, 0x232E	; 0x80232e <udd_g_ctrlreq+0x6>
    232a:	30 91 2f 23 	lds	r19, 0x232F	; 0x80232f <udd_g_ctrlreq+0x7>
    232e:	82 17       	cp	r24, r18
    2330:	93 07       	cpc	r25, r19
    2332:	80 f0       	brcs	.+32     	; 0x2354 <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2334:	e8 e2       	ldi	r30, 0x28	; 40
    2336:	f3 e2       	ldi	r31, 0x23	; 35
    2338:	c2 87       	std	Z+10, r28	; 0x0a
    233a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    233c:	06 84       	ldd	r0, Z+14	; 0x0e
    233e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2340:	e0 2d       	mov	r30, r0
    2342:	30 97       	sbiw	r30, 0x00	; 0
    2344:	29 f0       	breq	.+10     	; 0x2350 <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2346:	09 95       	icall
    2348:	81 11       	cpse	r24, r1
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    234c:	f6 d8       	rcall	.-3604   	; 0x153a <udd_ctrl_stall_data>
    234e:	34 c0       	rjmp	.+104    	; 0x23b8 <__vector_126+0x1be>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2350:	02 d9       	rcall	.-3580   	; 0x1556 <udd_ctrl_send_zlp_in>
    2352:	32 c0       	rjmp	.+100    	; 0x23b8 <__vector_126+0x1be>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2354:	80 91 32 23 	lds	r24, 0x2332	; 0x802332 <udd_g_ctrlreq+0xa>
    2358:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udd_g_ctrlreq+0xb>
    235c:	c8 17       	cp	r28, r24
    235e:	d9 07       	cpc	r29, r25
    2360:	f9 f4       	brne	.+62     	; 0x23a0 <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2362:	e0 91 36 23 	lds	r30, 0x2336	; 0x802336 <udd_g_ctrlreq+0xe>
    2366:	f0 91 37 23 	lds	r31, 0x2337	; 0x802337 <udd_g_ctrlreq+0xf>
    236a:	30 97       	sbiw	r30, 0x00	; 0
    236c:	11 f4       	brne	.+4      	; 0x2372 <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    236e:	e5 d8       	rcall	.-3638   	; 0x153a <udd_ctrl_stall_data>
    2370:	23 c0       	rjmp	.+70     	; 0x23b8 <__vector_126+0x1be>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2372:	09 95       	icall
    2374:	81 11       	cpse	r24, r1
    2376:	02 c0       	rjmp	.+4      	; 0x237c <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2378:	e0 d8       	rcall	.-3648   	; 0x153a <udd_ctrl_stall_data>
    237a:	1e c0       	rjmp	.+60     	; 0x23b8 <__vector_126+0x1be>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    237c:	20 91 dd 22 	lds	r18, 0x22DD	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    2380:	30 91 de 22 	lds	r19, 0x22DE	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
    2384:	80 91 db 22 	lds	r24, 0x22DB	; 0x8022db <udd_ctrl_payload_nb_trans>
    2388:	90 91 dc 22 	lds	r25, 0x22DC	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
    238c:	82 0f       	add	r24, r18
    238e:	93 1f       	adc	r25, r19
    2390:	80 93 dd 22 	sts	0x22DD, r24	; 0x8022dd <udd_ctrl_prev_payload_nb_trans>
    2394:	90 93 de 22 	sts	0x22DE, r25	; 0x8022de <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2398:	10 92 db 22 	sts	0x22DB, r1	; 0x8022db <udd_ctrl_payload_nb_trans>
    239c:	10 92 dc 22 	sts	0x22DC, r1	; 0x8022dc <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    23a0:	ec ee       	ldi	r30, 0xEC	; 236
    23a2:	f2 e2       	ldi	r31, 0x22	; 34
    23a4:	02 e0       	ldi	r16, 0x02	; 2
    23a6:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    23a8:	00 e2       	ldi	r16, 0x20	; 32
    23aa:	06 93       	lac	Z, r16
    23ac:	05 c0       	rjmp	.+10     	; 0x23b8 <__vector_126+0x1be>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    23ae:	80 38       	cpi	r24, 0x80	; 128
    23b0:	11 f4       	brne	.+4      	; 0x23b6 <__vector_126+0x1bc>
		udd_ctrl_in_sent();
    23b2:	e7 d8       	rcall	.-3634   	; 0x1582 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <__vector_126+0x1be>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    23b6:	04 da       	rcall	.-3064   	; 0x17c0 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    23b8:	ff 91       	pop	r31
    23ba:	ef 91       	pop	r30
    23bc:	df 91       	pop	r29
    23be:	cf 91       	pop	r28
    23c0:	bf 91       	pop	r27
    23c2:	af 91       	pop	r26
    23c4:	9f 91       	pop	r25
    23c6:	8f 91       	pop	r24
    23c8:	7f 91       	pop	r23
    23ca:	6f 91       	pop	r22
    23cc:	5f 91       	pop	r21
    23ce:	4f 91       	pop	r20
    23d0:	3f 91       	pop	r19
    23d2:	2f 91       	pop	r18
    23d4:	1f 91       	pop	r17
    23d6:	0f 91       	pop	r16
    23d8:	0f 90       	pop	r0
    23da:	0f be       	out	0x3f, r0	; 63
    23dc:	0f 90       	pop	r0
    23de:	1f 90       	pop	r1
    23e0:	18 95       	reti

000023e2 <main>:
/*! \brief Main function. Execution starts here.
 */
int main(void)
{

	irq_initialize_vectors();
    23e2:	87 e0       	ldi	r24, 0x07	; 7
    23e4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    23e8:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    23ea:	e2 e2       	ldi	r30, 0x22	; 34
    23ec:	f3 e2       	ldi	r31, 0x23	; 35
    23ee:	10 82       	st	Z, r1
    23f0:	11 82       	std	Z+1, r1	; 0x01
    23f2:	12 82       	std	Z+2, r1	; 0x02
    23f4:	13 82       	std	Z+3, r1	; 0x03
    23f6:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	85 83       	std	Z+5, r24	; 0x05

	// Initialize the sleep manager
	sleepmgr_init();

#if !SAM0
	sysclk_init();
    23fc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sysclk_init>
	board_init();
    2400:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <board_init>
#else
	system_init();
#endif
	ui_init();
    2404:	0e 94 23 01 	call	0x246	; 0x246 <ui_init>
	ui_powerdown();
    2408:	0e 94 34 01 	call	0x268	; 0x268 <ui_powerdown>

	// Start USB stack to authorize VBus monitoring
	udc_start();
    240c:	0e 94 15 07 	call	0xe2a	; 0xe2a <udc_start>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2410:	22 e2       	ldi	r18, 0x22	; 34
    2412:	33 e2       	ldi	r19, 0x23	; 35
    2414:	43 e2       	ldi	r20, 0x23	; 35
    2416:	53 e2       	ldi	r21, 0x23	; 35
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    2418:	c8 e4       	ldi	r28, 0x48	; 72
    241a:	d0 e0       	ldi	r29, 0x00	; 0
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    241c:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    241e:	f9 01       	movw	r30, r18
    2420:	80 81       	ld	r24, Z
    2422:	81 11       	cpse	r24, r1
    2424:	08 c0       	rjmp	.+16     	; 0x2436 <main+0x54>
    2426:	da 01       	movw	r26, r20
    2428:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    242a:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    242c:	8d 91       	ld	r24, X+
    242e:	88 23       	and	r24, r24
    2430:	e1 f3       	breq	.-8      	; 0x242a <main+0x48>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    2432:	e1 11       	cpse	r30, r1
    2434:	02 c0       	rjmp	.+4      	; 0x243a <main+0x58>
		cpu_irq_enable();
    2436:	78 94       	sei
    2438:	f1 cf       	rjmp	.-30     	; 0x241c <main+0x3a>
    243a:	88 81       	ld	r24, Y

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	e1 50       	subi	r30, 0x01	; 1
    2440:	f0 4e       	sbci	r31, 0xE0	; 224
    2442:	81 7f       	andi	r24, 0xF1	; 241
    2444:	90 81       	ld	r25, Z
    2446:	89 2b       	or	r24, r25
    2448:	88 83       	st	Y, r24
	sleep_enable();
    244a:	88 81       	ld	r24, Y
    244c:	81 60       	ori	r24, 0x01	; 1
    244e:	88 83       	st	Y, r24

	cpu_irq_enable();
    2450:	78 94       	sei
	sleep_enter();
    2452:	88 95       	sleep

	sleep_disable();
    2454:	88 81       	ld	r24, Y
    2456:	8e 7f       	andi	r24, 0xFE	; 254
    2458:	88 83       	st	Y, r24
    245a:	e0 cf       	rjmp	.-64     	; 0x241c <main+0x3a>

0000245c <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    245c:	0c 94 34 01 	jmp	0x268	; 0x268 <ui_powerdown>
    2460:	08 95       	ret

00002462 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    2462:	0c 94 45 01 	jmp	0x28a	; 0x28a <ui_wakeup>
    2466:	08 95       	ret

00002468 <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_cdc_enable)
    2468:	80 91 21 23 	lds	r24, 0x2321	; 0x802321 <main_b_cdc_enable>
    246c:	88 23       	and	r24, r24
    246e:	19 f0       	breq	.+6      	; 0x2476 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    2470:	db db       	rcall	.-2122   	; 0x1c28 <udd_get_frame_number>
    2472:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <ui_process>
    2476:	08 95       	ret

00002478 <main_cdc_enable>:
}
#endif

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	90 93 21 23 	sts	0x2321, r25	; 0x802321 <main_b_cdc_enable>
	// Open communication
	uart_open(port);
    247e:	79 d0       	rcall	.+242    	; 0x2572 <uart_open>
	return true;
}
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	08 95       	ret

00002484 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
    2484:	10 92 21 23 	sts	0x2321, r1	; 0x802321 <main_b_cdc_enable>
	// Close communication
	uart_close(port);
    2488:	85 c0       	rjmp	.+266    	; 0x2594 <uart_close>
    248a:	08 95       	ret

0000248c <main_cdc_set_dtr>:
}

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
	if (b_enable) {
    248c:	66 23       	and	r22, r22
    248e:	19 f0       	breq	.+6      	; 0x2496 <main_cdc_set_dtr+0xa>
		// Host terminal has open COM
		ui_com_open(port);
    2490:	0c 94 49 01 	jmp	0x292	; 0x292 <ui_com_open>
    2494:	08 95       	ret
	}else{
		// Host terminal has close COM
		ui_com_close(port);
    2496:	0c 94 4d 01 	jmp	0x29a	; 0x29a <ui_com_close>
    249a:	08 95       	ret

0000249c <uart_config>:
#include "uart.h"
#include "main.h"
#include "ui.h"

void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	8b 01       	movw	r16, r22
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;

	switch (cfg->bCharFormat) {
    24a8:	fb 01       	movw	r30, r22
    24aa:	84 81       	ldd	r24, Z+4	; 0x04
    24ac:	82 30       	cpi	r24, 0x02	; 2
    24ae:	21 f4       	brne	.+8      	; 0x24b8 <uart_config+0x1c>
	case CDC_STOP_BITS_2:
		reg_ctrlc |= USART_SBMODE_bm;
    24b0:	68 94       	set
    24b2:	ff 24       	eor	r15, r15
    24b4:	f3 f8       	bld	r15, 3
    24b6:	01 c0       	rjmp	.+2      	; 0x24ba <uart_config+0x1e>
void uart_config(uint8_t port, usb_cdc_line_coding_t * cfg)
{
	uint8_t reg_ctrlc;
	uint16_t bsel;

	reg_ctrlc = USART_CMODE_ASYNCHRONOUS_gc;
    24b8:	f1 2c       	mov	r15, r1
	default:
		// Default stop bit = 1 stop bit
		break;
	}

	switch (cfg->bParityType) {
    24ba:	f8 01       	movw	r30, r16
    24bc:	85 81       	ldd	r24, Z+5	; 0x05
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	31 f0       	breq	.+12     	; 0x24ce <uart_config+0x32>
    24c2:	82 30       	cpi	r24, 0x02	; 2
    24c4:	39 f4       	brne	.+14     	; 0x24d4 <uart_config+0x38>
	case CDC_PAR_EVEN:
		reg_ctrlc |= USART_PMODE_EVEN_gc;
    24c6:	ff 2d       	mov	r31, r15
    24c8:	f0 62       	ori	r31, 0x20	; 32
    24ca:	ff 2e       	mov	r15, r31
		break;
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <uart_config+0x38>
	case CDC_PAR_ODD:
		reg_ctrlc |= USART_PMODE_ODD_gc;
    24ce:	8f 2d       	mov	r24, r15
    24d0:	80 63       	ori	r24, 0x30	; 48
    24d2:	f8 2e       	mov	r15, r24
	case CDC_PAR_NONE:
		reg_ctrlc |= USART_PMODE_DISABLED_gc;
		break;
	}

	switch (cfg->bDataBits) {
    24d4:	f8 01       	movw	r30, r16
    24d6:	86 81       	ldd	r24, Z+6	; 0x06
    24d8:	86 30       	cpi	r24, 0x06	; 6
    24da:	49 f0       	breq	.+18     	; 0x24ee <uart_config+0x52>
    24dc:	18 f4       	brcc	.+6      	; 0x24e4 <uart_config+0x48>
    24de:	85 30       	cpi	r24, 0x05	; 5
    24e0:	a9 f0       	breq	.+42     	; 0x250c <uart_config+0x70>
    24e2:	0d c0       	rjmp	.+26     	; 0x24fe <uart_config+0x62>
    24e4:	87 30       	cpi	r24, 0x07	; 7
    24e6:	39 f0       	breq	.+14     	; 0x24f6 <uart_config+0x5a>
    24e8:	89 30       	cpi	r24, 0x09	; 9
    24ea:	69 f0       	breq	.+26     	; 0x2506 <uart_config+0x6a>
    24ec:	08 c0       	rjmp	.+16     	; 0x24fe <uart_config+0x62>
	case 5:
		reg_ctrlc |= USART_CHSIZE_5BIT_gc;
		break;
	case 6:
		reg_ctrlc |= USART_CHSIZE_6BIT_gc;
    24ee:	ff 2d       	mov	r31, r15
    24f0:	f1 60       	ori	r31, 0x01	; 1
    24f2:	ff 2e       	mov	r15, r31
		break;
    24f4:	0b c0       	rjmp	.+22     	; 0x250c <uart_config+0x70>
	case 7:
		reg_ctrlc |= USART_CHSIZE_7BIT_gc;
    24f6:	8f 2d       	mov	r24, r15
    24f8:	82 60       	ori	r24, 0x02	; 2
    24fa:	f8 2e       	mov	r15, r24
		break;
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <uart_config+0x70>
	default:
	case 8:
		reg_ctrlc |= USART_CHSIZE_8BIT_gc;
    24fe:	ef 2d       	mov	r30, r15
    2500:	e3 60       	ori	r30, 0x03	; 3
    2502:	fe 2e       	mov	r15, r30
		break;
    2504:	03 c0       	rjmp	.+6      	; 0x250c <uart_config+0x70>
	case 9:
		reg_ctrlc |= USART_CHSIZE_9BIT_gc;
    2506:	ff 2d       	mov	r31, r15
    2508:	f7 60       	ori	r31, 0x07	; 7
    250a:	ff 2e       	mov	r15, r31
		break;
	}

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    250c:	60 e1       	ldi	r22, 0x10	; 16
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_enable_module>
	// Set configuration
	USART.CTRLC = reg_ctrlc;
    2514:	c0 ea       	ldi	r28, 0xA0	; 160
    2516:	d8 e0       	ldi	r29, 0x08	; 8
    2518:	fd 82       	std	Y+5, r15	; 0x05
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    251a:	f8 01       	movw	r30, r16
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	a2 81       	ldd	r26, Z+2	; 0x02
    2522:	b3 81       	ldd	r27, Z+3	; 0x03
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	aa 1f       	adc	r26, r26
    252a:	bb 1f       	adc	r27, r27
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	aa 1f       	adc	r26, r26
    2532:	bb 1f       	adc	r27, r27
    2534:	9c 01       	movw	r18, r24
    2536:	ad 01       	movw	r20, r26
    2538:	22 0f       	add	r18, r18
    253a:	33 1f       	adc	r19, r19
    253c:	44 1f       	adc	r20, r20
    253e:	55 1f       	adc	r21, r21

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	7c e6       	ldi	r23, 0x6C	; 108
    2544:	8c ed       	ldi	r24, 0xDC	; 220
    2546:	92 e0       	ldi	r25, 0x02	; 2
    2548:	bb d0       	rcall	.+374    	; 0x26c0 <__udivmodsi4>
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
    254a:	da 01       	movw	r26, r20
    254c:	c9 01       	movw	r24, r18
    254e:	01 96       	adiw	r24, 0x01	; 1
    2550:	a1 1d       	adc	r26, r1
    2552:	b1 1d       	adc	r27, r1
    2554:	b6 95       	lsr	r27
    2556:	a7 95       	ror	r26
    2558:	97 95       	ror	r25
    255a:	87 95       	ror	r24

	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
	// Set configuration
	USART.CTRLC = reg_ctrlc;
	// Update baudrate
	bsel = (uint16_t) (((((((uint32_t) sysclk_get_cpu_hz()) << 1) / ((uint32_t)
    255c:	9c 01       	movw	r18, r24
    255e:	21 50       	subi	r18, 0x01	; 1
    2560:	31 09       	sbc	r19, r1
		le32_to_cpu(cfg->dwDTERate) * 8)) + 1) >> 1) - 1);
	USART.BAUDCTRLA = bsel & 0xFF;
    2562:	2e 83       	std	Y+6, r18	; 0x06
	USART.BAUDCTRLB = bsel >> 8;
    2564:	3f 83       	std	Y+7, r19	; 0x07
}
    2566:	df 91       	pop	r29
    2568:	cf 91       	pop	r28
    256a:	1f 91       	pop	r17
    256c:	0f 91       	pop	r16
    256e:	ff 90       	pop	r15
    2570:	08 95       	ret

00002572 <uart_open>:

void uart_open(uint8_t port)
{
	sysclk_enable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2572:	60 e1       	ldi	r22, 0x10	; 16
    2574:	83 e0       	ldi	r24, 0x03	; 3
    2576:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <sysclk_enable_module>
	// Open UART communication
	USART_PORT.DIRSET = USART_PORT_PIN_TX; // TX as output.
    257a:	e0 e4       	ldi	r30, 0x40	; 64
    257c:	f6 e0       	ldi	r31, 0x06	; 6
    257e:	88 e0       	ldi	r24, 0x08	; 8
    2580:	81 83       	std	Z+1, r24	; 0x01
	USART_PORT.DIRCLR = USART_PORT_PIN_RX; // RX as input.
    2582:	84 e0       	ldi	r24, 0x04	; 4
    2584:	82 83       	std	Z+2, r24	; 0x02

	// Enable both RX and TX
	USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
    2586:	e0 ea       	ldi	r30, 0xA0	; 160
    2588:	f8 e0       	ldi	r31, 0x08	; 8
    258a:	8c e1       	ldi	r24, 0x1C	; 28
    258c:	84 83       	std	Z+4, r24	; 0x04
	// Enable interrupt with priority higher than USB
	USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    258e:	80 e3       	ldi	r24, 0x30	; 48
    2590:	83 83       	std	Z+3, r24	; 0x03
    2592:	08 95       	ret

00002594 <uart_close>:
			USART_DREINTLVL_OFF_gc;
}

void uart_close(uint8_t port)
{
	sysclk_disable_module(USART_PORT_SYSCLK, USART_SYSCLK);
    2594:	60 e1       	ldi	r22, 0x10	; 16
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	0e 94 10 02 	call	0x420	; 0x420 <sysclk_disable_module>
	// Disable interrupts
	USART.CTRLA = 0;
    259c:	e0 ea       	ldi	r30, 0xA0	; 160
    259e:	f8 e0       	ldi	r31, 0x08	; 8
    25a0:	13 82       	std	Z+3, r1	; 0x03
	// Close RS232 communication
	USART.CTRLB = 0;
    25a2:	14 82       	std	Z+4, r1	; 0x04
    25a4:	08 95       	ret

000025a6 <uart_rx_notify>:
}

void uart_rx_notify(uint8_t port)
{
	// If UART is open
	if (USART.CTRLA!=0) {
    25a6:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    25aa:	88 23       	and	r24, r24
    25ac:	19 f0       	breq	.+6      	; 0x25b4 <uart_rx_notify+0xe>
		// Enable UART TX interrupt to send values
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc | (register8_t)
    25ae:	83 e3       	ldi	r24, 0x33	; 51
    25b0:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
    25b4:	08 95       	ret

000025b6 <__vector_25>:
	}
}


ISR(USART_RX_Vect)
{
    25b6:	1f 92       	push	r1
    25b8:	0f 92       	push	r0
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	0f 92       	push	r0
    25be:	11 24       	eor	r1, r1
    25c0:	2f 93       	push	r18
    25c2:	3f 93       	push	r19
    25c4:	4f 93       	push	r20
    25c6:	5f 93       	push	r21
    25c8:	6f 93       	push	r22
    25ca:	7f 93       	push	r23
    25cc:	8f 93       	push	r24
    25ce:	9f 93       	push	r25
    25d0:	af 93       	push	r26
    25d2:	bf 93       	push	r27
    25d4:	cf 93       	push	r28
    25d6:	ef 93       	push	r30
    25d8:	ff 93       	push	r31
	uint8_t value;

	// Data received
	ui_com_tx_start();
    25da:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ui_com_tx_start>

	if (0 != (USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))) {
    25de:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <__TEXT_REGION_LENGTH__+0x7008a1>
    25e2:	88 71       	andi	r24, 0x18	; 24
    25e4:	21 f0       	breq	.+8      	; 0x25ee <__vector_25+0x38>
		udi_cdc_signal_framing_error();
    25e6:	0e 94 65 04 	call	0x8ca	; 0x8ca <udi_cdc_signal_framing_error>
		ui_com_error();
    25ea:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ui_com_error>
	}

	// Transfer UART RX fifo to CDC TX
	value = USART.DATA;
    25ee:	c0 91 a0 08 	lds	r28, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if (!udi_cdc_is_tx_ready()) {
    25f2:	0e 94 da 05 	call	0xbb4	; 0xbb4 <udi_cdc_is_tx_ready>
    25f6:	81 11       	cpse	r24, r1
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <__vector_25+0x4e>
		// Fifo full
		udi_cdc_signal_overrun();
    25fa:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <udi_cdc_signal_overrun>
		ui_com_overflow();
    25fe:	0e 94 6e 01 	call	0x2dc	; 0x2dc <ui_com_overflow>
    2602:	04 c0       	rjmp	.+8      	; 0x260c <__vector_25+0x56>
	}else{
		udi_cdc_putc(value);
    2604:	8c 2f       	mov	r24, r28
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 2c 06 	call	0xc58	; 0xc58 <udi_cdc_putc>
	}
	ui_com_tx_stop();
    260c:	0e 94 66 01 	call	0x2cc	; 0x2cc <ui_com_tx_stop>
}
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	cf 91       	pop	r28
    2616:	bf 91       	pop	r27
    2618:	af 91       	pop	r26
    261a:	9f 91       	pop	r25
    261c:	8f 91       	pop	r24
    261e:	7f 91       	pop	r23
    2620:	6f 91       	pop	r22
    2622:	5f 91       	pop	r21
    2624:	4f 91       	pop	r20
    2626:	3f 91       	pop	r19
    2628:	2f 91       	pop	r18
    262a:	0f 90       	pop	r0
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	0f 90       	pop	r0
    2630:	1f 90       	pop	r1
    2632:	18 95       	reti

00002634 <__vector_26>:

ISR(USART_DRE_Vect)
{
    2634:	1f 92       	push	r1
    2636:	0f 92       	push	r0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	0f 92       	push	r0
    263c:	11 24       	eor	r1, r1
    263e:	2f 93       	push	r18
    2640:	3f 93       	push	r19
    2642:	4f 93       	push	r20
    2644:	5f 93       	push	r21
    2646:	6f 93       	push	r22
    2648:	7f 93       	push	r23
    264a:	8f 93       	push	r24
    264c:	9f 93       	push	r25
    264e:	af 93       	push	r26
    2650:	bf 93       	push	r27
    2652:	ef 93       	push	r30
    2654:	ff 93       	push	r31
	// Data send
	if (udi_cdc_is_rx_ready()) {
    2656:	0e 94 49 05 	call	0xa92	; 0xa92 <udi_cdc_is_rx_ready>
    265a:	88 23       	and	r24, r24
    265c:	39 f0       	breq	.+14     	; 0x266c <__vector_26+0x38>
		// Transmit next data
		ui_com_rx_start();
    265e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <ui_com_rx_start>
		USART.DATA = udi_cdc_getc();
    2662:	0e 94 a0 05 	call	0xb40	; 0xb40 <udi_cdc_getc>
    2666:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    266a:	05 c0       	rjmp	.+10     	; 0x2676 <__vector_26+0x42>
	} else {
		// Fifo empty then Stop UART transmission
		USART.CTRLA = (register8_t) USART_RXCINTLVL_HI_gc |
    266c:	80 e3       	ldi	r24, 0x30	; 48
    266e:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <__TEXT_REGION_LENGTH__+0x7008a3>
				(register8_t) USART_DREINTLVL_OFF_gc;
		ui_com_rx_stop();
    2672:	0e 94 5e 01 	call	0x2bc	; 0x2bc <ui_com_rx_stop>
	}
}
    2676:	ff 91       	pop	r31
    2678:	ef 91       	pop	r30
    267a:	bf 91       	pop	r27
    267c:	af 91       	pop	r26
    267e:	9f 91       	pop	r25
    2680:	8f 91       	pop	r24
    2682:	7f 91       	pop	r23
    2684:	6f 91       	pop	r22
    2686:	5f 91       	pop	r21
    2688:	4f 91       	pop	r20
    268a:	3f 91       	pop	r19
    268c:	2f 91       	pop	r18
    268e:	0f 90       	pop	r0
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__udivmodhi4>:
    2698:	aa 1b       	sub	r26, r26
    269a:	bb 1b       	sub	r27, r27
    269c:	51 e1       	ldi	r21, 0x11	; 17
    269e:	07 c0       	rjmp	.+14     	; 0x26ae <__udivmodhi4_ep>

000026a0 <__udivmodhi4_loop>:
    26a0:	aa 1f       	adc	r26, r26
    26a2:	bb 1f       	adc	r27, r27
    26a4:	a6 17       	cp	r26, r22
    26a6:	b7 07       	cpc	r27, r23
    26a8:	10 f0       	brcs	.+4      	; 0x26ae <__udivmodhi4_ep>
    26aa:	a6 1b       	sub	r26, r22
    26ac:	b7 0b       	sbc	r27, r23

000026ae <__udivmodhi4_ep>:
    26ae:	88 1f       	adc	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	5a 95       	dec	r21
    26b4:	a9 f7       	brne	.-22     	; 0x26a0 <__udivmodhi4_loop>
    26b6:	80 95       	com	r24
    26b8:	90 95       	com	r25
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	08 95       	ret

000026c0 <__udivmodsi4>:
    26c0:	a1 e2       	ldi	r26, 0x21	; 33
    26c2:	1a 2e       	mov	r1, r26
    26c4:	aa 1b       	sub	r26, r26
    26c6:	bb 1b       	sub	r27, r27
    26c8:	fd 01       	movw	r30, r26
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <__udivmodsi4_ep>

000026cc <__udivmodsi4_loop>:
    26cc:	aa 1f       	adc	r26, r26
    26ce:	bb 1f       	adc	r27, r27
    26d0:	ee 1f       	adc	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	a2 17       	cp	r26, r18
    26d6:	b3 07       	cpc	r27, r19
    26d8:	e4 07       	cpc	r30, r20
    26da:	f5 07       	cpc	r31, r21
    26dc:	20 f0       	brcs	.+8      	; 0x26e6 <__udivmodsi4_ep>
    26de:	a2 1b       	sub	r26, r18
    26e0:	b3 0b       	sbc	r27, r19
    26e2:	e4 0b       	sbc	r30, r20
    26e4:	f5 0b       	sbc	r31, r21

000026e6 <__udivmodsi4_ep>:
    26e6:	66 1f       	adc	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	88 1f       	adc	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	1a 94       	dec	r1
    26f0:	69 f7       	brne	.-38     	; 0x26cc <__udivmodsi4_loop>
    26f2:	60 95       	com	r22
    26f4:	70 95       	com	r23
    26f6:	80 95       	com	r24
    26f8:	90 95       	com	r25
    26fa:	9b 01       	movw	r18, r22
    26fc:	ac 01       	movw	r20, r24
    26fe:	bd 01       	movw	r22, r26
    2700:	cf 01       	movw	r24, r30
    2702:	08 95       	ret

00002704 <__tablejump2__>:
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	05 90       	lpm	r0, Z+
    270a:	f4 91       	lpm	r31, Z
    270c:	e0 2d       	mov	r30, r0
    270e:	09 94       	ijmp

00002710 <memcpy>:
    2710:	fb 01       	movw	r30, r22
    2712:	dc 01       	movw	r26, r24
    2714:	02 c0       	rjmp	.+4      	; 0x271a <memcpy+0xa>
    2716:	01 90       	ld	r0, Z+
    2718:	0d 92       	st	X+, r0
    271a:	41 50       	subi	r20, 0x01	; 1
    271c:	50 40       	sbci	r21, 0x00	; 0
    271e:	d8 f7       	brcc	.-10     	; 0x2716 <memcpy+0x6>
    2720:	08 95       	ret

00002722 <_exit>:
    2722:	f8 94       	cli

00002724 <__stop_program>:
    2724:	ff cf       	rjmp	.-2      	; 0x2724 <__stop_program>
