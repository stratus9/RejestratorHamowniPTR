
DEVICE_EXAMPLE1_msc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000317a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00802000  0000317a  00003210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003b7  008020da  008020da  000032ea  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000032ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000331c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000618  00000000  00000000  00003360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009dbd  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000229b  00000000  00000000  0000d735  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008c96  00000000  00000000  0000f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ef8  00000000  00000000  00018668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00031c43  00000000  00000000  00019560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f52  00000000  00000000  0004b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  0004f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c27c  00000000  00000000  0004f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5f c1       	rjmp	.+702    	; 0x2c0 <__ctors_end>
       2:	00 00       	nop
       4:	7a c1       	rjmp	.+756    	; 0x2fa <__bad_interrupt>
       6:	00 00       	nop
       8:	78 c1       	rjmp	.+752    	; 0x2fa <__bad_interrupt>
       a:	00 00       	nop
       c:	76 c1       	rjmp	.+748    	; 0x2fa <__bad_interrupt>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__bad_interrupt>
      12:	00 00       	nop
      14:	72 c1       	rjmp	.+740    	; 0x2fa <__bad_interrupt>
      16:	00 00       	nop
      18:	70 c1       	rjmp	.+736    	; 0x2fa <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6e c1       	rjmp	.+732    	; 0x2fa <__bad_interrupt>
      1e:	00 00       	nop
      20:	6c c1       	rjmp	.+728    	; 0x2fa <__bad_interrupt>
      22:	00 00       	nop
      24:	6a c1       	rjmp	.+724    	; 0x2fa <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c1       	rjmp	.+720    	; 0x2fa <__bad_interrupt>
      2a:	00 00       	nop
      2c:	66 c1       	rjmp	.+716    	; 0x2fa <__bad_interrupt>
      2e:	00 00       	nop
      30:	64 c1       	rjmp	.+712    	; 0x2fa <__bad_interrupt>
      32:	00 00       	nop
      34:	62 c1       	rjmp	.+708    	; 0x2fa <__bad_interrupt>
      36:	00 00       	nop
      38:	60 c1       	rjmp	.+704    	; 0x2fa <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5e c1       	rjmp	.+700    	; 0x2fa <__bad_interrupt>
      3e:	00 00       	nop
      40:	5c c1       	rjmp	.+696    	; 0x2fa <__bad_interrupt>
      42:	00 00       	nop
      44:	5a c1       	rjmp	.+692    	; 0x2fa <__bad_interrupt>
      46:	00 00       	nop
      48:	58 c1       	rjmp	.+688    	; 0x2fa <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c1       	rjmp	.+684    	; 0x2fa <__bad_interrupt>
      4e:	00 00       	nop
      50:	54 c1       	rjmp	.+680    	; 0x2fa <__bad_interrupt>
      52:	00 00       	nop
      54:	52 c1       	rjmp	.+676    	; 0x2fa <__bad_interrupt>
      56:	00 00       	nop
      58:	50 c1       	rjmp	.+672    	; 0x2fa <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4e c1       	rjmp	.+668    	; 0x2fa <__bad_interrupt>
      5e:	00 00       	nop
      60:	4c c1       	rjmp	.+664    	; 0x2fa <__bad_interrupt>
      62:	00 00       	nop
      64:	4a c1       	rjmp	.+660    	; 0x2fa <__bad_interrupt>
      66:	00 00       	nop
      68:	48 c1       	rjmp	.+656    	; 0x2fa <__bad_interrupt>
      6a:	00 00       	nop
      6c:	46 c1       	rjmp	.+652    	; 0x2fa <__bad_interrupt>
      6e:	00 00       	nop
      70:	44 c1       	rjmp	.+648    	; 0x2fa <__bad_interrupt>
      72:	00 00       	nop
      74:	42 c1       	rjmp	.+644    	; 0x2fa <__bad_interrupt>
      76:	00 00       	nop
      78:	40 c1       	rjmp	.+640    	; 0x2fa <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3e c1       	rjmp	.+636    	; 0x2fa <__bad_interrupt>
      7e:	00 00       	nop
      80:	3c c1       	rjmp	.+632    	; 0x2fa <__bad_interrupt>
      82:	00 00       	nop
      84:	3a c1       	rjmp	.+628    	; 0x2fa <__bad_interrupt>
      86:	00 00       	nop
      88:	38 c1       	rjmp	.+624    	; 0x2fa <__bad_interrupt>
      8a:	00 00       	nop
      8c:	36 c1       	rjmp	.+620    	; 0x2fa <__bad_interrupt>
      8e:	00 00       	nop
      90:	34 c1       	rjmp	.+616    	; 0x2fa <__bad_interrupt>
      92:	00 00       	nop
      94:	32 c1       	rjmp	.+612    	; 0x2fa <__bad_interrupt>
      96:	00 00       	nop
      98:	30 c1       	rjmp	.+608    	; 0x2fa <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2e c1       	rjmp	.+604    	; 0x2fa <__bad_interrupt>
      9e:	00 00       	nop
      a0:	2c c1       	rjmp	.+600    	; 0x2fa <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2a c1       	rjmp	.+596    	; 0x2fa <__bad_interrupt>
      a6:	00 00       	nop
      a8:	28 c1       	rjmp	.+592    	; 0x2fa <__bad_interrupt>
      aa:	00 00       	nop
      ac:	26 c1       	rjmp	.+588    	; 0x2fa <__bad_interrupt>
      ae:	00 00       	nop
      b0:	24 c1       	rjmp	.+584    	; 0x2fa <__bad_interrupt>
      b2:	00 00       	nop
      b4:	22 c1       	rjmp	.+580    	; 0x2fa <__bad_interrupt>
      b6:	00 00       	nop
      b8:	20 c1       	rjmp	.+576    	; 0x2fa <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1e c1       	rjmp	.+572    	; 0x2fa <__bad_interrupt>
      be:	00 00       	nop
      c0:	1c c1       	rjmp	.+568    	; 0x2fa <__bad_interrupt>
      c2:	00 00       	nop
      c4:	1a c1       	rjmp	.+564    	; 0x2fa <__bad_interrupt>
      c6:	00 00       	nop
      c8:	18 c1       	rjmp	.+560    	; 0x2fa <__bad_interrupt>
      ca:	00 00       	nop
      cc:	16 c1       	rjmp	.+556    	; 0x2fa <__bad_interrupt>
      ce:	00 00       	nop
      d0:	14 c1       	rjmp	.+552    	; 0x2fa <__bad_interrupt>
      d2:	00 00       	nop
      d4:	12 c1       	rjmp	.+548    	; 0x2fa <__bad_interrupt>
      d6:	00 00       	nop
      d8:	10 c1       	rjmp	.+544    	; 0x2fa <__bad_interrupt>
      da:	00 00       	nop
      dc:	0e c1       	rjmp	.+540    	; 0x2fa <__bad_interrupt>
      de:	00 00       	nop
      e0:	0c c1       	rjmp	.+536    	; 0x2fa <__bad_interrupt>
      e2:	00 00       	nop
      e4:	0a c1       	rjmp	.+532    	; 0x2fa <__bad_interrupt>
      e6:	00 00       	nop
      e8:	08 c1       	rjmp	.+528    	; 0x2fa <__bad_interrupt>
      ea:	00 00       	nop
      ec:	06 c1       	rjmp	.+524    	; 0x2fa <__bad_interrupt>
      ee:	00 00       	nop
      f0:	04 c1       	rjmp	.+520    	; 0x2fa <__bad_interrupt>
      f2:	00 00       	nop
      f4:	02 c1       	rjmp	.+516    	; 0x2fa <__bad_interrupt>
      f6:	00 00       	nop
      f8:	00 c1       	rjmp	.+512    	; 0x2fa <__bad_interrupt>
      fa:	00 00       	nop
      fc:	fe c0       	rjmp	.+508    	; 0x2fa <__bad_interrupt>
      fe:	00 00       	nop
     100:	fc c0       	rjmp	.+504    	; 0x2fa <__bad_interrupt>
     102:	00 00       	nop
     104:	fa c0       	rjmp	.+500    	; 0x2fa <__bad_interrupt>
     106:	00 00       	nop
     108:	f8 c0       	rjmp	.+496    	; 0x2fa <__bad_interrupt>
     10a:	00 00       	nop
     10c:	f6 c0       	rjmp	.+492    	; 0x2fa <__bad_interrupt>
     10e:	00 00       	nop
     110:	f4 c0       	rjmp	.+488    	; 0x2fa <__bad_interrupt>
     112:	00 00       	nop
     114:	f2 c0       	rjmp	.+484    	; 0x2fa <__bad_interrupt>
     116:	00 00       	nop
     118:	f0 c0       	rjmp	.+480    	; 0x2fa <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ee c0       	rjmp	.+476    	; 0x2fa <__bad_interrupt>
     11e:	00 00       	nop
     120:	ec c0       	rjmp	.+472    	; 0x2fa <__bad_interrupt>
     122:	00 00       	nop
     124:	ea c0       	rjmp	.+468    	; 0x2fa <__bad_interrupt>
     126:	00 00       	nop
     128:	e8 c0       	rjmp	.+464    	; 0x2fa <__bad_interrupt>
     12a:	00 00       	nop
     12c:	e6 c0       	rjmp	.+460    	; 0x2fa <__bad_interrupt>
     12e:	00 00       	nop
     130:	e4 c0       	rjmp	.+456    	; 0x2fa <__bad_interrupt>
     132:	00 00       	nop
     134:	e2 c0       	rjmp	.+452    	; 0x2fa <__bad_interrupt>
     136:	00 00       	nop
     138:	e0 c0       	rjmp	.+448    	; 0x2fa <__bad_interrupt>
     13a:	00 00       	nop
     13c:	de c0       	rjmp	.+444    	; 0x2fa <__bad_interrupt>
     13e:	00 00       	nop
     140:	dc c0       	rjmp	.+440    	; 0x2fa <__bad_interrupt>
     142:	00 00       	nop
     144:	da c0       	rjmp	.+436    	; 0x2fa <__bad_interrupt>
     146:	00 00       	nop
     148:	d8 c0       	rjmp	.+432    	; 0x2fa <__bad_interrupt>
     14a:	00 00       	nop
     14c:	d6 c0       	rjmp	.+428    	; 0x2fa <__bad_interrupt>
     14e:	00 00       	nop
     150:	d4 c0       	rjmp	.+424    	; 0x2fa <__bad_interrupt>
     152:	00 00       	nop
     154:	d2 c0       	rjmp	.+420    	; 0x2fa <__bad_interrupt>
     156:	00 00       	nop
     158:	d0 c0       	rjmp	.+416    	; 0x2fa <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ce c0       	rjmp	.+412    	; 0x2fa <__bad_interrupt>
     15e:	00 00       	nop
     160:	cc c0       	rjmp	.+408    	; 0x2fa <__bad_interrupt>
     162:	00 00       	nop
     164:	ca c0       	rjmp	.+404    	; 0x2fa <__bad_interrupt>
     166:	00 00       	nop
     168:	c8 c0       	rjmp	.+400    	; 0x2fa <__bad_interrupt>
     16a:	00 00       	nop
     16c:	c6 c0       	rjmp	.+396    	; 0x2fa <__bad_interrupt>
     16e:	00 00       	nop
     170:	c4 c0       	rjmp	.+392    	; 0x2fa <__bad_interrupt>
     172:	00 00       	nop
     174:	c2 c0       	rjmp	.+388    	; 0x2fa <__bad_interrupt>
     176:	00 00       	nop
     178:	c0 c0       	rjmp	.+384    	; 0x2fa <__bad_interrupt>
     17a:	00 00       	nop
     17c:	be c0       	rjmp	.+380    	; 0x2fa <__bad_interrupt>
     17e:	00 00       	nop
     180:	bc c0       	rjmp	.+376    	; 0x2fa <__bad_interrupt>
     182:	00 00       	nop
     184:	ba c0       	rjmp	.+372    	; 0x2fa <__bad_interrupt>
     186:	00 00       	nop
     188:	b8 c0       	rjmp	.+368    	; 0x2fa <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b6 c0       	rjmp	.+364    	; 0x2fa <__bad_interrupt>
     18e:	00 00       	nop
     190:	b4 c0       	rjmp	.+360    	; 0x2fa <__bad_interrupt>
     192:	00 00       	nop
     194:	b2 c0       	rjmp	.+356    	; 0x2fa <__bad_interrupt>
     196:	00 00       	nop
     198:	b0 c0       	rjmp	.+352    	; 0x2fa <__bad_interrupt>
     19a:	00 00       	nop
     19c:	ae c0       	rjmp	.+348    	; 0x2fa <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ac c0       	rjmp	.+344    	; 0x2fa <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	aa c0       	rjmp	.+340    	; 0x2fa <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a8 c0       	rjmp	.+336    	; 0x2fa <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a6 c0       	rjmp	.+332    	; 0x2fa <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a4 c0       	rjmp	.+328    	; 0x2fa <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	a2 c0       	rjmp	.+324    	; 0x2fa <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	a0 c0       	rjmp	.+320    	; 0x2fa <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9e c0       	rjmp	.+316    	; 0x2fa <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	9c c0       	rjmp	.+312    	; 0x2fa <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	9a c0       	rjmp	.+308    	; 0x2fa <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	98 c0       	rjmp	.+304    	; 0x2fa <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	96 c0       	rjmp	.+300    	; 0x2fa <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	94 c0       	rjmp	.+296    	; 0x2fa <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	92 c0       	rjmp	.+292    	; 0x2fa <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	90 c0       	rjmp	.+288    	; 0x2fa <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8e c0       	rjmp	.+284    	; 0x2fa <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	8c c0       	rjmp	.+280    	; 0x2fa <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	8a c0       	rjmp	.+276    	; 0x2fa <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	88 c0       	rjmp	.+272    	; 0x2fa <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	86 c0       	rjmp	.+268    	; 0x2fa <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	84 c0       	rjmp	.+264    	; 0x2fa <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__vector_125>
     1f8:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__vector_126>
     1fc:	fb 09       	sbc	r31, r11
     1fe:	6c 0a       	sbc	r6, r28
     200:	6c 0a       	sbc	r6, r28
     202:	8d 09       	sbc	r24, r13
     204:	6c 0a       	sbc	r6, r28
     206:	6c 0a       	sbc	r6, r28
     208:	6c 0a       	sbc	r6, r28
     20a:	6c 0a       	sbc	r6, r28
     20c:	6c 0a       	sbc	r6, r28
     20e:	6c 0a       	sbc	r6, r28
     210:	6c 0a       	sbc	r6, r28
     212:	6c 0a       	sbc	r6, r28
     214:	6c 0a       	sbc	r6, r28
     216:	6c 0a       	sbc	r6, r28
     218:	6c 0a       	sbc	r6, r28
     21a:	6c 0a       	sbc	r6, r28
     21c:	6c 0a       	sbc	r6, r28
     21e:	6c 0a       	sbc	r6, r28
     220:	a2 09       	sbc	r26, r2
     222:	6c 0a       	sbc	r6, r28
     224:	6c 0a       	sbc	r6, r28
     226:	6c 0a       	sbc	r6, r28
     228:	6c 0a       	sbc	r6, r28
     22a:	6c 0a       	sbc	r6, r28
     22c:	6c 0a       	sbc	r6, r28
     22e:	6c 0a       	sbc	r6, r28
     230:	f5 09       	sbc	r31, r5
     232:	4f 0a       	sbc	r4, r31
     234:	6c 0a       	sbc	r6, r28
     236:	6c 0a       	sbc	r6, r28
     238:	5a 0a       	sbc	r5, r26
     23a:	6c 0a       	sbc	r6, r28
     23c:	6c 0a       	sbc	r6, r28
     23e:	6c 0a       	sbc	r6, r28
     240:	6c 0a       	sbc	r6, r28
     242:	6c 0a       	sbc	r6, r28
     244:	6c 0a       	sbc	r6, r28
     246:	0c 0a       	sbc	r0, r28
     248:	6c 0a       	sbc	r6, r28
     24a:	6c 0a       	sbc	r6, r28
     24c:	66 0a       	sbc	r6, r22
     24e:	6c 0a       	sbc	r6, r28
     250:	69 0a       	sbc	r6, r25
     252:	6c 0a       	sbc	r6, r28
     254:	6c 0a       	sbc	r6, r28
     256:	6c 0a       	sbc	r6, r28
     258:	6c 0a       	sbc	r6, r28
     25a:	63 0a       	sbc	r6, r19
     25c:	6c 0a       	sbc	r6, r28
     25e:	6c 0a       	sbc	r6, r28
     260:	6c 0a       	sbc	r6, r28
     262:	6c 0a       	sbc	r6, r28
     264:	6c 0a       	sbc	r6, r28
     266:	6c 0a       	sbc	r6, r28
     268:	6c 0a       	sbc	r6, r28
     26a:	6c 0a       	sbc	r6, r28
     26c:	6c 0a       	sbc	r6, r28
     26e:	6c 0a       	sbc	r6, r28
     270:	6c 0a       	sbc	r6, r28
     272:	6c 0a       	sbc	r6, r28
     274:	6c 0a       	sbc	r6, r28
     276:	6c 0a       	sbc	r6, r28
     278:	6c 0a       	sbc	r6, r28
     27a:	6c 0a       	sbc	r6, r28
     27c:	6c 0a       	sbc	r6, r28
     27e:	6c 0a       	sbc	r6, r28
     280:	6c 0a       	sbc	r6, r28
     282:	6c 0a       	sbc	r6, r28
     284:	6c 0a       	sbc	r6, r28
     286:	6c 0a       	sbc	r6, r28
     288:	6c 0a       	sbc	r6, r28
     28a:	6c 0a       	sbc	r6, r28
     28c:	6c 0a       	sbc	r6, r28
     28e:	6c 0a       	sbc	r6, r28
     290:	6c 0a       	sbc	r6, r28
     292:	6c 0a       	sbc	r6, r28
     294:	6c 0a       	sbc	r6, r28
     296:	6c 0a       	sbc	r6, r28
     298:	6c 0a       	sbc	r6, r28
     29a:	6c 0a       	sbc	r6, r28
     29c:	6c 0a       	sbc	r6, r28
     29e:	6c 0a       	sbc	r6, r28
     2a0:	6c 0a       	sbc	r6, r28
     2a2:	6c 0a       	sbc	r6, r28
     2a4:	6c 0a       	sbc	r6, r28
     2a6:	6c 0a       	sbc	r6, r28
     2a8:	6c 0a       	sbc	r6, r28
     2aa:	6c 0a       	sbc	r6, r28
     2ac:	6c 0a       	sbc	r6, r28
     2ae:	6c 0a       	sbc	r6, r28
     2b0:	f8 09       	sbc	r31, r8
     2b2:	00 11       	cpse	r16, r0
     2b4:	03 11       	cpse	r16, r3
     2b6:	06 11       	cpse	r16, r6
     2b8:	09 11       	cpse	r16, r9
     2ba:	0c 11       	cpse	r16, r12
     2bc:	0f 11       	cpse	r16, r15
     2be:	12 11       	cpse	r17, r2

000002c0 <__ctors_end>:
     2c0:	11 24       	eor	r1, r1
     2c2:	1f be       	out	0x3f, r1	; 63
     2c4:	cf ef       	ldi	r28, 0xFF	; 255
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	df e2       	ldi	r29, 0x2F	; 47
     2ca:	de bf       	out	0x3e, r29	; 62

000002cc <__do_copy_data>:
     2cc:	10 e2       	ldi	r17, 0x20	; 32
     2ce:	a0 e0       	ldi	r26, 0x00	; 0
     2d0:	b0 e2       	ldi	r27, 0x20	; 32
     2d2:	ea e7       	ldi	r30, 0x7A	; 122
     2d4:	f1 e3       	ldi	r31, 0x31	; 49
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__do_copy_data+0x10>
     2d8:	05 90       	lpm	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	aa 3d       	cpi	r26, 0xDA	; 218
     2de:	b1 07       	cpc	r27, r17
     2e0:	d9 f7       	brne	.-10     	; 0x2d8 <__do_copy_data+0xc>

000002e2 <__do_clear_bss>:
     2e2:	24 e2       	ldi	r18, 0x24	; 36
     2e4:	aa ed       	ldi	r26, 0xDA	; 218
     2e6:	b0 e2       	ldi	r27, 0x20	; 32
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <.do_clear_bss_start>

000002ea <.do_clear_bss_loop>:
     2ea:	1d 92       	st	X+, r1

000002ec <.do_clear_bss_start>:
     2ec:	a1 39       	cpi	r26, 0x91	; 145
     2ee:	b2 07       	cpc	r27, r18
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <.do_clear_bss_loop>
     2f2:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <main>
     2f6:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <_exit>

000002fa <__bad_interrupt>:
     2fa:	82 ce       	rjmp	.-764    	; 0x0 <__vectors>

000002fc <ui_init>:
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     2fc:	e0 e0       	ldi	r30, 0x00	; 0
     2fe:	f6 e0       	ldi	r31, 0x06	; 6
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	86 83       	std	Z+6, r24	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     304:	82 e0       	ldi	r24, 0x02	; 2
     306:	85 83       	std	Z+5, r24	; 0x05
     308:	84 e0       	ldi	r24, 0x04	; 4
     30a:	85 83       	std	Z+5, r24	; 0x05
     30c:	88 e0       	ldi	r24, 0x08	; 8
     30e:	85 83       	std	Z+5, r24	; 0x05
     310:	08 95       	ret

00000312 <ui_powerdown>:
     312:	e0 e0       	ldi	r30, 0x00	; 0
     314:	f6 e0       	ldi	r31, 0x06	; 6
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	85 83       	std	Z+5, r24	; 0x05
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	85 83       	std	Z+5, r24	; 0x05
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	85 83       	std	Z+5, r24	; 0x05
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	85 83       	std	Z+5, r24	; 0x05
     326:	08 95       	ret

00000328 <ui_wakeup>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     32e:	08 95       	ret

00000330 <ui_start_read>:
     330:	84 e0       	ldi	r24, 0x04	; 4
     332:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     336:	08 95       	ret

00000338 <ui_stop_read>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     338:	84 e0       	ldi	r24, 0x04	; 4
     33a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     33e:	08 95       	ret

00000340 <ui_start_write>:
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     346:	08 95       	ret

00000348 <ui_stop_write>:
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     348:	88 e0       	ldi	r24, 0x08	; 8
     34a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     34e:	08 95       	ret

00000350 <ui_process>:
{
	LED_Off(LED3_GPIO);
}

void ui_process(uint16_t framenumber)
{
     350:	ac 01       	movw	r20, r24
	if ((framenumber % 1000) == 0) {
     352:	9c 01       	movw	r18, r24
     354:	36 95       	lsr	r19
     356:	27 95       	ror	r18
     358:	36 95       	lsr	r19
     35a:	27 95       	ror	r18
     35c:	36 95       	lsr	r19
     35e:	27 95       	ror	r18
     360:	a5 ec       	ldi	r26, 0xC5	; 197
     362:	b0 e2       	ldi	r27, 0x20	; 32
     364:	0e 94 a3 18 	call	0x3146	; 0x3146 <__umulhisi3>
     368:	9c 01       	movw	r18, r24
     36a:	32 95       	swap	r19
     36c:	22 95       	swap	r18
     36e:	2f 70       	andi	r18, 0x0F	; 15
     370:	23 27       	eor	r18, r19
     372:	3f 70       	andi	r19, 0x0F	; 15
     374:	23 27       	eor	r18, r19
     376:	68 ee       	ldi	r22, 0xE8	; 232
     378:	73 e0       	ldi	r23, 0x03	; 3
     37a:	26 9f       	mul	r18, r22
     37c:	c0 01       	movw	r24, r0
     37e:	27 9f       	mul	r18, r23
     380:	90 0d       	add	r25, r0
     382:	36 9f       	mul	r19, r22
     384:	90 0d       	add	r25, r0
     386:	11 24       	eor	r1, r1
     388:	9a 01       	movw	r18, r20
     38a:	28 1b       	sub	r18, r24
     38c:	39 0b       	sbc	r19, r25
     38e:	21 f4       	brne	.+8      	; 0x398 <ui_process+0x48>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     396:	08 95       	ret
		LED_On(LED1_GPIO);
	}
	if ((framenumber % 1000) == 500) {
     398:	24 3f       	cpi	r18, 0xF4	; 244
     39a:	31 40       	sbci	r19, 0x01	; 1
     39c:	19 f4       	brne	.+6      	; 0x3a4 <ui_process+0x54>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     3a4:	08 95       	ret

000003a6 <at45dbx_chipselect_df>:
		at45dbx_chipselect_df(AT45DBX_CHIP_UNSELECT(at45dbx_gl_ptr_mem) >> AT45DBX_MEM_SIZE, false);
		// Memory busy.
		at45dbx_busy = true;
	}
	return true;
}
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	66 23       	and	r22, r22
     3b4:	a9 f0       	breq	.+42     	; 0x3e0 <at45dbx_chipselect_df+0x3a>
     3b6:	81 11       	cpse	r24, r1
     3b8:	1a c0       	rjmp	.+52     	; 0x3ee <at45dbx_chipselect_df+0x48>
     3ba:	c1 2c       	mov	r12, r1
     3bc:	d1 2c       	mov	r13, r1
     3be:	76 01       	movw	r14, r12
     3c0:	00 e0       	ldi	r16, 0x00	; 0
     3c2:	1b e1       	ldi	r17, 0x1B	; 27
     3c4:	27 eb       	ldi	r18, 0xB7	; 183
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e2       	ldi	r23, 0x20	; 32
     3ce:	80 ec       	ldi	r24, 0xC0	; 192
     3d0:	98 e0       	ldi	r25, 0x08	; 8
     3d2:	aa d4       	rcall	.+2388   	; 0xd28 <spi_master_setup_device>
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	80 ec       	ldi	r24, 0xC0	; 192
     3da:	98 e0       	ldi	r25, 0x08	; 8
     3dc:	e6 d4       	rcall	.+2508   	; 0xdaa <spi_select_device>
     3de:	07 c0       	rjmp	.+14     	; 0x3ee <at45dbx_chipselect_df+0x48>
     3e0:	81 11       	cpse	r24, r1
     3e2:	05 c0       	rjmp	.+10     	; 0x3ee <at45dbx_chipselect_df+0x48>
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e2       	ldi	r23, 0x20	; 32
     3e8:	80 ec       	ldi	r24, 0xC0	; 192
     3ea:	98 e0       	ldi	r25, 0x08	; 8
     3ec:	f4 d4       	rcall	.+2536   	; 0xdd6 <spi_deselect_device>
     3ee:	1f 91       	pop	r17
     3f0:	0f 91       	pop	r16
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	08 95       	ret

000003fc <at45dbx_wait_ready>:
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	00 d0       	rcall	.+0      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     40a:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     40e:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     412:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     416:	07 2e       	mov	r0, r23
     418:	73 e1       	ldi	r23, 0x13	; 19
     41a:	b6 95       	lsr	r27
     41c:	a7 95       	ror	r26
     41e:	97 95       	ror	r25
     420:	87 95       	ror	r24
     422:	7a 95       	dec	r23
     424:	d1 f7       	brne	.-12     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
     426:	70 2d       	mov	r23, r0
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	bd df       	rcall	.-134    	; 0x3a6 <at45dbx_chipselect_df>
     42c:	87 ed       	ldi	r24, 0xD7	; 215
     42e:	8a 83       	std	Y+2, r24	; 0x02
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	be 01       	movw	r22, r28
     436:	6e 5f       	subi	r22, 0xFE	; 254
     438:	7f 4f       	sbci	r23, 0xFF	; 255
     43a:	80 ec       	ldi	r24, 0xC0	; 192
     43c:	98 e0       	ldi	r25, 0x08	; 8
     43e:	93 d4       	rcall	.+2342   	; 0xd66 <spi_write_packet>
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	be 01       	movw	r22, r28
     446:	6f 5f       	subi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	80 ec       	ldi	r24, 0xC0	; 192
     44c:	98 e0       	ldi	r25, 0x08	; 8
     44e:	9a d4       	rcall	.+2356   	; 0xd84 <spi_read_packet>
     450:	89 81       	ldd	r24, Y+1	; 0x01
     452:	88 23       	and	r24, r24
     454:	ac f7       	brge	.-22     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     456:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     45a:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     45e:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     462:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     466:	07 2e       	mov	r0, r23
     468:	73 e1       	ldi	r23, 0x13	; 19
     46a:	b6 95       	lsr	r27
     46c:	a7 95       	ror	r26
     46e:	97 95       	ror	r25
     470:	87 95       	ror	r24
     472:	7a 95       	dec	r23
     474:	d1 f7       	brne	.-12     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
     476:	70 2d       	mov	r23, r0
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	95 df       	rcall	.-214    	; 0x3a6 <at45dbx_chipselect_df>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <at45dbx_init>:
     486:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     48a:	86 fd       	sbrc	r24, 6
     48c:	08 c0       	rjmp	.+16     	; 0x49e <at45dbx_init+0x18>
     48e:	80 ec       	ldi	r24, 0xC0	; 192
     490:	98 e0       	ldi	r25, 0x08	; 8
     492:	33 d4       	rcall	.+2150   	; 0xcfa <spi_master_init>
     494:	e0 ec       	ldi	r30, 0xC0	; 192
     496:	f8 e0       	ldi	r31, 0x08	; 8
     498:	80 81       	ld	r24, Z
     49a:	80 64       	ori	r24, 0x40	; 64
     49c:	80 83       	st	Z, r24
     49e:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <at45dbx_busy>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	08 95       	ret

000004a6 <at45dbx_mem_check>:
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <at45dbx_mem_check+0x6>
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	19 82       	std	Y+1, r1	; 0x01
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	77 df       	rcall	.-274    	; 0x3a6 <at45dbx_chipselect_df>
     4b8:	87 ed       	ldi	r24, 0xD7	; 215
     4ba:	8a 83       	std	Y+2, r24	; 0x02
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	be 01       	movw	r22, r28
     4c2:	6e 5f       	subi	r22, 0xFE	; 254
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	80 ec       	ldi	r24, 0xC0	; 192
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	4d d4       	rcall	.+2202   	; 0xd66 <spi_write_packet>
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	80 ec       	ldi	r24, 0xC0	; 192
     4d8:	98 e0       	ldi	r25, 0x08	; 8
     4da:	54 d4       	rcall	.+2216   	; 0xd84 <spi_read_packet>
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	62 df       	rcall	.-316    	; 0x3a6 <at45dbx_chipselect_df>
     4e2:	29 81       	ldd	r18, Y+1	; 0x01
     4e4:	2c 73       	andi	r18, 0x3C	; 60
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	2c 31       	cpi	r18, 0x1C	; 28
     4ec:	31 05       	cpc	r19, r1
     4ee:	0c f4       	brge	.+2      	; 0x4f2 <at45dbx_mem_check+0x4c>
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <at45dbx_read_byte_open>:
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	2c 97       	sbiw	r28, 0x0c	; 12
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	61 15       	cp	r22, r1
     50e:	71 05       	cpc	r23, r1
     510:	28 e0       	ldi	r18, 0x08	; 8
     512:	82 07       	cpc	r24, r18
     514:	91 05       	cpc	r25, r1
     516:	08 f0       	brcs	.+2      	; 0x51a <at45dbx_read_byte_open+0x1e>
     518:	8c c0       	rjmp	.+280    	; 0x632 <at45dbx_read_byte_open+0x136>
     51a:	dc 01       	movw	r26, r24
     51c:	cb 01       	movw	r24, r22
     51e:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <__data_end>
     522:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <__data_end+0x1>
     526:	a0 93 dc 20 	sts	0x20DC, r26	; 0x8020dc <__data_end+0x2>
     52a:	b0 93 dd 20 	sts	0x20DD, r27	; 0x8020dd <__data_end+0x3>
     52e:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <at45dbx_busy>
     532:	81 11       	cpse	r24, r1
     534:	63 df       	rcall	.-314    	; 0x3fc <at45dbx_wait_ready>
     536:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <at45dbx_busy>
     53a:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     53e:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     542:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     546:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     54a:	07 2e       	mov	r0, r23
     54c:	73 e1       	ldi	r23, 0x13	; 19
     54e:	b6 95       	lsr	r27
     550:	a7 95       	ror	r26
     552:	97 95       	ror	r25
     554:	87 95       	ror	r24
     556:	7a 95       	dec	r23
     558:	d1 f7       	brne	.-12     	; 0x54e <at45dbx_read_byte_open+0x52>
     55a:	70 2d       	mov	r23, r0
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	23 df       	rcall	.-442    	; 0x3a6 <at45dbx_chipselect_df>
     560:	82 ed       	ldi	r24, 0xD2	; 210
     562:	8c 87       	std	Y+12, r24	; 0x0c
     564:	41 e0       	ldi	r20, 0x01	; 1
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	be 01       	movw	r22, r28
     56a:	64 5f       	subi	r22, 0xF4	; 244
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	80 ec       	ldi	r24, 0xC0	; 192
     570:	98 e0       	ldi	r25, 0x08	; 8
     572:	f9 d3       	rcall	.+2034   	; 0xd66 <spi_write_packet>
     574:	40 91 da 20 	lds	r20, 0x20DA	; 0x8020da <__data_end>
     578:	50 91 db 20 	lds	r21, 0x20DB	; 0x8020db <__data_end+0x1>
     57c:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <__data_end+0x2>
     580:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <__data_end+0x3>
     584:	bb 27       	eor	r27, r27
     586:	a7 2f       	mov	r26, r23
     588:	96 2f       	mov	r25, r22
     58a:	85 2f       	mov	r24, r21
     58c:	07 2e       	mov	r0, r23
     58e:	79 e0       	ldi	r23, 0x09	; 9
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 1f       	adc	r26, r26
     596:	bb 1f       	adc	r27, r27
     598:	7a 95       	dec	r23
     59a:	d1 f7       	brne	.-12     	; 0x590 <at45dbx_read_byte_open+0x94>
     59c:	70 2d       	mov	r23, r0
     59e:	84 2b       	or	r24, r20
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	9a 83       	std	Y+2, r25	; 0x02
     5a4:	ab 83       	std	Y+3, r26	; 0x03
     5a6:	bc 83       	std	Y+4, r27	; 0x04
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	8b 87       	std	Y+11, r24	; 0x0b
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	be 01       	movw	r22, r28
     5b2:	65 5f       	subi	r22, 0xF5	; 245
     5b4:	7f 4f       	sbci	r23, 0xFF	; 255
     5b6:	80 ec       	ldi	r24, 0xC0	; 192
     5b8:	98 e0       	ldi	r25, 0x08	; 8
     5ba:	d5 d3       	rcall	.+1962   	; 0xd66 <spi_write_packet>
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	8a 87       	std	Y+10, r24	; 0x0a
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	be 01       	movw	r22, r28
     5c6:	66 5f       	subi	r22, 0xF6	; 246
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	80 ec       	ldi	r24, 0xC0	; 192
     5cc:	98 e0       	ldi	r25, 0x08	; 8
     5ce:	cb d3       	rcall	.+1942   	; 0xd66 <spi_write_packet>
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	89 87       	std	Y+9, r24	; 0x09
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	be 01       	movw	r22, r28
     5da:	67 5f       	subi	r22, 0xF7	; 247
     5dc:	7f 4f       	sbci	r23, 0xFF	; 255
     5de:	80 ec       	ldi	r24, 0xC0	; 192
     5e0:	98 e0       	ldi	r25, 0x08	; 8
     5e2:	c1 d3       	rcall	.+1922   	; 0xd66 <spi_write_packet>
     5e4:	15 e5       	ldi	r17, 0x55	; 85
     5e6:	18 87       	std	Y+8, r17	; 0x08
     5e8:	41 e0       	ldi	r20, 0x01	; 1
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	be 01       	movw	r22, r28
     5ee:	68 5f       	subi	r22, 0xF8	; 248
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	98 e0       	ldi	r25, 0x08	; 8
     5f6:	b7 d3       	rcall	.+1902   	; 0xd66 <spi_write_packet>
     5f8:	1f 83       	std	Y+7, r17	; 0x07
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	be 01       	movw	r22, r28
     600:	69 5f       	subi	r22, 0xF9	; 249
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	80 ec       	ldi	r24, 0xC0	; 192
     606:	98 e0       	ldi	r25, 0x08	; 8
     608:	ae d3       	rcall	.+1884   	; 0xd66 <spi_write_packet>
     60a:	1e 83       	std	Y+6, r17	; 0x06
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	be 01       	movw	r22, r28
     612:	6a 5f       	subi	r22, 0xFA	; 250
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	80 ec       	ldi	r24, 0xC0	; 192
     618:	98 e0       	ldi	r25, 0x08	; 8
     61a:	a5 d3       	rcall	.+1866   	; 0xd66 <spi_write_packet>
     61c:	1d 83       	std	Y+5, r17	; 0x05
     61e:	41 e0       	ldi	r20, 0x01	; 1
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	be 01       	movw	r22, r28
     624:	6b 5f       	subi	r22, 0xFB	; 251
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	98 e0       	ldi	r25, 0x08	; 8
     62c:	9c d3       	rcall	.+1848   	; 0xd66 <spi_write_packet>
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	01 c0       	rjmp	.+2      	; 0x634 <at45dbx_read_byte_open+0x138>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	2c 96       	adiw	r28, 0x0c	; 12
     636:	cd bf       	out	0x3d, r28	; 61
     638:	de bf       	out	0x3e, r29	; 62
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	1f 91       	pop	r17
     640:	08 95       	ret

00000642 <at45dbx_read_sector_open>:
     642:	05 2e       	mov	r0, r21
     644:	59 e0       	ldi	r21, 0x09	; 9
     646:	66 0f       	add	r22, r22
     648:	77 1f       	adc	r23, r23
     64a:	88 1f       	adc	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	5a 95       	dec	r21
     650:	d1 f7       	brne	.-12     	; 0x646 <at45dbx_read_sector_open+0x4>
     652:	50 2d       	mov	r21, r0
     654:	61 15       	cp	r22, r1
     656:	71 05       	cpc	r23, r1
     658:	28 e0       	ldi	r18, 0x08	; 8
     65a:	82 07       	cpc	r24, r18
     65c:	91 05       	cpc	r25, r1
     65e:	10 f4       	brcc	.+4      	; 0x664 <at45dbx_read_sector_open+0x22>
     660:	4d cf       	rjmp	.-358    	; 0x4fc <at45dbx_read_byte_open>
     662:	08 95       	ret
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret

00000668 <at45dbx_read_close>:
     668:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     66c:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     670:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     674:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	a1 05       	cpc	r26, r1
     67c:	b1 05       	cpc	r27, r1
     67e:	69 f0       	breq	.+26     	; 0x69a <at45dbx_read_close+0x32>
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	a1 09       	sbc	r26, r1
     684:	b1 09       	sbc	r27, r1
     686:	07 2e       	mov	r0, r23
     688:	73 e1       	ldi	r23, 0x13	; 19
     68a:	b6 95       	lsr	r27
     68c:	a7 95       	ror	r26
     68e:	97 95       	ror	r25
     690:	87 95       	ror	r24
     692:	7a 95       	dec	r23
     694:	d1 f7       	brne	.-12     	; 0x68a <at45dbx_read_close+0x22>
     696:	70 2d       	mov	r23, r0
     698:	01 c0       	rjmp	.+2      	; 0x69c <at45dbx_read_close+0x34>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	83 de       	rcall	.-762    	; 0x3a6 <at45dbx_chipselect_df>
     6a0:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <at45dbx_busy>
     6a4:	08 95       	ret

000006a6 <at45dbx_write_byte_open>:
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	28 97       	sbiw	r28, 0x08	; 8
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	61 15       	cp	r22, r1
     6b6:	71 05       	cpc	r23, r1
     6b8:	28 e0       	ldi	r18, 0x08	; 8
     6ba:	82 07       	cpc	r24, r18
     6bc:	91 05       	cpc	r25, r1
     6be:	08 f0       	brcs	.+2      	; 0x6c2 <at45dbx_write_byte_open+0x1c>
     6c0:	67 c0       	rjmp	.+206    	; 0x790 <at45dbx_write_byte_open+0xea>
     6c2:	dc 01       	movw	r26, r24
     6c4:	cb 01       	movw	r24, r22
     6c6:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <__data_end>
     6ca:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <__data_end+0x1>
     6ce:	a0 93 dc 20 	sts	0x20DC, r26	; 0x8020dc <__data_end+0x2>
     6d2:	b0 93 dd 20 	sts	0x20DD, r27	; 0x8020dd <__data_end+0x3>
     6d6:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <at45dbx_busy>
     6da:	81 11       	cpse	r24, r1
     6dc:	8f de       	rcall	.-738    	; 0x3fc <at45dbx_wait_ready>
     6de:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <at45dbx_busy>
     6e2:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     6e6:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     6ea:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     6ee:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     6f2:	07 2e       	mov	r0, r23
     6f4:	73 e1       	ldi	r23, 0x13	; 19
     6f6:	b6 95       	lsr	r27
     6f8:	a7 95       	ror	r26
     6fa:	97 95       	ror	r25
     6fc:	87 95       	ror	r24
     6fe:	7a 95       	dec	r23
     700:	d1 f7       	brne	.-12     	; 0x6f6 <at45dbx_write_byte_open+0x50>
     702:	70 2d       	mov	r23, r0
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	4f de       	rcall	.-866    	; 0x3a6 <at45dbx_chipselect_df>
     708:	82 e8       	ldi	r24, 0x82	; 130
     70a:	88 87       	std	Y+8, r24	; 0x08
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	be 01       	movw	r22, r28
     712:	68 5f       	subi	r22, 0xF8	; 248
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	80 ec       	ldi	r24, 0xC0	; 192
     718:	98 e0       	ldi	r25, 0x08	; 8
     71a:	25 d3       	rcall	.+1610   	; 0xd66 <spi_write_packet>
     71c:	40 91 da 20 	lds	r20, 0x20DA	; 0x8020da <__data_end>
     720:	50 91 db 20 	lds	r21, 0x20DB	; 0x8020db <__data_end+0x1>
     724:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <__data_end+0x2>
     728:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <__data_end+0x3>
     72c:	bb 27       	eor	r27, r27
     72e:	a7 2f       	mov	r26, r23
     730:	96 2f       	mov	r25, r22
     732:	85 2f       	mov	r24, r21
     734:	07 2e       	mov	r0, r23
     736:	79 e0       	ldi	r23, 0x09	; 9
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	aa 1f       	adc	r26, r26
     73e:	bb 1f       	adc	r27, r27
     740:	7a 95       	dec	r23
     742:	d1 f7       	brne	.-12     	; 0x738 <at45dbx_write_byte_open+0x92>
     744:	70 2d       	mov	r23, r0
     746:	84 2b       	or	r24, r20
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	9a 83       	std	Y+2, r25	; 0x02
     74c:	ab 83       	std	Y+3, r26	; 0x03
     74e:	bc 83       	std	Y+4, r27	; 0x04
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	8f 83       	std	Y+7, r24	; 0x07
     754:	41 e0       	ldi	r20, 0x01	; 1
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	be 01       	movw	r22, r28
     75a:	69 5f       	subi	r22, 0xF9	; 249
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	80 ec       	ldi	r24, 0xC0	; 192
     760:	98 e0       	ldi	r25, 0x08	; 8
     762:	01 d3       	rcall	.+1538   	; 0xd66 <spi_write_packet>
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	8e 83       	std	Y+6, r24	; 0x06
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	be 01       	movw	r22, r28
     76e:	6a 5f       	subi	r22, 0xFA	; 250
     770:	7f 4f       	sbci	r23, 0xFF	; 255
     772:	80 ec       	ldi	r24, 0xC0	; 192
     774:	98 e0       	ldi	r25, 0x08	; 8
     776:	f7 d2       	rcall	.+1518   	; 0xd66 <spi_write_packet>
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	8d 83       	std	Y+5, r24	; 0x05
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	be 01       	movw	r22, r28
     782:	6b 5f       	subi	r22, 0xFB	; 251
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	80 ec       	ldi	r24, 0xC0	; 192
     788:	98 e0       	ldi	r25, 0x08	; 8
     78a:	ed d2       	rcall	.+1498   	; 0xd66 <spi_write_packet>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	01 c0       	rjmp	.+2      	; 0x792 <at45dbx_write_byte_open+0xec>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	28 96       	adiw	r28, 0x08	; 8
     794:	cd bf       	out	0x3d, r28	; 61
     796:	de bf       	out	0x3e, r29	; 62
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	08 95       	ret

0000079e <at45dbx_write_sector_open>:
     79e:	05 2e       	mov	r0, r21
     7a0:	59 e0       	ldi	r21, 0x09	; 9
     7a2:	66 0f       	add	r22, r22
     7a4:	77 1f       	adc	r23, r23
     7a6:	88 1f       	adc	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	5a 95       	dec	r21
     7ac:	d1 f7       	brne	.-12     	; 0x7a2 <at45dbx_write_sector_open+0x4>
     7ae:	50 2d       	mov	r21, r0
     7b0:	61 15       	cp	r22, r1
     7b2:	71 05       	cpc	r23, r1
     7b4:	28 e0       	ldi	r18, 0x08	; 8
     7b6:	82 07       	cpc	r24, r18
     7b8:	91 05       	cpc	r25, r1
     7ba:	10 f4       	brcc	.+4      	; 0x7c0 <at45dbx_write_sector_open+0x22>
     7bc:	74 cf       	rjmp	.-280    	; 0x6a6 <at45dbx_write_byte_open>
     7be:	08 95       	ret
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	08 95       	ret

000007c4 <at45dbx_write_close>:
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	1f 92       	push	r1
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     7d2:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     7d6:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     7da:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     7de:	ac 01       	movw	r20, r24
     7e0:	bd 01       	movw	r22, r26
     7e2:	51 70       	andi	r21, 0x01	; 1
     7e4:	66 27       	eor	r22, r22
     7e6:	77 27       	eor	r23, r23
     7e8:	45 2b       	or	r20, r21
     7ea:	46 2b       	or	r20, r22
     7ec:	47 2b       	or	r20, r23
     7ee:	29 f1       	breq	.+74     	; 0x83a <at45dbx_write_close+0x76>
     7f0:	19 82       	std	Y+1, r1	; 0x01
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	be 01       	movw	r22, r28
     7f8:	6f 5f       	subi	r22, 0xFF	; 255
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	80 ec       	ldi	r24, 0xC0	; 192
     7fe:	98 e0       	ldi	r25, 0x08	; 8
     800:	b2 d2       	rcall	.+1380   	; 0xd66 <spi_write_packet>
     802:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     806:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     80a:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     80e:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	a1 1d       	adc	r26, r1
     816:	b1 1d       	adc	r27, r1
     818:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <__data_end>
     81c:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <__data_end+0x1>
     820:	a0 93 dc 20 	sts	0x20DC, r26	; 0x8020dc <__data_end+0x2>
     824:	b0 93 dd 20 	sts	0x20DD, r27	; 0x8020dd <__data_end+0x3>
     828:	ac 01       	movw	r20, r24
     82a:	bd 01       	movw	r22, r26
     82c:	51 70       	andi	r21, 0x01	; 1
     82e:	66 27       	eor	r22, r22
     830:	77 27       	eor	r23, r23
     832:	45 2b       	or	r20, r21
     834:	46 2b       	or	r20, r22
     836:	47 2b       	or	r20, r23
     838:	d9 f6       	brne	.-74     	; 0x7f0 <at45dbx_write_close+0x2c>
     83a:	00 97       	sbiw	r24, 0x00	; 0
     83c:	a1 05       	cpc	r26, r1
     83e:	b1 05       	cpc	r27, r1
     840:	69 f0       	breq	.+26     	; 0x85c <at45dbx_write_close+0x98>
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	a1 09       	sbc	r26, r1
     846:	b1 09       	sbc	r27, r1
     848:	07 2e       	mov	r0, r23
     84a:	73 e1       	ldi	r23, 0x13	; 19
     84c:	b6 95       	lsr	r27
     84e:	a7 95       	ror	r26
     850:	97 95       	ror	r25
     852:	87 95       	ror	r24
     854:	7a 95       	dec	r23
     856:	d1 f7       	brne	.-12     	; 0x84c <at45dbx_write_close+0x88>
     858:	70 2d       	mov	r23, r0
     85a:	01 c0       	rjmp	.+2      	; 0x85e <at45dbx_write_close+0x9a>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	a2 dd       	rcall	.-1212   	; 0x3a6 <at45dbx_chipselect_df>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 de 20 	sts	0x20DE, r24	; 0x8020de <at45dbx_busy>
     868:	0f 90       	pop	r0
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <at45dbx_read_sector_to_ram>:
/*! \name Single-Sector Access Functions
 */

//! @{
bool at45dbx_read_sector_to_ram(void *ram)
{
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
	uint32_t end_addr=at45dbx_gl_ptr_mem+AT45DBX_SECTOR_SIZE;
     87e:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <__data_end>
     882:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <__data_end+0x1>
     886:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end+0x2>
     88a:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <__data_end+0x3>
     88e:	6b 01       	movw	r12, r22
     890:	7c 01       	movw	r14, r24
     892:	22 e0       	ldi	r18, 0x02	; 2
     894:	d2 0e       	add	r13, r18
     896:	e1 1c       	adc	r14, r1
     898:	f1 1c       	adc	r15, r1

	if (at45dbx_busy) {
     89a:	20 91 de 20 	lds	r18, 0x20DE	; 0x8020de <at45dbx_busy>
     89e:	22 23       	and	r18, r18
     8a0:	19 f0       	breq	.+6      	; 0x8a8 <at45dbx_read_sector_to_ram+0x38>
		// Being here, we know that we previously finished a page read.
		// => We have to access the next page.
		at45dbx_busy = false;
     8a2:	10 92 de 20 	sts	0x20DE, r1	; 0x8020de <at45dbx_busy>
		// Eventually select the next DF and open the next page.
		at45dbx_read_byte_open(at45dbx_gl_ptr_mem);
     8a6:	2a de       	rcall	.-940    	; 0x4fc <at45dbx_read_byte_open>
	}

	while(at45dbx_gl_ptr_mem<end_addr) {
     8a8:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     8ac:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     8b0:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     8b4:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     8b8:	8c 15       	cp	r24, r12
     8ba:	9d 05       	cpc	r25, r13
     8bc:	ae 05       	cpc	r26, r14
     8be:	bf 05       	cpc	r27, r15
     8c0:	88 f5       	brcc	.+98     	; 0x924 <at45dbx_read_sector_to_ram+0xb4>
 * \param len    Length of data
 * \pre The DataFlash should be selected first using at45dbx_spi_select_device
 */
inline void at45dbx_spi_read_packet(void const *data, size_t len)
{
	at45dbx_drv_read_packet(AT45DBX_SPI_MODULE, (uint8_t*)data, len);
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	51 e0       	ldi	r21, 0x01	; 1
     8c6:	be 01       	movw	r22, r28
     8c8:	80 ec       	ldi	r24, 0xC0	; 192
     8ca:	98 e0       	ldi	r25, 0x08	; 8
     8cc:	5b d2       	rcall	.+1206   	; 0xd84 <spi_read_packet>
#if (AT45DBX_PAGE_SIZE<AT45DBX_SECTOR_SIZE)
		at45dbx_spi_read_packet(ram,AT45DBX_PAGE_SIZE);
		at45dbx_gl_ptr_mem+=AT45DBX_PAGE_SIZE;
     8ce:	40 91 da 20 	lds	r20, 0x20DA	; 0x8020da <__data_end>
     8d2:	50 91 db 20 	lds	r21, 0x20DB	; 0x8020db <__data_end+0x1>
     8d6:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <__data_end+0x2>
     8da:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <__data_end+0x3>
     8de:	5f 5f       	subi	r21, 0xFF	; 255
     8e0:	6f 4f       	sbci	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	40 93 da 20 	sts	0x20DA, r20	; 0x8020da <__data_end>
     8e8:	50 93 db 20 	sts	0x20DB, r21	; 0x8020db <__data_end+0x1>
     8ec:	60 93 dc 20 	sts	0x20DC, r22	; 0x8020dc <__data_end+0x2>
     8f0:	70 93 dd 20 	sts	0x20DD, r23	; 0x8020dd <__data_end+0x3>
		ram=(void*)((uint8_t*)ram+(uint32_t)AT45DBX_PAGE_SIZE);
     8f4:	d3 95       	inc	r29
		at45dbx_read_close();
     8f6:	b8 de       	rcall	.-656    	; 0x668 <at45dbx_read_close>
		at45dbx_read_byte_open(at45dbx_gl_ptr_mem);
     8f8:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <__data_end>
     8fc:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <__data_end+0x1>
     900:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end+0x2>
     904:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <__data_end+0x3>
     908:	f9 dd       	rcall	.-1038   	; 0x4fc <at45dbx_read_byte_open>
		at45dbx_busy = false;
		// Eventually select the next DF and open the next page.
		at45dbx_read_byte_open(at45dbx_gl_ptr_mem);
	}

	while(at45dbx_gl_ptr_mem<end_addr) {
     90a:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     90e:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     912:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     916:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     91a:	8c 15       	cp	r24, r12
     91c:	9d 05       	cpc	r25, r13
     91e:	ae 05       	cpc	r26, r14
     920:	bf 05       	cpc	r27, r15
     922:	78 f2       	brcs	.-98     	; 0x8c2 <at45dbx_read_sector_to_ram+0x52>
		}

#endif
	}
	return true;
}
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	df 90       	pop	r13
     930:	cf 90       	pop	r12
     932:	08 95       	ret

00000934 <at45dbx_write_sector_from_ram>:


bool at45dbx_write_sector_from_ram(const void *ram)
{
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
	uint32_t end_addr=at45dbx_gl_ptr_mem+AT45DBX_SECTOR_SIZE;
     944:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <__data_end>
     948:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <__data_end+0x1>
     94c:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end+0x2>
     950:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <__data_end+0x3>
     954:	6b 01       	movw	r12, r22
     956:	7c 01       	movw	r14, r24
     958:	22 e0       	ldi	r18, 0x02	; 2
     95a:	d2 0e       	add	r13, r18
     95c:	e1 1c       	adc	r14, r1
     95e:	f1 1c       	adc	r15, r1
	// Memory busy.
	if (at45dbx_busy) {
     960:	20 91 de 20 	lds	r18, 0x20DE	; 0x8020de <at45dbx_busy>
     964:	21 11       	cpse	r18, r1
		//Being here, we know that we previously launched a page programming.
		//=> We have to access the next page.

		//Eventually select the next DF and open the next page.
		// NOTE: at45dbx_write_open input parameter is a sector.
		at45dbx_write_byte_open(at45dbx_gl_ptr_mem); // at45dbx_gl_ptr_mem / AT45DBX_SECTOR_SIZE.
     966:	9f de       	rcall	.-706    	; 0x6a6 <at45dbx_write_byte_open>
		 // If end of page reached,
		if (!Rd_bitfield(at45dbx_gl_ptr_mem, AT45DBX_MSK_PTR_BYTE)) {
			// unselect the DF memory at45dbx_gl_ptr_mem points to in order to program the page.
			at45dbx_chipselect_df(AT45DBX_CHIP_UNSELECT(at45dbx_gl_ptr_mem) >> AT45DBX_MEM_SIZE, false);
			// Memory busy.
			at45dbx_busy = true;
     968:	11 e0       	ldi	r17, 0x01	; 1
     96a:	44 c0       	rjmp	.+136    	; 0x9f4 <at45dbx_write_sector_from_ram+0xc0>
 * \pre The DataFlash should be selected first using at45dbx_spi_select_device
 *
 */
inline void at45dbx_spi_write_packet(void const *data, size_t len)
{
	at45dbx_drv_write_packet(AT45DBX_SPI_MODULE, (uint8_t*)data, len);
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	51 e0       	ldi	r21, 0x01	; 1
     970:	be 01       	movw	r22, r28
     972:	80 ec       	ldi	r24, 0xC0	; 192
     974:	98 e0       	ldi	r25, 0x08	; 8
     976:	f7 d1       	rcall	.+1006   	; 0xd66 <spi_write_packet>
		at45dbx_write_byte_open(at45dbx_gl_ptr_mem); // at45dbx_gl_ptr_mem / AT45DBX_SECTOR_SIZE.
	}
	while(at45dbx_gl_ptr_mem<end_addr) {
#if (AT45DBX_PAGE_SIZE<AT45DBX_SECTOR_SIZE)
		at45dbx_spi_write_packet(ram,AT45DBX_PAGE_SIZE);
		at45dbx_gl_ptr_mem+=AT45DBX_PAGE_SIZE;
     978:	40 91 da 20 	lds	r20, 0x20DA	; 0x8020da <__data_end>
     97c:	50 91 db 20 	lds	r21, 0x20DB	; 0x8020db <__data_end+0x1>
     980:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <__data_end+0x2>
     984:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <__data_end+0x3>
     988:	db 01       	movw	r26, r22
     98a:	ca 01       	movw	r24, r20
     98c:	9f 5f       	subi	r25, 0xFF	; 255
     98e:	af 4f       	sbci	r26, 0xFF	; 255
     990:	bf 4f       	sbci	r27, 0xFF	; 255
     992:	80 93 da 20 	sts	0x20DA, r24	; 0x8020da <__data_end>
     996:	90 93 db 20 	sts	0x20DB, r25	; 0x8020db <__data_end+0x1>
     99a:	a0 93 dc 20 	sts	0x20DC, r26	; 0x8020dc <__data_end+0x2>
     99e:	b0 93 dd 20 	sts	0x20DD, r27	; 0x8020dd <__data_end+0x3>
		ram=(void*)((uint8_t*)ram+(uint32_t)AT45DBX_PAGE_SIZE);
     9a2:	d3 95       	inc	r29
		 // If end of page reached,
		if (!Rd_bitfield(at45dbx_gl_ptr_mem, AT45DBX_MSK_PTR_BYTE)) {
     9a4:	81 11       	cpse	r24, r1
     9a6:	18 c0       	rjmp	.+48     	; 0x9d8 <at45dbx_write_sector_from_ram+0xa4>
			// unselect the DF memory at45dbx_gl_ptr_mem points to in order to program the page.
			at45dbx_chipselect_df(AT45DBX_CHIP_UNSELECT(at45dbx_gl_ptr_mem) >> AT45DBX_MEM_SIZE, false);
     9a8:	89 2b       	or	r24, r25
     9aa:	8a 2b       	or	r24, r26
     9ac:	8b 2b       	or	r24, r27
     9ae:	79 f0       	breq	.+30     	; 0x9ce <at45dbx_write_sector_from_ram+0x9a>
     9b0:	41 50       	subi	r20, 0x01	; 1
     9b2:	5f 4f       	sbci	r21, 0xFF	; 255
     9b4:	6f 4f       	sbci	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	03 2e       	mov	r0, r19
     9ba:	33 e1       	ldi	r19, 0x13	; 19
     9bc:	76 95       	lsr	r23
     9be:	67 95       	ror	r22
     9c0:	57 95       	ror	r21
     9c2:	47 95       	ror	r20
     9c4:	3a 95       	dec	r19
     9c6:	d1 f7       	brne	.-12     	; 0x9bc <at45dbx_write_sector_from_ram+0x88>
     9c8:	30 2d       	mov	r19, r0
     9ca:	84 2f       	mov	r24, r20
     9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <at45dbx_write_sector_from_ram+0x9c>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	e9 dc       	rcall	.-1582   	; 0x3a6 <at45dbx_chipselect_df>
			// Memory busy.
			at45dbx_busy = true;
     9d4:	10 93 de 20 	sts	0x20DE, r17	; 0x8020de <at45dbx_busy>
		}
		if(at45dbx_gl_ptr_mem<end_addr) {
     9d8:	60 91 da 20 	lds	r22, 0x20DA	; 0x8020da <__data_end>
     9dc:	70 91 db 20 	lds	r23, 0x20DB	; 0x8020db <__data_end+0x1>
     9e0:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end+0x2>
     9e4:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <__data_end+0x3>
     9e8:	6c 15       	cp	r22, r12
     9ea:	7d 05       	cpc	r23, r13
     9ec:	8e 05       	cpc	r24, r14
     9ee:	9f 05       	cpc	r25, r15
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <at45dbx_write_sector_from_ram+0xc0>
			at45dbx_write_byte_open(at45dbx_gl_ptr_mem);
     9f2:	59 de       	rcall	.-846    	; 0x6a6 <at45dbx_write_byte_open>

		//Eventually select the next DF and open the next page.
		// NOTE: at45dbx_write_open input parameter is a sector.
		at45dbx_write_byte_open(at45dbx_gl_ptr_mem); // at45dbx_gl_ptr_mem / AT45DBX_SECTOR_SIZE.
	}
	while(at45dbx_gl_ptr_mem<end_addr) {
     9f4:	80 91 da 20 	lds	r24, 0x20DA	; 0x8020da <__data_end>
     9f8:	90 91 db 20 	lds	r25, 0x20DB	; 0x8020db <__data_end+0x1>
     9fc:	a0 91 dc 20 	lds	r26, 0x20DC	; 0x8020dc <__data_end+0x2>
     a00:	b0 91 dd 20 	lds	r27, 0x20DD	; 0x8020dd <__data_end+0x3>
     a04:	8c 15       	cp	r24, r12
     a06:	9d 05       	cpc	r25, r13
     a08:	ae 05       	cpc	r26, r14
     a0a:	bf 05       	cpc	r27, r15
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <at45dbx_write_sector_from_ram+0xdc>
     a0e:	ae cf       	rjmp	.-164    	; 0x96c <at45dbx_write_sector_from_ram+0x38>
		}

#endif
	}
	return true;
}
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	08 95       	ret

00000a22 <at45dbx_test_unit_ready>:
}

bool at45dbx_unload(bool unload)
{
	b_at45dbx_unloaded = unload;
}
     a22:	80 91 df 22 	lds	r24, 0x22DF	; 0x8022df <b_at45dbx_unloaded>
     a26:	81 11       	cpse	r24, r1
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <at45dbx_test_unit_ready+0x12>
     a2a:	3d dd       	rcall	.-1414   	; 0x4a6 <at45dbx_mem_check>
     a2c:	81 11       	cpse	r24, r1
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <at45dbx_test_unit_ready+0x16>
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	08 95       	ret
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	08 95       	ret
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	08 95       	ret

00000a3c <at45dbx_read_capacity>:
     a3c:	4f ef       	ldi	r20, 0xFF	; 255
     a3e:	53 e0       	ldi	r21, 0x03	; 3
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	fc 01       	movw	r30, r24
     a46:	40 83       	st	Z, r20
     a48:	51 83       	std	Z+1, r21	; 0x01
     a4a:	62 83       	std	Z+2, r22	; 0x02
     a4c:	73 83       	std	Z+3, r23	; 0x03
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	08 95       	ret

00000a52 <at45dbx_wr_protect>:
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	08 95       	ret

00000a56 <at45dbx_removal>:
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	08 95       	ret

00000a5a <at45dbx_usb_read_10>:
 */
//! @{


Ctrl_status at45dbx_usb_read_10(U32 addr, U16 nb_sector)
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
	if (addr + nb_sector > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)){
     a62:	8b 01       	movw	r16, r22
     a64:	9c 01       	movw	r18, r24
     a66:	04 0f       	add	r16, r20
     a68:	15 1f       	adc	r17, r21
     a6a:	21 1d       	adc	r18, r1
     a6c:	31 1d       	adc	r19, r1
     a6e:	01 30       	cpi	r16, 0x01	; 1
     a70:	14 40       	sbci	r17, 0x04	; 4
     a72:	21 05       	cpc	r18, r1
     a74:	31 05       	cpc	r19, r1
     a76:	a0 f4       	brcc	.+40     	; 0xaa0 <at45dbx_usb_read_10+0x46>
     a78:	ea 01       	movw	r28, r20
		return CTRL_FAIL;
	}
	at45dbx_read_sector_open(addr);
     a7a:	e3 dd       	rcall	.-1082   	; 0x642 <at45dbx_read_sector_open>
	while (nb_sector--) {
     a7c:	20 97       	sbiw	r28, 0x00	; 0
     a7e:	69 f0       	breq	.+26     	; 0xa9a <at45dbx_usb_read_10+0x40>
		// Read the next sector.
		at45dbx_read_sector_to_ram(sector_buf);
     a80:	8f ed       	ldi	r24, 0xDF	; 223
     a82:	90 e2       	ldi	r25, 0x20	; 32
     a84:	f5 de       	rcall	.-534    	; 0x870 <at45dbx_read_sector_to_ram>
		udi_msc_trans_block( true, sector_buf, AT45DBX_SECTOR_SIZE, NULL);
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	52 e0       	ldi	r21, 0x02	; 2
     a8e:	6f ed       	ldi	r22, 0xDF	; 223
     a90:	70 e2       	ldi	r23, 0x20	; 32
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	d6 d5       	rcall	.+2988   	; 0x1642 <udi_msc_trans_block>
     a96:	21 97       	sbiw	r28, 0x01	; 1
{
	if (addr + nb_sector > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)){
		return CTRL_FAIL;
	}
	at45dbx_read_sector_open(addr);
	while (nb_sector--) {
     a98:	99 f7       	brne	.-26     	; 0xa80 <at45dbx_usb_read_10+0x26>
		// Read the next sector.
		at45dbx_read_sector_to_ram(sector_buf);
		udi_msc_trans_block( true, sector_buf, AT45DBX_SECTOR_SIZE, NULL);
	}
	at45dbx_read_close();
     a9a:	e6 dd       	rcall	.-1076   	; 0x668 <at45dbx_read_close>
	return CTRL_GOOD;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <at45dbx_usb_read_10+0x48>


Ctrl_status at45dbx_usb_read_10(U32 addr, U16 nb_sector)
{
	if (addr + nb_sector > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)){
		return CTRL_FAIL;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
		at45dbx_read_sector_to_ram(sector_buf);
		udi_msc_trans_block( true, sector_buf, AT45DBX_SECTOR_SIZE, NULL);
	}
	at45dbx_read_close();
	return CTRL_GOOD;
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <at45dbx_usb_write_10>:

Ctrl_status at45dbx_usb_write_10(U32 addr, U16 nb_sector)
{
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
	if (addr + nb_sector > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)){
     ab4:	8b 01       	movw	r16, r22
     ab6:	9c 01       	movw	r18, r24
     ab8:	04 0f       	add	r16, r20
     aba:	15 1f       	adc	r17, r21
     abc:	21 1d       	adc	r18, r1
     abe:	31 1d       	adc	r19, r1
     ac0:	01 30       	cpi	r16, 0x01	; 1
     ac2:	14 40       	sbci	r17, 0x04	; 4
     ac4:	21 05       	cpc	r18, r1
     ac6:	31 05       	cpc	r19, r1
     ac8:	a0 f4       	brcc	.+40     	; 0xaf2 <at45dbx_usb_write_10+0x46>
     aca:	ea 01       	movw	r28, r20
		return CTRL_FAIL;
	}

	at45dbx_write_sector_open(addr);
     acc:	68 de       	rcall	.-816    	; 0x79e <at45dbx_write_sector_open>
	while (nb_sector--) {
     ace:	20 97       	sbiw	r28, 0x00	; 0
     ad0:	69 f0       	breq	.+26     	; 0xaec <at45dbx_usb_write_10+0x40>
		// Write the next sector.
		udi_msc_trans_block( false, sector_buf, AT45DBX_SECTOR_SIZE, NULL);
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	52 e0       	ldi	r21, 0x02	; 2
     ada:	6f ed       	ldi	r22, 0xDF	; 223
     adc:	70 e2       	ldi	r23, 0x20	; 32
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	b0 d5       	rcall	.+2912   	; 0x1642 <udi_msc_trans_block>
		at45dbx_write_sector_from_ram(sector_buf);
     ae2:	8f ed       	ldi	r24, 0xDF	; 223
     ae4:	90 e2       	ldi	r25, 0x20	; 32
     ae6:	26 df       	rcall	.-436    	; 0x934 <at45dbx_write_sector_from_ram>
     ae8:	21 97       	sbiw	r28, 0x01	; 1
	if (addr + nb_sector > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)){
		return CTRL_FAIL;
	}

	at45dbx_write_sector_open(addr);
	while (nb_sector--) {
     aea:	99 f7       	brne	.-26     	; 0xad2 <at45dbx_usb_write_10+0x26>
		// Write the next sector.
		udi_msc_trans_block( false, sector_buf, AT45DBX_SECTOR_SIZE, NULL);
		at45dbx_write_sector_from_ram(sector_buf);
	}
	at45dbx_write_close();
     aec:	6b de       	rcall	.-810    	; 0x7c4 <at45dbx_write_close>
	return CTRL_GOOD;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <at45dbx_usb_write_10+0x48>
}

Ctrl_status at45dbx_usb_write_10(U32 addr, U16 nb_sector)
{
	if (addr + nb_sector > AT45DBX_MEM_CNT << (AT45DBX_MEM_SIZE - AT45DBX_SECTOR_BITS)){
		return CTRL_FAIL;
     af2:	81 e0       	ldi	r24, 0x01	; 1
		udi_msc_trans_block( false, sector_buf, AT45DBX_SECTOR_SIZE, NULL);
		at45dbx_write_sector_from_ram(sector_buf);
	}
	at45dbx_write_close();
	return CTRL_GOOD;
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <sysclk_init>:
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;

	cpu_irq_restore(flags);
}
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
     b0a:	27 97       	sbiw	r28, 0x07	; 7
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b16:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     b1a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     b1e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     b22:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     b26:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     b2a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
     b2e:	64 e0       	ldi	r22, 0x04	; 4
     b30:	81 e4       	ldi	r24, 0x41	; 65
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <ccp_write_io>
     b38:	6c e1       	ldi	r22, 0x1C	; 28
     b3a:	70 e0       	ldi	r23, 0x00	; 0
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <nvm_read_byte>
     b42:	8a 83       	std	Y+2, r24	; 0x02
     b44:	6d e1       	ldi	r22, 0x1D	; 29
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <nvm_read_byte>
     b4e:	89 83       	std	Y+1, r24	; 0x01
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	21 f4       	brne	.+8      	; 0xb60 <sysclk_init+0x62>
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	93 e2       	ldi	r25, 0x23	; 35
     b5c:	89 83       	std	Y+1, r24	; 0x01
     b5e:	9a 83       	std	Y+2, r25	; 0x02
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	8b 83       	std	Y+3, r24	; 0x03
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	e0 e6       	ldi	r30, 0x60	; 96
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	82 83       	std	Z+2, r24	; 0x02
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	83 83       	std	Z+3, r24	; 0x03
     b72:	8f b7       	in	r24, 0x3f	; 63
     b74:	8e 83       	std	Y+6, r24	; 0x06
     b76:	f8 94       	cli
     b78:	9e 81       	ldd	r25, Y+6	; 0x06
     b7a:	e0 e5       	ldi	r30, 0x50	; 80
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	82 60       	ori	r24, 0x02	; 2
     b82:	80 83       	st	Z, r24
     b84:	9f bf       	out	0x3f, r25	; 63
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	81 ff       	sbrs	r24, 1
     b8a:	fd cf       	rjmp	.-6      	; 0xb86 <sysclk_init+0x88>
     b8c:	8f b7       	in	r24, 0x3f	; 63
     b8e:	8d 83       	std	Y+5, r24	; 0x05
     b90:	f8 94       	cli
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	00 e5       	ldi	r16, 0x50	; 80
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	d8 01       	movw	r26, r16
     b9a:	16 96       	adiw	r26, 0x06	; 6
     b9c:	8c 91       	ld	r24, X
     b9e:	16 97       	sbiw	r26, 0x06	; 6
     ba0:	89 7f       	andi	r24, 0xF9	; 249
     ba2:	16 96       	adiw	r26, 0x06	; 6
     ba4:	8c 93       	st	X, r24
     ba6:	16 97       	sbiw	r26, 0x06	; 6
     ba8:	e0 e6       	ldi	r30, 0x60	; 96
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 e8       	ldi	r24, 0x80	; 128
     bae:	85 83       	std	Z+5, r24	; 0x05
     bb0:	8b eb       	ldi	r24, 0xBB	; 187
     bb2:	86 83       	std	Z+6, r24	; 0x06
     bb4:	16 96       	adiw	r26, 0x06	; 6
     bb6:	8c 91       	ld	r24, X
     bb8:	16 97       	sbiw	r26, 0x06	; 6
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	16 96       	adiw	r26, 0x06	; 6
     bbe:	8c 93       	st	X, r24
     bc0:	80 81       	ld	r24, Z
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	80 83       	st	Z, r24
     bc6:	9f bf       	out	0x3f, r25	; 63
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	80 e4       	ldi	r24, 0x40	; 64
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <ccp_write_io>
     bd2:	8f b7       	in	r24, 0x3f	; 63
     bd4:	8f 83       	std	Y+7, r24	; 0x07
     bd6:	f8 94       	cli
     bd8:	9f 81       	ldd	r25, Y+7	; 0x07
     bda:	f8 01       	movw	r30, r16
     bdc:	80 81       	ld	r24, Z
     bde:	8e 7f       	andi	r24, 0xFE	; 254
     be0:	80 83       	st	Z, r24
     be2:	9f bf       	out	0x3f, r25	; 63
     be4:	27 96       	adiw	r28, 0x07	; 7
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret

00000bf4 <sysclk_enable_module>:
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	1f 92       	push	r1
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9f b7       	in	r25, 0x3f	; 63
     c00:	99 83       	std	Y+1, r25	; 0x01
     c02:	f8 94       	cli
     c04:	99 81       	ldd	r25, Y+1	; 0x01
     c06:	e8 2f       	mov	r30, r24
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	e0 59       	subi	r30, 0x90	; 144
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	60 95       	com	r22
     c10:	80 81       	ld	r24, Z
     c12:	68 23       	and	r22, r24
     c14:	60 83       	st	Z, r22
     c16:	9f bf       	out	0x3f, r25	; 63
     c18:	0f 90       	pop	r0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <sysclk_enable_usb>:
 * \param frequency The required USB clock frequency in MHz:
 * \arg \c 6 for 6 MHz
 * \arg \c 48 for 48 MHz
 */
void sysclk_enable_usb(uint8_t frequency)
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <sysclk_enable_usb+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
     c2a:	86 30       	cpi	r24, 0x06	; 6
     c2c:	11 f0       	breq	.+4      	; 0xc32 <sysclk_enable_usb+0x12>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <sysclk_enable_usb+0x14>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
     c32:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     c34:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
     c38:	81 fd       	sbrc	r24, 1
     c3a:	2a c0       	rjmp	.+84     	; 0xc90 <sysclk_enable_usb+0x70>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c3c:	8f b7       	in	r24, 0x3f	; 63
     c3e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     c40:	f8 94       	cli
	return flags;
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     c44:	e0 e5       	ldi	r30, 0x50	; 80
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c4e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     c50:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     c52:	81 ff       	sbrs	r24, 1
     c54:	fd cf       	rjmp	.-6      	; 0xc50 <sysclk_enable_usb+0x30>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c56:	8f b7       	in	r24, 0x3f	; 63
     c58:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c5a:	f8 94       	cli
	return flags;
     c5c:	99 81       	ldd	r25, Y+1	; 0x01
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
     c5e:	a0 e5       	ldi	r26, 0x50	; 80
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	16 96       	adiw	r26, 0x06	; 6
     c64:	8c 91       	ld	r24, X
     c66:	16 97       	sbiw	r26, 0x06	; 6
     c68:	89 7f       	andi	r24, 0xF9	; 249
     c6a:	16 96       	adiw	r26, 0x06	; 6
     c6c:	8c 93       	st	X, r24
     c6e:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
     c70:	e0 e6       	ldi	r30, 0x60	; 96
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
     c78:	8b eb       	ldi	r24, 0xBB	; 187
     c7a:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
     c7c:	16 96       	adiw	r26, 0x06	; 6
     c7e:	8c 91       	ld	r24, X
     c80:	16 97       	sbiw	r26, 0x06	; 6
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	16 96       	adiw	r26, 0x06	; 6
     c86:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c8e:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
     c90:	63 60       	ori	r22, 0x03	; 3
     c92:	84 e4       	ldi	r24, 0x44	; 68
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
     c9a:	60 e4       	ldi	r22, 0x40	; 64
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	aa df       	rcall	.-172    	; 0xbf4 <sysclk_enable_module>
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	fc 01       	movw	r30, r24
     cb0:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     cb6:	c6 2f       	mov	r28, r22
     cb8:	d0 e0       	ldi	r29, 0x00	; 0
     cba:	de 01       	movw	r26, r28
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <ioport_configure_port_pin+0x1a>
     cc0:	b5 95       	asr	r27
     cc2:	a7 95       	ror	r26
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <ioport_configure_port_pin+0x16>
     cc8:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     cca:	50 83       	st	Z, r21
     ccc:	2f 5f       	subi	r18, 0xFF	; 255
     cce:	3f 4f       	sbci	r19, 0xFF	; 255
     cd0:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     cd2:	28 30       	cpi	r18, 0x08	; 8
     cd4:	31 05       	cpc	r19, r1
     cd6:	89 f7       	brne	.-30     	; 0xcba <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     cd8:	40 ff       	sbrs	r20, 0
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
     cdc:	41 ff       	sbrs	r20, 1
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     ce0:	fc 01       	movw	r30, r24
     ce2:	65 83       	std	Z+5, r22	; 0x05
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     ce6:	fc 01       	movw	r30, r24
     ce8:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     cea:	fc 01       	movw	r30, r24
     cec:	61 83       	std	Z+1, r22	; 0x01
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     cf0:	fc 01       	movw	r30, r24
     cf2:	62 83       	std	Z+2, r22	; 0x02
	}
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     d00:	c0 3c       	cpi	r28, 0xC0	; 192
     d02:	28 e0       	ldi	r18, 0x08	; 8
     d04:	d2 07       	cpc	r29, r18
     d06:	21 f4       	brne	.+8      	; 0xd10 <spi_master_init+0x16>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     d08:	68 e0       	ldi	r22, 0x08	; 8
     d0a:	83 e0       	ldi	r24, 0x03	; 3
     d0c:	73 df       	rcall	.-282    	; 0xbf4 <sysclk_enable_module>
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <spi_master_init+0x22>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     d10:	80 3c       	cpi	r24, 0xC0	; 192
     d12:	99 40       	sbci	r25, 0x09	; 9
     d14:	19 f4       	brne	.+6      	; 0xd1c <spi_master_init+0x22>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     d16:	68 e0       	ldi	r22, 0x08	; 8
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	6c df       	rcall	.-296    	; 0xbf4 <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     d1c:	88 81       	ld	r24, Y
     d1e:	80 61       	ori	r24, 0x10	; 16
     d20:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     d28:	ef 92       	push	r14
     d2a:	ff 92       	push	r15
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	7c 01       	movw	r14, r24
     d34:	c4 2f       	mov	r28, r20
     d36:	b9 01       	movw	r22, r18
     d38:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	16 e3       	ldi	r17, 0x36	; 54
     d3e:	2e e6       	ldi	r18, 0x6E	; 110
     d40:	31 e0       	ldi	r19, 0x01	; 1
     d42:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <spi_xmega_set_baud_div>
     d46:	88 23       	and	r24, r24
     d48:	44 f0       	brlt	.+16     	; 0xd5a <spi_master_setup_device+0x32>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     d4a:	f7 01       	movw	r30, r14
     d4c:	90 81       	ld	r25, Z
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     d4e:	cc 0f       	add	r28, r28
     d50:	cc 0f       	add	r28, r28
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     d52:	cc 70       	andi	r28, 0x0C	; 12
     d54:	93 7f       	andi	r25, 0xF3	; 243
     d56:	c9 2b       	or	r28, r25
     d58:	c0 83       	st	Z, r28
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	08 95       	ret

00000d66 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     d66:	fc 01       	movw	r30, r24
     d68:	db 01       	movw	r26, r22
     d6a:	46 0f       	add	r20, r22
     d6c:	57 1f       	adc	r21, r23
	while (len--) {
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     d70:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     d72:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     d74:	92 81       	ldd	r25, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     d76:	99 23       	and	r25, r25
     d78:	ec f7       	brge	.-6      	; 0xd74 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     d7a:	a4 17       	cp	r26, r20
     d7c:	b5 07       	cpc	r27, r21
     d7e:	c1 f7       	brne	.-16     	; 0xd70 <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	08 95       	ret

00000d84 <spi_read_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
     d84:	fc 01       	movw	r30, r24
     d86:	db 01       	movw	r26, r22
	while (len--) {
     d88:	41 15       	cp	r20, r1
     d8a:	51 05       	cpc	r21, r1
     d8c:	61 f0       	breq	.+24     	; 0xda6 <spi_read_packet+0x22>
     d8e:	46 0f       	add	r20, r22
     d90:	57 1f       	adc	r21, r23
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     d92:	2f ef       	ldi	r18, 0xFF	; 255
     d94:	23 83       	std	Z+3, r18	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     d96:	92 81       	ldd	r25, Z+2	; 0x02
		spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY); //Dummy write

		while (!spi_is_rx_full(spi)) {
     d98:	99 23       	and	r25, r25
     d9a:	ec f7       	brge	.-6      	; 0xd96 <spi_read_packet+0x12>
 * \return The data byte
 *
 */
static inline uint8_t spi_get(SPI_t *spi)
{
	return spi->DATA;
     d9c:	83 81       	ldd	r24, Z+3	; 0x03
 * \param data Pointer to the data byte where to store the received data.
 *
 */
inline static void spi_read_single(SPI_t *spi, uint8_t *data)
{
	*data=spi_get(spi);
     d9e:	8d 93       	st	X+, r24
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_read_packet(SPI_t *spi, uint8_t *data, size_t len)
{
	while (len--) {
     da0:	a4 17       	cp	r26, r20
     da2:	b5 07       	cpc	r27, r21
     da4:	b9 f7       	brne	.-18     	; 0xd94 <spi_read_packet+0x10>
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret

00000daa <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
     daa:	fb 01       	movw	r30, r22
     dac:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     dae:	e8 2f       	mov	r30, r24
     db0:	e6 95       	lsr	r30
     db2:	e6 95       	lsr	r30
     db4:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	e4 9f       	mul	r30, r20
     dba:	f0 01       	movw	r30, r0
     dbc:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     dbe:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     dc0:	87 70       	andi	r24, 0x07	; 7
     dc2:	21 e0       	ldi	r18, 0x01	; 1
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	a9 01       	movw	r20, r18
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <spi_select_device+0x24>
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	8a 95       	dec	r24
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     dd2:	46 83       	std	Z+6, r20	; 0x06
     dd4:	08 95       	ret

00000dd6 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
     dd6:	fb 01       	movw	r30, r22
     dd8:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
     dda:	e8 2f       	mov	r30, r24
     ddc:	e6 95       	lsr	r30
     dde:	e6 95       	lsr	r30
     de0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
     de2:	40 e2       	ldi	r20, 0x20	; 32
     de4:	e4 9f       	mul	r30, r20
     de6:	f0 01       	movw	r30, r0
     de8:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     dea:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     dec:	87 70       	andi	r24, 0x07	; 7
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	a9 01       	movw	r20, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <spi_deselect_device+0x24>
     df6:	44 0f       	add	r20, r20
     df8:	55 1f       	adc	r21, r21
     dfa:	8a 95       	dec	r24
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     dfe:	45 83       	std	Z+5, r20	; 0x05
     e00:	08 95       	ret

00000e02 <get_nb_lun>:
#endif

  Ctrl_access_unlock();

  return sector_size;
}
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	08 95       	ret

00000e06 <mem_test_unit_ready>:
     e06:	81 11       	cpse	r24, r1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <mem_test_unit_ready+0x8>
     e0a:	0b ce       	rjmp	.-1002   	; 0xa22 <at45dbx_test_unit_ready>
     e0c:	08 95       	ret
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	08 95       	ret

00000e12 <mem_read_capacity>:
     e12:	81 11       	cpse	r24, r1
     e14:	03 c0       	rjmp	.+6      	; 0xe1c <mem_read_capacity+0xa>
     e16:	cb 01       	movw	r24, r22
     e18:	11 ce       	rjmp	.-990    	; 0xa3c <at45dbx_read_capacity>
     e1a:	08 95       	ret
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	08 95       	ret

00000e20 <mem_unload>:

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
     e20:	81 11       	cpse	r24, r1
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <mem_unload+0xa>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	86 27       	eor	r24, r22
     e28:	08 95       	ret

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
     e2a:	80 e0       	ldi	r24, 0x00	; 0
#endif

  Ctrl_access_unlock();

  return unloaded;
}
     e2c:	08 95       	ret

00000e2e <mem_wr_protect>:

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
     e2e:	81 11       	cpse	r24, r1
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <mem_wr_protect+0x8>
     e32:	0f ce       	rjmp	.-994    	; 0xa52 <at45dbx_wr_protect>
     e34:	08 95       	ret
     e36:	81 e0       	ldi	r24, 0x01	; 1
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
     e38:	08 95       	ret

00000e3a <mem_removal>:

  if (!Ctrl_access_lock()) return true;

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
     e3a:	81 11       	cpse	r24, r1
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <mem_removal+0x8>
     e3e:	0b ce       	rjmp	.-1002   	; 0xa56 <at45dbx_removal>
     e40:	08 95       	ret
     e42:	81 e0       	ldi	r24, 0x01	; 1
#endif

  Ctrl_access_unlock();

  return removal;
}
     e44:	08 95       	ret

00000e46 <mem_name>:
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
     e46:	88 23       	and	r24, r24
     e48:	19 f0       	breq	.+6      	; 0xe50 <mem_name+0xa>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	08 95       	ret
     e50:	88 eb       	ldi	r24, 0xB8	; 184
     e52:	90 e2       	ldi	r25, 0x20	; 32
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
     e54:	08 95       	ret

00000e56 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	c8 2f       	mov	r28, r24
     e66:	6a 01       	movw	r12, r20
     e68:	7b 01       	movw	r14, r22
     e6a:	89 01       	movw	r16, r18
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
     e6c:	61 da       	rcall	.-2878   	; 0x330 <ui_start_read>
  status =
     e6e:	c1 11       	cpse	r28, r1
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <memory_2_usb+0x28>
     e72:	a8 01       	movw	r20, r16
     e74:	c7 01       	movw	r24, r14
     e76:	b6 01       	movw	r22, r12
     e78:	f0 dd       	rcall	.-1056   	; 0xa5a <at45dbx_usb_read_10>
     e7a:	c8 2f       	mov	r28, r24
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <memory_2_usb+0x2a>
     e7e:	c1 e0       	ldi	r28, 0x01	; 1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
     e80:	5b da       	rcall	.-2890   	; 0x338 <ui_stop_read>

  Ctrl_access_unlock();

  return status;
}
     e82:	8c 2f       	mov	r24, r28
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	08 95       	ret

00000e94 <usb_2_memory>:


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
     e94:	cf 92       	push	r12
     e96:	df 92       	push	r13
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	c8 2f       	mov	r28, r24
     ea4:	6a 01       	movw	r12, r20
     ea6:	7b 01       	movw	r14, r22
     ea8:	89 01       	movw	r16, r18
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
     eaa:	4a da       	rcall	.-2924   	; 0x340 <ui_start_write>
  status =
     eac:	c1 11       	cpse	r28, r1
     eae:	06 c0       	rjmp	.+12     	; 0xebc <usb_2_memory+0x28>
     eb0:	a8 01       	movw	r20, r16
     eb2:	c7 01       	movw	r24, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	fa dd       	rcall	.-1036   	; 0xaac <at45dbx_usb_write_10>
     eb8:	c8 2f       	mov	r28, r24
     eba:	01 c0       	rjmp	.+2      	; 0xebe <usb_2_memory+0x2a>
     ebc:	c1 e0       	ldi	r28, 0x01	; 1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
     ebe:	44 da       	rcall	.-2936   	; 0x348 <ui_stop_write>

  Ctrl_access_unlock();

  return status;
}
     ec0:	8c 2f       	mov	r24, r28
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	08 95       	ret

00000ed2 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	08 95       	ret

00000ed6 <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	81 11       	cpse	r24, r1
     eda:	01 c0       	rjmp	.+2      	; 0xede <udi_msc_trans_ack+0x8>
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	90 93 80 24 	sts	0x2480, r25	; 0x802480 <udi_msc_b_abort_trans>
	udi_msc_b_ack_trans = true;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <udi_msc_b_ack_trans>
     ee8:	08 95       	ret

00000eea <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
     eee:	0b e4       	ldi	r16, 0x4B	; 75
     ef0:	19 e0       	ldi	r17, 0x09	; 9
     ef2:	2f e1       	ldi	r18, 0x1F	; 31
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	53 e2       	ldi	r21, 0x23	; 35
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 bc 14 	call	0x2978	; 0x2978 <udd_ep_run>
     f02:	81 11       	cpse	r24, r1
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <udi_msc_cbw_wait+0x26>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
     f06:	65 e7       	ldi	r22, 0x75	; 117
     f08:	77 e0       	ldi	r23, 0x07	; 7
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <udd_ep_wait_stall_clear>
	}
}
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
	uint8_t lun;
	udi_msc_b_trans_req = false;
     f1a:	10 92 03 23 	sts	0x2303, r1	; 0x802303 <udi_msc_b_trans_req>
	udi_msc_b_cbw_invalid = false;
     f1e:	10 92 04 23 	sts	0x2304, r1	; 0x802304 <udi_msc_b_cbw_invalid>
	udi_msc_b_ack_trans = true;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <udi_msc_b_ack_trans>
	udi_msc_b_reset_trans = true;
     f28:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <udi_msc_b_reset_trans>
	udi_msc_nb_lun = get_nb_lun();
     f2c:	6a df       	rcall	.-300    	; 0xe02 <get_nb_lun>
	if (0 == udi_msc_nb_lun)
     f2e:	81 11       	cpse	r24, r1
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <udi_msc_enable+0x24>
	uint8_t lun;
	udi_msc_b_trans_req = false;
	udi_msc_b_cbw_invalid = false;
	udi_msc_b_ack_trans = true;
	udi_msc_b_reset_trans = true;
	udi_msc_nb_lun = get_nb_lun();
     f32:	10 92 1c 23 	sts	0x231C, r1	; 0x80231c <udi_msc_nb_lun>
	if (0 == udi_msc_nb_lun)
		return false; // No lun available, then not authorize to enable interface
     f36:	d0 e0       	ldi	r29, 0x00	; 0
     f38:	12 c0       	rjmp	.+36     	; 0xf5e <udi_msc_enable+0x48>
	udi_msc_nb_lun--;
     f3a:	81 50       	subi	r24, 0x01	; 1
     f3c:	80 93 1c 23 	sts	0x231C, r24	; 0x80231c <udi_msc_nb_lun>
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
     f40:	0e 94 5d 18 	call	0x30ba	; 0x30ba <main_msc_enable>
     f44:	d8 2f       	mov	r29, r24
     f46:	88 23       	and	r24, r24
     f48:	51 f0       	breq	.+20     	; 0xf5e <udi_msc_enable+0x48>
     f4a:	c0 e0       	ldi	r28, 0x00	; 0
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
		mem_unload(lun, false);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8c 2f       	mov	r24, r28
     f50:	67 df       	rcall	.-306    	; 0xe20 <mem_unload>
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
		return false;
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
     f52:	cf 5f       	subi	r28, 0xFF	; 255
     f54:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <udi_msc_nb_lun>
     f58:	9c 17       	cp	r25, r28
     f5a:	c0 f7       	brcc	.-16     	; 0xf4c <udi_msc_enable+0x36>
		mem_unload(lun, false);
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
     f5c:	c6 df       	rcall	.-116    	; 0xeea <udi_msc_cbw_wait>
	return true;
}
     f5e:	8d 2f       	mov	r24, r29
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <udi_msc_csw_sent>:
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
     f66:	c1 cf       	rjmp	.-126    	; 0xeea <udi_msc_cbw_wait>
     f68:	08 95       	ret

00000f6a <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
     f6e:	03 eb       	ldi	r16, 0xB3	; 179
     f70:	17 e0       	ldi	r17, 0x07	; 7
     f72:	2d e0       	ldi	r18, 0x0D	; 13
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	40 e3       	ldi	r20, 0x30	; 48
     f78:	50 e2       	ldi	r21, 0x20	; 32
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	81 e8       	ldi	r24, 0x81	; 129
     f7e:	0e 94 bc 14 	call	0x2978	; 0x2978 <udd_ep_run>
     f82:	81 11       	cpse	r24, r1
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <udi_msc_csw_send+0x26>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
     f86:	65 eb       	ldi	r22, 0xB5	; 181
     f88:	77 e0       	ldi	r23, 0x07	; 7
     f8a:	81 e8       	ldi	r24, 0x81	; 129
     f8c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <udd_ep_wait_stall_clear>
	}
}
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <udi_msc_cbw_invalid>:
//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
     f96:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <udi_msc_b_cbw_invalid>
     f9a:	88 23       	and	r24, r24
     f9c:	41 f0       	breq	.+16     	; 0xfae <udi_msc_cbw_invalid+0x18>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <udd_ep_set_halt>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
     fa4:	6b ec       	ldi	r22, 0xCB	; 203
     fa6:	77 e0       	ldi	r23, 0x07	; 7
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <udd_ep_wait_stall_clear>
     fae:	08 95       	ret

00000fb0 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
	if (!udi_msc_b_cbw_invalid)
     fb0:	80 91 04 23 	lds	r24, 0x2304	; 0x802304 <udi_msc_b_cbw_invalid>
     fb4:	88 23       	and	r24, r24
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <udi_msc_csw_invalid+0x18>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
     fb8:	81 e8       	ldi	r24, 0x81	; 129
     fba:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <udd_ep_set_halt>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
     fbe:	68 ed       	ldi	r22, 0xD8	; 216
     fc0:	77 e0       	ldi	r23, 0x07	; 7
     fc2:	81 e8       	ldi	r24, 0x81	; 129
     fc4:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <udd_ep_wait_stall_clear>
     fc8:	08 95       	ret

00000fca <udi_msc_csw_process>:
//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
	if (0 != udi_msc_csw.dCSWDataResidue) {
     fca:	80 91 38 20 	lds	r24, 0x2038	; 0x802038 <udi_msc_csw+0x8>
     fce:	90 91 39 20 	lds	r25, 0x2039	; 0x802039 <udi_msc_csw+0x9>
     fd2:	a0 91 3a 20 	lds	r26, 0x203A	; 0x80203a <udi_msc_csw+0xa>
     fd6:	b0 91 3b 20 	lds	r27, 0x203B	; 0x80203b <udi_msc_csw+0xb>
     fda:	89 2b       	or	r24, r25
     fdc:	8a 2b       	or	r24, r26
     fde:	8b 2b       	or	r24, r27
     fe0:	59 f0       	breq	.+22     	; 0xff8 <udi_msc_csw_process+0x2e>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
     fe2:	80 91 2c 23 	lds	r24, 0x232C	; 0x80232c <udi_msc_cbw+0xc>
     fe6:	88 23       	and	r24, r24
     fe8:	24 f4       	brge	.+8      	; 0xff2 <udi_msc_csw_process+0x28>
			udd_ep_set_halt(UDI_MSC_EP_IN);
     fea:	81 e8       	ldi	r24, 0x81	; 129
     fec:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <udd_ep_set_halt>
     ff0:	03 c0       	rjmp	.+6      	; 0xff8 <udi_msc_csw_process+0x2e>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <udd_ep_set_halt>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
     ff8:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <udi_msc_cbw+0x4>
     ffc:	90 91 25 23 	lds	r25, 0x2325	; 0x802325 <udi_msc_cbw+0x5>
    1000:	a0 91 26 23 	lds	r26, 0x2326	; 0x802326 <udi_msc_cbw+0x6>
    1004:	b0 91 27 23 	lds	r27, 0x2327	; 0x802327 <udi_msc_cbw+0x7>
    1008:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <udi_msc_csw+0x4>
    100c:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <udi_msc_csw+0x5>
    1010:	a0 93 36 20 	sts	0x2036, r26	; 0x802036 <udi_msc_csw+0x6>
    1014:	b0 93 37 20 	sts	0x2037, r27	; 0x802037 <udi_msc_csw+0x7>
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
	udi_msc_csw_send();
    1018:	a8 cf       	rjmp	.-176    	; 0xf6a <udi_msc_csw_send>
    101a:	08 95       	ret

0000101c <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
    101c:	e8 e0       	ldi	r30, 0x08	; 8
    101e:	f3 e2       	ldi	r31, 0x23	; 35
    1020:	82 e1       	ldi	r24, 0x12	; 18
    1022:	df 01       	movw	r26, r30
    1024:	1d 92       	st	X+, r1
    1026:	8a 95       	dec	r24
    1028:	e9 f7       	brne	.-6      	; 0x1024 <udi_msc_clear_sense+0x8>
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
    102a:	80 ef       	ldi	r24, 0xF0	; 240
    102c:	80 83       	st	Z, r24
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	87 83       	std	Z+7, r24	; 0x07
    1032:	08 95       	ret

00001034 <udi_msc_sense_fail>:
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	d8 2e       	mov	r13, r24
    1044:	c6 2f       	mov	r28, r22
    1046:	d7 2f       	mov	r29, r23
    1048:	12 2f       	mov	r17, r18
    104a:	03 2f       	mov	r16, r19
    104c:	f4 2e       	mov	r15, r20
    104e:	e5 2e       	mov	r14, r21
	udi_msc_clear_sense();
    1050:	e5 df       	rcall	.-54     	; 0x101c <udi_msc_clear_sense>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	80 93 3c 20 	sts	0x203C, r24	; 0x80203c <udi_msc_csw+0xc>
	udi_msc_sense.sense_flag_key = sense_key;
    1058:	e8 e0       	ldi	r30, 0x08	; 8
    105a:	f3 e2       	ldi	r31, 0x23	; 35
    105c:	d2 82       	std	Z+2, r13	; 0x02
	udi_msc_sense.information[0] = lba >> 24;
    105e:	e3 82       	std	Z+3, r14	; 0x03
	udi_msc_sense.information[1] = lba >> 16;
    1060:	f4 82       	std	Z+4, r15	; 0x04
	udi_msc_sense.information[2] = lba >> 8;
    1062:	05 83       	std	Z+5, r16	; 0x05
	udi_msc_sense.information[3] = lba;
    1064:	16 83       	std	Z+6, r17	; 0x06
	udi_msc_sense.AddSenseCode = add_sense >> 8;
    1066:	d4 87       	std	Z+12, r29	; 0x0c
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
    1068:	c5 87       	std	Z+13, r28	; 0x0d
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	08 95       	ret

0000107a <udi_msc_sense_fail_cdb_invalid>:
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	74 e2       	ldi	r23, 0x24	; 36
    1084:	85 e0       	ldi	r24, 0x05	; 5
    1086:	d6 cf       	rjmp	.-84     	; 0x1034 <udi_msc_sense_fail>
    1088:	08 95       	ret

0000108a <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
    108e:	20 91 2c 23 	lds	r18, 0x232C	; 0x80232c <udi_msc_cbw+0xc>
    1092:	42 27       	eor	r20, r18
    1094:	6c f0       	brlt	.+26     	; 0x10b0 <udi_msc_cbw_validate+0x26>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
    1096:	00 91 38 20 	lds	r16, 0x2038	; 0x802038 <udi_msc_csw+0x8>
    109a:	10 91 39 20 	lds	r17, 0x2039	; 0x802039 <udi_msc_csw+0x9>
    109e:	20 91 3a 20 	lds	r18, 0x203A	; 0x80203a <udi_msc_csw+0xa>
    10a2:	30 91 3b 20 	lds	r19, 0x203B	; 0x80203b <udi_msc_csw+0xb>
    10a6:	06 17       	cp	r16, r22
    10a8:	17 07       	cpc	r17, r23
    10aa:	28 07       	cpc	r18, r24
    10ac:	39 07       	cpc	r19, r25
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <udi_msc_cbw_validate+0x2e>
		udi_msc_sense_fail_cdb_invalid();
    10b0:	e4 df       	rcall	.-56     	; 0x107a <udi_msc_sense_fail_cdb_invalid>
		udi_msc_csw_process();
    10b2:	8b df       	rcall	.-234    	; 0xfca <udi_msc_csw_process>
		return false;
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <udi_msc_cbw_validate+0x30>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
}
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <udi_msc_sense_fail_hardware>:
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	a9 01       	movw	r20, r18
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	b3 cf       	rjmp	.-154    	; 0x1034 <udi_msc_sense_fail>
    10ce:	08 95       	ret

000010d0 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
    10d4:	26 2f       	mov	r18, r22
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	0e e8       	ldi	r16, 0x8E	; 142
    10da:	18 e0       	ldi	r17, 0x08	; 8
    10dc:	ac 01       	movw	r20, r24
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	81 e8       	ldi	r24, 0x81	; 129
    10e2:	0e 94 bc 14 	call	0x2978	; 0x2978 <udd_ep_run>
    10e6:	81 11       	cpse	r24, r1
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <udi_msc_data_send+0x1e>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
    10ea:	ea df       	rcall	.-44     	; 0x10c0 <udi_msc_sense_fail_hardware>
		udi_msc_csw_process();
    10ec:	6e df       	rcall	.-292    	; 0xfca <udi_msc_csw_process>
	}
}
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	08 95       	ret

000010f4 <udi_msc_sense_fail_busy_or_change>:
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	78 e2       	ldi	r23, 0x28	; 40
    10fe:	86 e0       	ldi	r24, 0x06	; 6
    1100:	99 cf       	rjmp	.-206    	; 0x1034 <udi_msc_sense_fail>
    1102:	08 95       	ret

00001104 <udi_msc_sense_fail_not_present>:
}


static void udi_msc_sense_fail_not_present(void)
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	a9 01       	movw	r20, r18
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	7a e3       	ldi	r23, 0x3A	; 58
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	91 cf       	rjmp	.-222    	; 0x1034 <udi_msc_sense_fail>
    1112:	08 95       	ret

00001114 <udi_msc_sense_pass>:
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
	udi_msc_clear_sense();
    1114:	83 df       	rcall	.-250    	; 0x101c <udi_msc_clear_sense>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
    1116:	10 92 3c 20 	sts	0x203C, r1	; 0x80203c <udi_msc_csw+0xc>
    111a:	08 95       	ret

0000111c <udi_msc_data_sent>:
}


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
    1120:	81 11       	cpse	r24, r1
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <udi_msc_data_sent+0x2a>
    1124:	eb 01       	movw	r28, r22
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
    1126:	f6 df       	rcall	.-20     	; 0x1114 <udi_msc_sense_pass>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
    1128:	e0 e3       	ldi	r30, 0x30	; 48
    112a:	f0 e2       	ldi	r31, 0x20	; 32
    112c:	80 85       	ldd	r24, Z+8	; 0x08
    112e:	91 85       	ldd	r25, Z+9	; 0x09
    1130:	a2 85       	ldd	r26, Z+10	; 0x0a
    1132:	b3 85       	ldd	r27, Z+11	; 0x0b
    1134:	8c 1b       	sub	r24, r28
    1136:	9d 0b       	sbc	r25, r29
    1138:	a1 09       	sbc	r26, r1
    113a:	b1 09       	sbc	r27, r1
    113c:	80 87       	std	Z+8, r24	; 0x08
    113e:	91 87       	std	Z+9, r25	; 0x09
    1140:	a2 87       	std	Z+10, r26	; 0x0a
    1142:	b3 87       	std	Z+11, r27	; 0x0b
	udi_msc_csw_process();
    1144:	42 df       	rcall	.-380    	; 0xfca <udi_msc_csw_process>
}
    1146:	df 91       	pop	r29
    1148:	cf 91       	pop	r28
    114a:	08 95       	ret

0000114c <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	d8 2f       	mov	r29, r24
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
    1154:	94 e1       	ldi	r25, 0x14	; 20
    1156:	e8 ee       	ldi	r30, 0xE8	; 232
    1158:	f2 e2       	ldi	r31, 0x22	; 34
    115a:	df 01       	movw	r26, r30
    115c:	1d 92       	st	X+, r1
    115e:	9a 95       	dec	r25
    1160:	e9 f7       	brne	.-6      	; 0x115c <udi_msc_spc_mode_sense+0x10>

	// Initialize process
	if (b_sense10) {
    1162:	88 23       	and	r24, r24
    1164:	31 f0       	breq	.+12     	; 0x1172 <udi_msc_spc_mode_sense+0x26>
		request_lgt = udi_msc_cbw.CDB[8];
    1166:	20 91 37 23 	lds	r18, 0x2337	; 0x802337 <udi_msc_cbw+0x17>
		ptr_mode = &sense.s10.sense_data;
    116a:	e0 ef       	ldi	r30, 0xF0	; 240
    116c:	f2 e2       	ldi	r31, 0x22	; 34
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
    116e:	18 e0       	ldi	r17, 0x08	; 8
    1170:	05 c0       	rjmp	.+10     	; 0x117c <udi_msc_spc_mode_sense+0x30>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
    1172:	20 91 33 23 	lds	r18, 0x2333	; 0x802333 <udi_msc_cbw+0x13>
		ptr_mode = &sense.s6.sense_data;
    1176:	ec ee       	ldi	r30, 0xEC	; 236
    1178:	f2 e2       	ldi	r31, 0x22	; 34
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
    117a:	14 e0       	ldi	r17, 0x04	; 4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
    117c:	90 91 31 23 	lds	r25, 0x2331	; 0x802331 <udi_msc_cbw+0x11>
    1180:	9f 73       	andi	r25, 0x3F	; 63
	if ((SCSI_MS_MODE_INFEXP == mode)
    1182:	9c 31       	cpi	r25, 0x1C	; 28
    1184:	11 f0       	breq	.+4      	; 0x118a <udi_msc_spc_mode_sense+0x3e>
			|| (SCSI_MS_MODE_ALL == mode)) {
    1186:	9f 33       	cpi	r25, 0x3F	; 63
    1188:	39 f4       	brne	.+14     	; 0x1198 <udi_msc_spc_mode_sense+0x4c>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
    118a:	8c e1       	ldi	r24, 0x1C	; 28
    118c:	80 83       	st	Z, r24
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
    118e:	8a e0       	ldi	r24, 0x0A	; 10
    1190:	81 83       	std	Z+1, r24	; 0x01
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
    1192:	85 e0       	ldi	r24, 0x05	; 5
    1194:	83 83       	std	Z+3, r24	; 0x03
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
    1196:	14 5f       	subi	r17, 0xF4	; 244
    1198:	c1 2f       	mov	r28, r17
    119a:	21 17       	cp	r18, r17
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <udi_msc_spc_mode_sense+0x54>
    119e:	c2 2f       	mov	r28, r18
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
    11a0:	8c 2f       	mov	r24, r28
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a0 e0       	ldi	r26, 0x00	; 0
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	6d df       	rcall	.-294    	; 0x108a <udi_msc_cbw_validate>
    11b0:	88 23       	and	r24, r24
    11b2:	01 f1       	breq	.+64     	; 0x11f4 <udi_msc_spc_mode_sense+0xa8>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
    11b4:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    11b8:	3a de       	rcall	.-908    	; 0xe2e <mem_wr_protect>
    11ba:	81 11       	cpse	r24, r1
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <udi_msc_spc_mode_sense+0x76>
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <udi_msc_spc_mode_sense+0x78>
    11c2:	20 e8       	ldi	r18, 0x80	; 128

	if (b_sense10) {
    11c4:	dd 23       	and	r29, r29
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <udi_msc_spc_mode_sense+0x94>
		sense.s10.header.mode_data_length =
    11c8:	e8 ee       	ldi	r30, 0xE8	; 232
    11ca:	f2 e2       	ldi	r31, 0x22	; 34
				cpu_to_be16((data_sense_lgt - 2));
    11cc:	81 2f       	mov	r24, r17
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 97       	sbiw	r24, 0x02	; 2
    11d2:	98 27       	eor	r25, r24
    11d4:	89 27       	eor	r24, r25
    11d6:	98 27       	eor	r25, r24

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;

	if (b_sense10) {
		sense.s10.header.mode_data_length =
    11d8:	80 83       	st	Z, r24
    11da:	91 83       	std	Z+1, r25	; 0x01
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
    11dc:	23 83       	std	Z+3, r18	; 0x03
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <udi_msc_spc_mode_sense+0xa0>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
    11e0:	e8 ee       	ldi	r30, 0xE8	; 232
    11e2:	f2 e2       	ldi	r31, 0x22	; 34
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	81 0f       	add	r24, r17
    11e8:	80 83       	st	Z, r24
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
    11ea:	22 83       	std	Z+2, r18	; 0x02
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
    11ec:	6c 2f       	mov	r22, r28
    11ee:	88 ee       	ldi	r24, 0xE8	; 232
    11f0:	92 e2       	ldi	r25, 0x22	; 34
    11f2:	6e df       	rcall	.-292    	; 0x10d0 <udi_msc_data_send>
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	08 95       	ret

000011fc <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
    11fc:	cf 93       	push	r28
    11fe:	c8 2f       	mov	r28, r24
	uint32_t trans_size;

	if (!b_read) {
    1200:	81 11       	cpse	r24, r1
    1202:	0e c0       	rjmp	.+28     	; 0x1220 <udi_msc_sbc_trans+0x24>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
    1204:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    1208:	12 de       	rcall	.-988    	; 0xe2e <mem_wr_protect>
    120a:	88 23       	and	r24, r24
    120c:	49 f0       	breq	.+18     	; 0x1220 <udi_msc_sbc_trans+0x24>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	77 e2       	ldi	r23, 0x27	; 39
    1218:	87 e0       	ldi	r24, 0x07	; 7
    121a:	0c df       	rcall	.-488    	; 0x1034 <udi_msc_sense_fail>
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
    121c:	d6 de       	rcall	.-596    	; 0xfca <udi_msc_csw_process>
			return;
    121e:	39 c0       	rjmp	.+114    	; 0x1292 <udi_msc_sbc_trans+0x96>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
    1220:	ae ef       	ldi	r26, 0xFE	; 254
    1222:	b2 e2       	ldi	r27, 0x22	; 34
    1224:	e0 e2       	ldi	r30, 0x20	; 32
    1226:	f3 e2       	ldi	r31, 0x23	; 35
    1228:	81 89       	ldd	r24, Z+17	; 0x11
    122a:	13 96       	adiw	r26, 0x03	; 3
    122c:	8c 93       	st	X, r24
    122e:	13 97       	sbiw	r26, 0x03	; 3
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
    1230:	82 89       	ldd	r24, Z+18	; 0x12
    1232:	12 96       	adiw	r26, 0x02	; 2
    1234:	8c 93       	st	X, r24
    1236:	12 97       	sbiw	r26, 0x02	; 2
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
    1238:	83 89       	ldd	r24, Z+19	; 0x13
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	8c 93       	st	X, r24
    123e:	11 97       	sbiw	r26, 0x01	; 1
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
    1240:	84 89       	ldd	r24, Z+20	; 0x14
    1242:	8c 93       	st	X, r24
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
    1244:	ac ef       	ldi	r26, 0xFC	; 252
    1246:	b2 e2       	ldi	r27, 0x22	; 34
    1248:	86 89       	ldd	r24, Z+22	; 0x16
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	8c 93       	st	X, r24
    124e:	11 97       	sbiw	r26, 0x01	; 1
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
    1250:	87 89       	ldd	r24, Z+23	; 0x17
    1252:	8c 93       	st	X, r24

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
    1254:	60 91 fc 22 	lds	r22, 0x22FC	; 0x8022fc <udi_msc_nb_block>
    1258:	70 91 fd 22 	lds	r23, 0x22FD	; 0x8022fd <udi_msc_nb_block+0x1>
    125c:	cb 01       	movw	r24, r22
    125e:	a0 e0       	ldi	r26, 0x00	; 0
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	05 2e       	mov	r0, r21
    1268:	59 e0       	ldi	r21, 0x09	; 9
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	88 1f       	adc	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	5a 95       	dec	r21
    1274:	d1 f7       	brne	.-12     	; 0x126a <udi_msc_sbc_trans+0x6e>
    1276:	50 2d       	mov	r21, r0
	if (!udi_msc_cbw_validate(trans_size,
    1278:	c1 11       	cpse	r28, r1
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <udi_msc_sbc_trans+0x84>
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <udi_msc_sbc_trans+0x86>
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	03 df       	rcall	.-506    	; 0x108a <udi_msc_cbw_validate>
    1284:	88 23       	and	r24, r24
    1286:	29 f0       	breq	.+10     	; 0x1292 <udi_msc_sbc_trans+0x96>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
    1288:	c0 93 02 23 	sts	0x2302, r28	; 0x802302 <udi_msc_b_read>
	udi_msc_b_trans_req = true;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 03 23 	sts	0x2303, r24	; 0x802303 <udi_msc_b_trans_req>
	UDI_MSC_NOTIFY_TRANS_EXT();
}
    1292:	cf 91       	pop	r28
    1294:	08 95       	ret

00001296 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
    129e:	81 11       	cpse	r24, r1
    12a0:	29 c1       	rjmp	.+594    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
    12a2:	6f 31       	cpi	r22, 0x1F	; 31
    12a4:	71 05       	cpc	r23, r1
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <udi_msc_cbw_received+0x2c>
			|| (udi_msc_cbw.dCBWSignature !=
    12a8:	80 91 20 23 	lds	r24, 0x2320	; 0x802320 <udi_msc_cbw>
    12ac:	90 91 21 23 	lds	r25, 0x2321	; 0x802321 <udi_msc_cbw+0x1>
    12b0:	a0 91 22 23 	lds	r26, 0x2322	; 0x802322 <udi_msc_cbw+0x2>
    12b4:	b0 91 23 23 	lds	r27, 0x2323	; 0x802323 <udi_msc_cbw+0x3>
    12b8:	85 35       	cpi	r24, 0x55	; 85
    12ba:	93 45       	sbci	r25, 0x53	; 83
    12bc:	a2 44       	sbci	r26, 0x42	; 66
    12be:	b3 44       	sbci	r27, 0x43	; 67
    12c0:	31 f0       	breq	.+12     	; 0x12ce <udi_msc_cbw_received+0x38>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 04 23 	sts	0x2304, r24	; 0x802304 <udi_msc_b_cbw_invalid>
		udi_msc_cbw_invalid();
    12c8:	66 de       	rcall	.-820    	; 0xf96 <udi_msc_cbw_invalid>
		udi_msc_csw_invalid();
    12ca:	72 de       	rcall	.-796    	; 0xfb0 <udi_msc_csw_invalid>
		return;
    12cc:	13 c1       	rjmp	.+550    	; 0x14f4 <udi_msc_cbw_received+0x25e>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
    12ce:	e0 e2       	ldi	r30, 0x20	; 32
    12d0:	f3 e2       	ldi	r31, 0x23	; 35
    12d2:	85 85       	ldd	r24, Z+13	; 0x0d
    12d4:	8f 70       	andi	r24, 0x0F	; 15
    12d6:	85 87       	std	Z+13, r24	; 0x0d
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
    12d8:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <udi_msc_nb_lun>
    12dc:	98 17       	cp	r25, r24
    12de:	18 f4       	brcc	.+6      	; 0x12e6 <udi_msc_cbw_received+0x50>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
    12e0:	cc de       	rcall	.-616    	; 0x107a <udi_msc_sense_fail_cdb_invalid>
		udi_msc_csw_process();
    12e2:	73 de       	rcall	.-794    	; 0xfca <udi_msc_csw_process>
		return;
    12e4:	07 c1       	rjmp	.+526    	; 0x14f4 <udi_msc_cbw_received+0x25e>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
    12e6:	e0 e2       	ldi	r30, 0x20	; 32
    12e8:	f3 e2       	ldi	r31, 0x23	; 35
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
    12ea:	40 85       	ldd	r20, Z+8	; 0x08
    12ec:	51 85       	ldd	r21, Z+9	; 0x09
    12ee:	62 85       	ldd	r22, Z+10	; 0x0a
    12f0:	73 85       	ldd	r23, Z+11	; 0x0b
    12f2:	40 93 38 20 	sts	0x2038, r20	; 0x802038 <udi_msc_csw+0x8>
    12f6:	50 93 39 20 	sts	0x2039, r21	; 0x802039 <udi_msc_csw+0x9>
    12fa:	60 93 3a 20 	sts	0x203A, r22	; 0x80203a <udi_msc_csw+0xa>
    12fe:	70 93 3b 20 	sts	0x203B, r23	; 0x80203b <udi_msc_csw+0xb>
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
    1302:	e7 85       	ldd	r30, Z+15	; 0x0f
    1304:	4e 2f       	mov	r20, r30
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	4b 35       	cpi	r20, 0x5B	; 91
    130a:	51 05       	cpc	r21, r1
    130c:	08 f0       	brcs	.+2      	; 0x1310 <udi_msc_cbw_received+0x7a>
    130e:	e4 c0       	rjmp	.+456    	; 0x14d8 <udi_msc_cbw_received+0x242>
    1310:	fa 01       	movw	r30, r20
    1312:	e2 50       	subi	r30, 0x02	; 2
    1314:	ff 4f       	sbci	r31, 0xFF	; 255
    1316:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__tablejump2__>
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
    131a:	c0 91 33 23 	lds	r28, 0x2333	; 0x802333 <udi_msc_cbw+0x13>
    131e:	c3 31       	cpi	r28, 0x13	; 19
    1320:	08 f0       	brcs	.+2      	; 0x1324 <udi_msc_cbw_received+0x8e>
    1322:	c2 e1       	ldi	r28, 0x12	; 18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    1324:	8c 2f       	mov	r24, r28
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	ab de       	rcall	.-682    	; 0x108a <udi_msc_cbw_validate>
    1334:	88 23       	and	r24, r24
    1336:	09 f4       	brne	.+2      	; 0x133a <udi_msc_cbw_received+0xa4>
    1338:	dd c0       	rjmp	.+442    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
    133a:	6c 2f       	mov	r22, r28
    133c:	88 e0       	ldi	r24, 0x08	; 8
    133e:	93 e2       	ldi	r25, 0x23	; 35
    1340:	c7 de       	rcall	.-626    	; 0x10d0 <udi_msc_data_send>
    1342:	d8 c0       	rjmp	.+432    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
    1344:	c0 91 33 23 	lds	r28, 0x2333	; 0x802333 <udi_msc_cbw+0x13>
    1348:	c5 32       	cpi	r28, 0x25	; 37
    134a:	08 f0       	brcs	.+2      	; 0x134e <udi_msc_cbw_received+0xb8>
    134c:	c4 e2       	ldi	r28, 0x24	; 36

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
    134e:	8c 2f       	mov	r24, r28
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 e0       	ldi	r26, 0x00	; 0
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	bc 01       	movw	r22, r24
    135a:	cd 01       	movw	r24, r26
    135c:	96 de       	rcall	.-724    	; 0x108a <udi_msc_cbw_validate>
    135e:	88 23       	and	r24, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <udi_msc_cbw_received+0xce>
    1362:	c8 c0       	rjmp	.+400    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
    1364:	80 91 30 23 	lds	r24, 0x2330	; 0x802330 <udi_msc_cbw+0x10>
    1368:	83 70       	andi	r24, 0x03	; 3
    136a:	21 f4       	brne	.+8      	; 0x1374 <udi_msc_cbw_received+0xde>
			|| (0 != udi_msc_cbw.CDB[2])) {
    136c:	d0 91 31 23 	lds	r29, 0x2331	; 0x802331 <udi_msc_cbw+0x11>
    1370:	dd 23       	and	r29, r29
    1372:	19 f0       	breq	.+6      	; 0x137a <udi_msc_cbw_received+0xe4>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    1374:	82 de       	rcall	.-764    	; 0x107a <udi_msc_sense_fail_cdb_invalid>
		udi_msc_csw_process();
    1376:	29 de       	rcall	.-942    	; 0xfca <udi_msc_csw_process>
    1378:	bd c0       	rjmp	.+378    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		return;
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
    137a:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    137e:	5d dd       	rcall	.-1350   	; 0xe3a <mem_removal>
    1380:	81 11       	cpse	r24, r1
    1382:	d0 e8       	ldi	r29, 0x80	; 128
    1384:	08 e0       	ldi	r16, 0x08	; 8
    1386:	10 e2       	ldi	r17, 0x20	; 32
    1388:	f8 01       	movw	r30, r16
    138a:	d1 83       	std	Z+1, r29	; 0x01
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
    138c:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    1390:	5a dd       	rcall	.-1356   	; 0xe46 <mem_name>
	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
    1392:	20 e1       	ldi	r18, 0x10	; 16
    1394:	fc 01       	movw	r30, r24
    1396:	31 96       	adiw	r30, 0x01	; 1
    1398:	a8 e1       	ldi	r26, 0x18	; 24
    139a:	b0 e2       	ldi	r27, 0x20	; 32
    139c:	01 90       	ld	r0, Z+
    139e:	0d 92       	st	X+, r0
    13a0:	2a 95       	dec	r18
    13a2:	e1 f7       	brne	.-8      	; 0x139c <udi_msc_cbw_received+0x106>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
    13a4:	f8 01       	movw	r30, r16
    13a6:	80 89       	ldd	r24, Z+16	; 0x10
    13a8:	88 23       	and	r24, r24
    13aa:	09 f4       	brne	.+2      	; 0x13ae <udi_msc_cbw_received+0x118>
    13ac:	9e c0       	rjmp	.+316    	; 0x14ea <udi_msc_cbw_received+0x254>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    13ae:	82 32       	cpi	r24, 0x22	; 34
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <udi_msc_cbw_received+0x11e>
    13b2:	9d c0       	rjmp	.+314    	; 0x14ee <udi_msc_cbw_received+0x258>
    13b4:	e9 e1       	ldi	r30, 0x19	; 25
    13b6:	f0 e2       	ldi	r31, 0x20	; 32
			break;
		}
		i++;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
    13ba:	91 91       	ld	r25, Z+
    13bc:	99 23       	and	r25, r25
    13be:	09 f4       	brne	.+2      	; 0x13c2 <udi_msc_cbw_received+0x12c>
    13c0:	97 c0       	rjmp	.+302    	; 0x14f0 <udi_msc_cbw_received+0x25a>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
    13c2:	92 32       	cpi	r25, 0x22	; 34
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <udi_msc_cbw_received+0x132>
    13c6:	94 c0       	rjmp	.+296    	; 0x14f0 <udi_msc_cbw_received+0x25a>
			break;
		}
		i++;
    13c8:	8f 5f       	subi	r24, 0xFF	; 255
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    13ca:	80 31       	cpi	r24, 0x10	; 16
    13cc:	b1 f7       	brne	.-20     	; 0x13ba <udi_msc_cbw_received+0x124>
    13ce:	08 c0       	rjmp	.+16     	; 0x13e0 <udi_msc_cbw_received+0x14a>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
    13d0:	e8 2f       	mov	r30, r24
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	e8 5f       	subi	r30, 0xF8	; 248
    13d6:	ff 4d       	sbci	r31, 0xDF	; 223
    13d8:	90 8b       	std	Z+16, r25	; 0x10
		i++;
    13da:	8f 5f       	subi	r24, 0xFF	; 255
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
    13dc:	80 31       	cpi	r24, 0x10	; 16
    13de:	c1 f7       	brne	.-16     	; 0x13d0 <udi_msc_cbw_received+0x13a>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
    13e0:	6c 2f       	mov	r22, r28
    13e2:	88 e0       	ldi	r24, 0x08	; 8
    13e4:	90 e2       	ldi	r25, 0x20	; 32
    13e6:	74 de       	rcall	.-792    	; 0x10d0 <udi_msc_data_send>
    13e8:	85 c0       	rjmp	.+266    	; 0x14f4 <udi_msc_cbw_received+0x25e>
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	af de       	rcall	.-674    	; 0x114c <udi_msc_spc_mode_sense>
		break;
    13ee:	82 c0       	rjmp	.+260    	; 0x14f4 <udi_msc_cbw_received+0x25e>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	ac de       	rcall	.-680    	; 0x114c <udi_msc_spc_mode_sense>
		break;
    13f4:	7f c0       	rjmp	.+254    	; 0x14f4 <udi_msc_cbw_received+0x25e>
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
    13f6:	07 dd       	rcall	.-1522   	; 0xe06 <mem_test_unit_ready>
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	39 f0       	breq	.+14     	; 0x140a <udi_msc_cbw_received+0x174>
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	19 f0       	breq	.+6      	; 0x1406 <udi_msc_cbw_received+0x170>
    1400:	81 11       	cpse	r24, r1
    1402:	05 c0       	rjmp	.+10     	; 0x140e <udi_msc_cbw_received+0x178>
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <udi_msc_cbw_received+0x17c>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    1406:	76 de       	rcall	.-788    	; 0x10f4 <udi_msc_sense_fail_busy_or_change>
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <udi_msc_cbw_received+0x17e>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    140a:	7c de       	rcall	.-776    	; 0x1104 <udi_msc_sense_fail_not_present>
    140c:	03 c0       	rjmp	.+6      	; 0x1414 <udi_msc_cbw_received+0x17e>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
    140e:	58 de       	rcall	.-848    	; 0x10c0 <udi_msc_sense_fail_hardware>
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <udi_msc_cbw_received+0x17e>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
    1412:	80 de       	rcall	.-768    	; 0x1114 <udi_msc_sense_pass>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
    1414:	da dd       	rcall	.-1100   	; 0xfca <udi_msc_csw_process>
    1416:	6e c0       	rjmp	.+220    	; 0x14f4 <udi_msc_cbw_received+0x25e>

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
    1418:	40 e8       	ldi	r20, 0x80	; 128
    141a:	68 e0       	ldi	r22, 0x08	; 8
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	33 de       	rcall	.-922    	; 0x108a <udi_msc_cbw_validate>
    1424:	88 23       	and	r24, r24
    1426:	09 f4       	brne	.+2      	; 0x142a <udi_msc_cbw_received+0x194>
    1428:	65 c0       	rjmp	.+202    	; 0x14f4 <udi_msc_cbw_received+0x25e>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
    142a:	60 ee       	ldi	r22, 0xE0	; 224
    142c:	72 e2       	ldi	r23, 0x22	; 34
    142e:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    1432:	ef dc       	rcall	.-1570   	; 0xe12 <mem_read_capacity>
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	41 f0       	breq	.+16     	; 0x1448 <udi_msc_cbw_received+0x1b2>
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	19 f0       	breq	.+6      	; 0x1442 <udi_msc_cbw_received+0x1ac>
    143c:	81 11       	cpse	r24, r1
    143e:	07 c0       	rjmp	.+14     	; 0x144e <udi_msc_cbw_received+0x1b8>
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <udi_msc_cbw_received+0x1be>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    1442:	58 de       	rcall	.-848    	; 0x10f4 <udi_msc_sense_fail_busy_or_change>
		udi_msc_csw_process();
    1444:	c2 dd       	rcall	.-1148   	; 0xfca <udi_msc_csw_process>
    1446:	56 c0       	rjmp	.+172    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    1448:	5d de       	rcall	.-838    	; 0x1104 <udi_msc_sense_fail_not_present>
		udi_msc_csw_process();
    144a:	bf dd       	rcall	.-1154   	; 0xfca <udi_msc_csw_process>
    144c:	53 c0       	rjmp	.+166    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		return;
	default:
		udi_msc_sense_fail_hardware();
    144e:	38 de       	rcall	.-912    	; 0x10c0 <udi_msc_sense_fail_hardware>
		udi_msc_csw_process();
    1450:	bc dd       	rcall	.-1160   	; 0xfca <udi_msc_csw_process>
    1452:	50 c0       	rjmp	.+160    	; 0x14f4 <udi_msc_cbw_received+0x25e>
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
    1454:	e0 ee       	ldi	r30, 0xE0	; 224
    1456:	f2 e2       	ldi	r31, 0x22	; 34
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a2 e0       	ldi	r26, 0x02	; 2
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	84 83       	std	Z+4, r24	; 0x04
    1462:	95 83       	std	Z+5, r25	; 0x05
    1464:	a6 83       	std	Z+6, r26	; 0x06
    1466:	b7 83       	std	Z+7, r27	; 0x07
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
    1468:	00 81       	ld	r16, Z
    146a:	11 81       	ldd	r17, Z+1	; 0x01
    146c:	22 81       	ldd	r18, Z+2	; 0x02
    146e:	33 81       	ldd	r19, Z+3	; 0x03
    1470:	90 2f       	mov	r25, r16
    1472:	81 2f       	mov	r24, r17
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	bc 01       	movw	r22, r24
    147a:	55 27       	eor	r21, r21
    147c:	44 27       	eor	r20, r20
    147e:	92 2f       	mov	r25, r18
    1480:	83 2f       	mov	r24, r19
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	84 2b       	or	r24, r20
    1488:	95 2b       	or	r25, r21
    148a:	a6 2b       	or	r26, r22
    148c:	b7 2b       	or	r27, r23
    148e:	80 83       	st	Z, r24
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	a2 83       	std	Z+2, r26	; 0x02
    1494:	b3 83       	std	Z+3, r27	; 0x03
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
    1496:	68 e0       	ldi	r22, 0x08	; 8
    1498:	cf 01       	movw	r24, r30
    149a:	1a de       	rcall	.-972    	; 0x10d0 <udi_msc_data_send>
    149c:	2b c0       	rjmp	.+86     	; 0x14f4 <udi_msc_cbw_received+0x25e>
}


static void udi_msc_sbc_start_stop(void)
{
	bool start = 0x1 & udi_msc_cbw.CDB[4];
    149e:	90 91 33 23 	lds	r25, 0x2333	; 0x802333 <udi_msc_cbw+0x13>
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
	if (loej) {
    14a2:	91 ff       	sbrs	r25, 1
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <udi_msc_cbw_received+0x218>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
    14a6:	90 95       	com	r25
    14a8:	69 2f       	mov	r22, r25
    14aa:	61 70       	andi	r22, 0x01	; 1
    14ac:	b9 dc       	rcall	.-1678   	; 0xe20 <mem_unload>
	}
	udi_msc_sense_pass();
    14ae:	32 de       	rcall	.-924    	; 0x1114 <udi_msc_sense_pass>
	udi_msc_csw_process();
    14b0:	8c dd       	rcall	.-1256   	; 0xfca <udi_msc_csw_process>
    14b2:	20 c0       	rjmp	.+64     	; 0x14f4 <udi_msc_cbw_received+0x25e>


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
	uint8_t prevent = udi_msc_cbw.CDB[4];
	if (0 == prevent) {
    14b4:	80 91 33 23 	lds	r24, 0x2333	; 0x802333 <udi_msc_cbw+0x13>
    14b8:	81 11       	cpse	r24, r1
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <udi_msc_cbw_received+0x22a>
		udi_msc_sense_pass();
    14bc:	2b de       	rcall	.-938    	; 0x1114 <udi_msc_sense_pass>
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <udi_msc_cbw_received+0x22c>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
    14c0:	dc dd       	rcall	.-1096   	; 0x107a <udi_msc_sense_fail_cdb_invalid>
	}
	udi_msc_csw_process();
    14c2:	83 dd       	rcall	.-1274   	; 0xfca <udi_msc_csw_process>
    14c4:	17 c0       	rjmp	.+46     	; 0x14f4 <udi_msc_cbw_received+0x25e>
		udi_msc_spc_prevent_allow_medium_removal();
		break;

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
    14c6:	26 de       	rcall	.-948    	; 0x1114 <udi_msc_sense_pass>
		udi_msc_csw_process();
    14c8:	80 dd       	rcall	.-1280   	; 0xfca <udi_msc_csw_process>
		break;
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <udi_msc_cbw_received+0x25e>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	96 de       	rcall	.-724    	; 0x11fc <udi_msc_sbc_trans>
		break;
    14d0:	11 c0       	rjmp	.+34     	; 0x14f4 <udi_msc_cbw_received+0x25e>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	93 de       	rcall	.-730    	; 0x11fc <udi_msc_sbc_trans>
		break;
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <udi_msc_cbw_received+0x25e>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e2       	ldi	r23, 0x20	; 32
    14e2:	85 e0       	ldi	r24, 0x05	; 5
    14e4:	a7 dd       	rcall	.-1202   	; 0x1034 <udi_msc_sense_fail>
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
    14e6:	71 dd       	rcall	.-1310   	; 0xfca <udi_msc_csw_process>
		break;
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <udi_msc_cbw_received+0x25e>
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	01 c0       	rjmp	.+2      	; 0x14f0 <udi_msc_cbw_received+0x25a>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
    14f0:	90 e2       	ldi	r25, 0x20	; 32
    14f2:	6e cf       	rjmp	.-292    	; 0x13d0 <udi_msc_cbw_received+0x13a>
	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
		break;
	}
}
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <udi_msc_disable>:
}


void udi_msc_disable(void)
{
	udi_msc_b_trans_req = false;
    14fe:	10 92 03 23 	sts	0x2303, r1	; 0x802303 <udi_msc_b_trans_req>
	udi_msc_b_ack_trans = true;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 2d 20 	sts	0x202D, r24	; 0x80202d <udi_msc_b_ack_trans>
	udi_msc_b_reset_trans = true;
    1508:	80 93 2c 20 	sts	0x202C, r24	; 0x80202c <udi_msc_b_reset_trans>
	UDI_MSC_DISABLE_EXT();
    150c:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <main_msc_disable>
    1510:	08 95       	ret

00001512 <udi_msc_setup>:
}


bool udi_msc_setup(void)
{
	if (Udd_setup_is_in()) {
    1512:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <udd_g_ctrlreq>
    1516:	88 23       	and	r24, r24
    1518:	f4 f4       	brge	.+60     	; 0x1556 <udi_msc_setup+0x44>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    151a:	80 76       	andi	r24, 0x60	; 96
    151c:	80 32       	cpi	r24, 0x20	; 32
    151e:	d9 f5       	brne	.+118    	; 0x1596 <udi_msc_setup+0x84>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1520:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1524:	8e 3f       	cpi	r24, 0xFE	; 254
    1526:	c9 f5       	brne	.+114    	; 0x159a <udi_msc_setup+0x88>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
    1528:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    152c:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	a9 f5       	brne	.+106    	; 0x159e <udi_msc_setup+0x8c>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
    1534:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1538:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    153c:	89 2b       	or	r24, r25
    153e:	89 f5       	brne	.+98     	; 0x15a2 <udi_msc_setup+0x90>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
    1540:	e1 e8       	ldi	r30, 0x81	; 129
    1542:	f4 e2       	ldi	r31, 0x24	; 36
    1544:	8c e1       	ldi	r24, 0x1C	; 28
    1546:	93 e2       	ldi	r25, 0x23	; 35
    1548:	80 87       	std	Z+8, r24	; 0x08
    154a:	91 87       	std	Z+9, r25	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	82 87       	std	Z+10, r24	; 0x0a
    1552:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1554:	08 95       	ret
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1556:	80 76       	andi	r24, 0x60	; 96
    1558:	80 32       	cpi	r24, 0x20	; 32
    155a:	29 f5       	brne	.+74     	; 0x15a6 <udi_msc_setup+0x94>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    155c:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1560:	8f 3f       	cpi	r24, 0xFF	; 255
    1562:	19 f5       	brne	.+70     	; 0x15aa <udi_msc_setup+0x98>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
    1564:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1568:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    156c:	89 2b       	or	r24, r25
    156e:	f9 f4       	brne	.+62     	; 0x15ae <udi_msc_setup+0x9c>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
    1570:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1574:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    1578:	89 2b       	or	r24, r25
    157a:	d9 f4       	brne	.+54     	; 0x15b2 <udi_msc_setup+0xa0>
					return false;
				udi_msc_b_cbw_invalid = false;
    157c:	10 92 04 23 	sts	0x2304, r1	; 0x802304 <udi_msc_b_cbw_invalid>
				udi_msc_b_trans_req = false;
    1580:	10 92 03 23 	sts	0x2303, r1	; 0x802303 <udi_msc_b_trans_req>
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	0e 94 83 15 	call	0x2b06	; 0x2b06 <udd_ep_abort>
				udd_ep_abort(UDI_MSC_EP_IN);
    158a:	81 e8       	ldi	r24, 0x81	; 129
    158c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <udd_ep_abort>
				// Restart by CBW wait
				udi_msc_cbw_wait();
    1590:	ac dc       	rcall	.-1704   	; 0xeea <udi_msc_cbw_wait>
				return true;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	08 95       	ret
			}
		}
	}
	return false;	// Not supported request
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	08 95       	ret
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	08 95       	ret
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
					return false;	// Error for USB host
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	08 95       	ret
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	08 95       	ret
				udi_msc_cbw_wait();
				return true;
			}
		}
	}
	return false;	// Not supported request
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	08 95       	ret
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	08 95       	ret
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	08 95       	ret
				if (0 != udd_g_ctrlreq.req.wValue)
					return false;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Not supported request
}
    15b4:	08 95       	ret

000015b6 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
    15b6:	cf 93       	push	r28
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
    15b8:	c0 91 03 23 	lds	r28, 0x2303	; 0x802303 <udi_msc_b_trans_req>
    15bc:	cc 23       	and	r28, r28
    15be:	09 f4       	brne	.+2      	; 0x15c2 <udi_msc_process_trans+0xc>
    15c0:	3d c0       	rjmp	.+122    	; 0x163c <udi_msc_process_trans+0x86>
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
    15c2:	10 92 03 23 	sts	0x2303, r1	; 0x802303 <udi_msc_b_trans_req>
	udi_msc_b_reset_trans = false;
    15c6:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <udi_msc_b_reset_trans>

	// Start transfer
	if (udi_msc_b_read) {
    15ca:	80 91 02 23 	lds	r24, 0x2302	; 0x802302 <udi_msc_b_read>
    15ce:	88 23       	and	r24, r24
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <udi_msc_process_trans+0x3c>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    15d2:	20 91 fc 22 	lds	r18, 0x22FC	; 0x8022fc <udi_msc_nb_block>
    15d6:	30 91 fd 22 	lds	r19, 0x22FD	; 0x8022fd <udi_msc_nb_block+0x1>
    15da:	40 91 fe 22 	lds	r20, 0x22FE	; 0x8022fe <udi_msc_addr>
    15de:	50 91 ff 22 	lds	r21, 0x22FF	; 0x8022ff <udi_msc_addr+0x1>
    15e2:	60 91 00 23 	lds	r22, 0x2300	; 0x802300 <udi_msc_addr+0x2>
    15e6:	70 91 01 23 	lds	r23, 0x2301	; 0x802301 <udi_msc_addr+0x3>
    15ea:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    15ee:	33 dc       	rcall	.-1946   	; 0xe56 <memory_2_usb>
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <udi_msc_process_trans+0x5a>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
    15f2:	20 91 fc 22 	lds	r18, 0x22FC	; 0x8022fc <udi_msc_nb_block>
    15f6:	30 91 fd 22 	lds	r19, 0x22FD	; 0x8022fd <udi_msc_nb_block+0x1>
    15fa:	40 91 fe 22 	lds	r20, 0x22FE	; 0x8022fe <udi_msc_addr>
    15fe:	50 91 ff 22 	lds	r21, 0x22FF	; 0x8022ff <udi_msc_addr+0x1>
    1602:	60 91 00 23 	lds	r22, 0x2300	; 0x802300 <udi_msc_addr+0x2>
    1606:	70 91 01 23 	lds	r23, 0x2301	; 0x802301 <udi_msc_addr+0x3>
    160a:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <udi_msc_cbw+0xd>
    160e:	42 dc       	rcall	.-1916   	; 0xe94 <usb_2_memory>
				udi_msc_nb_block);
	}

	// Check if transfer is aborted by reset
	if (udi_msc_b_reset_trans) {
    1610:	90 91 2c 20 	lds	r25, 0x202C	; 0x80202c <udi_msc_b_reset_trans>
    1614:	99 23       	and	r25, r25
    1616:	21 f0       	breq	.+8      	; 0x1620 <udi_msc_process_trans+0x6a>
		udi_msc_b_reset_trans = false;
    1618:	10 92 2c 20 	sts	0x202C, r1	; 0x80202c <udi_msc_b_reset_trans>
		return true;
    161c:	c9 2f       	mov	r28, r25
    161e:	0e c0       	rjmp	.+28     	; 0x163c <udi_msc_process_trans+0x86>
	}

	// Check status of transfer
	switch (status) {
    1620:	82 30       	cpi	r24, 0x02	; 2
    1622:	41 f0       	breq	.+16     	; 0x1634 <udi_msc_process_trans+0x7e>
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	21 f0       	breq	.+8      	; 0x1630 <udi_msc_process_trans+0x7a>
    1628:	81 11       	cpse	r24, r1
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <udi_msc_process_trans+0x82>
	case CTRL_GOOD:
		udi_msc_sense_pass();
    162c:	73 dd       	rcall	.-1306   	; 0x1114 <udi_msc_sense_pass>
		break;
    162e:	05 c0       	rjmp	.+10     	; 0x163a <udi_msc_process_trans+0x84>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
    1630:	61 dd       	rcall	.-1342   	; 0x10f4 <udi_msc_sense_fail_busy_or_change>
		break;
    1632:	03 c0       	rjmp	.+6      	; 0x163a <udi_msc_process_trans+0x84>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
    1634:	67 dd       	rcall	.-1330   	; 0x1104 <udi_msc_sense_fail_not_present>
		break;
    1636:	01 c0       	rjmp	.+2      	; 0x163a <udi_msc_process_trans+0x84>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
    1638:	43 dd       	rcall	.-1402   	; 0x10c0 <udi_msc_sense_fail_hardware>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
    163a:	c7 dc       	rcall	.-1650   	; 0xfca <udi_msc_csw_process>
	return true;
}
    163c:	8c 2f       	mov	r24, r28
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret

00001642 <udi_msc_trans_block>:
}


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	98 2f       	mov	r25, r24
	if (!udi_msc_b_ack_trans)
    1650:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <udi_msc_b_ack_trans>
    1654:	88 23       	and	r24, r24
    1656:	09 f4       	brne	.+2      	; 0x165a <udi_msc_trans_block+0x18>
    1658:	48 c0       	rjmp	.+144    	; 0x16ea <udi_msc_trans_block+0xa8>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
    165a:	10 92 2d 20 	sts	0x202D, r1	; 0x80202d <udi_msc_b_ack_trans>
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
    165e:	21 15       	cp	r18, r1
    1660:	31 05       	cpc	r19, r1
    1662:	11 f0       	breq	.+4      	; 0x1668 <udi_msc_trans_block+0x26>
    1664:	89 01       	movw	r16, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <udi_msc_trans_block+0x2a>
    1668:	0b e6       	ldi	r16, 0x6B	; 107
    166a:	17 e0       	ldi	r17, 0x07	; 7
    166c:	91 11       	cpse	r25, r1
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <udi_msc_trans_block+0x32>
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <udi_msc_trans_block+0x34>
    1674:	81 e8       	ldi	r24, 0x81	; 129
    1676:	e9 01       	movw	r28, r18
    1678:	7a 01       	movw	r14, r20
    167a:	ab 01       	movw	r20, r22
    167c:	97 01       	movw	r18, r14
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	0e 94 bc 14 	call	0x2978	; 0x2978 <udd_ep_run>
    1684:	81 11       	cpse	r24, r1
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <udi_msc_trans_block+0x4e>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
    1688:	91 e0       	ldi	r25, 0x01	; 1
    168a:	90 93 2d 20 	sts	0x202D, r25	; 0x80202d <udi_msc_b_ack_trans>
		return false;
    168e:	2d c0       	rjmp	.+90     	; 0x16ea <udi_msc_trans_block+0xa8>
	}
	if (NULL == callback) {
    1690:	cd 2b       	or	r28, r29
    1692:	d9 f4       	brne	.+54     	; 0x16ca <udi_msc_trans_block+0x88>
		while (!udi_msc_b_ack_trans);
    1694:	80 91 2d 20 	lds	r24, 0x202D	; 0x80202d <udi_msc_b_ack_trans>
    1698:	88 23       	and	r24, r24
    169a:	e1 f3       	breq	.-8      	; 0x1694 <udi_msc_trans_block+0x52>
		if (udi_msc_b_abort_trans) {
    169c:	80 91 80 24 	lds	r24, 0x2480	; 0x802480 <udi_msc_b_abort_trans>
    16a0:	81 11       	cpse	r24, r1
    16a2:	22 c0       	rjmp	.+68     	; 0x16e8 <udi_msc_trans_block+0xa6>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
    16a4:	e0 e3       	ldi	r30, 0x30	; 48
    16a6:	f0 e2       	ldi	r31, 0x20	; 32
    16a8:	80 85       	ldd	r24, Z+8	; 0x08
    16aa:	91 85       	ldd	r25, Z+9	; 0x09
    16ac:	a2 85       	ldd	r26, Z+10	; 0x0a
    16ae:	b3 85       	ldd	r27, Z+11	; 0x0b
    16b0:	8e 19       	sub	r24, r14
    16b2:	9f 09       	sbc	r25, r15
    16b4:	a1 09       	sbc	r26, r1
    16b6:	b1 09       	sbc	r27, r1
    16b8:	80 87       	std	Z+8, r24	; 0x08
    16ba:	91 87       	std	Z+9, r25	; 0x09
    16bc:	a2 87       	std	Z+10, r26	; 0x0a
    16be:	b3 87       	std	Z+11, r27	; 0x0b
		return (!udi_msc_b_abort_trans);
    16c0:	90 91 80 24 	lds	r25, 0x2480	; 0x802480 <udi_msc_b_abort_trans>
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	89 27       	eor	r24, r25
    16c8:	10 c0       	rjmp	.+32     	; 0x16ea <udi_msc_trans_block+0xa8>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
    16ca:	e0 e3       	ldi	r30, 0x30	; 48
    16cc:	f0 e2       	ldi	r31, 0x20	; 32
    16ce:	40 85       	ldd	r20, Z+8	; 0x08
    16d0:	51 85       	ldd	r21, Z+9	; 0x09
    16d2:	62 85       	ldd	r22, Z+10	; 0x0a
    16d4:	73 85       	ldd	r23, Z+11	; 0x0b
    16d6:	4e 19       	sub	r20, r14
    16d8:	5f 09       	sbc	r21, r15
    16da:	61 09       	sbc	r22, r1
    16dc:	71 09       	sbc	r23, r1
    16de:	40 87       	std	Z+8, r20	; 0x08
    16e0:	51 87       	std	Z+9, r21	; 0x09
    16e2:	62 87       	std	Z+10, r22	; 0x0a
    16e4:	73 87       	std	Z+11, r23	; 0x0b
	return true;
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <udi_msc_trans_block+0xa8>
		return false;
	}
	if (NULL == callback) {
		while (!udi_msc_b_ack_trans);
		if (udi_msc_b_abort_trans) {
			return false;
    16e8:	80 e0       	ldi	r24, 0x00	; 0
		udi_msc_csw.dCSWDataResidue -= block_size;
		return (!udi_msc_b_abort_trans);
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
	return true;
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	08 95       	ret

000016f8 <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
    16f8:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <udc_ptr_conf>
    16fc:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1700:	01 90       	ld	r0, Z+
    1702:	f0 81       	ld	r31, Z
    1704:	e0 2d       	mov	r30, r0
    1706:	22 81       	ldd	r18, Z+2	; 0x02
    1708:	33 81       	ldd	r19, Z+3	; 0x03
    170a:	2e 0f       	add	r18, r30
    170c:	3f 1f       	adc	r19, r31
    170e:	fc 01       	movw	r30, r24
    1710:	40 81       	ld	r20, Z
    1712:	e4 0f       	add	r30, r20
    1714:	f1 1d       	adc	r31, r1
    1716:	e2 17       	cp	r30, r18
    1718:	f3 07       	cpc	r31, r19
    171a:	b8 f4       	brcc	.+46     	; 0x174a <udc_next_desc_in_iface+0x52>
    171c:	81 81       	ldd	r24, Z+1	; 0x01
    171e:	84 30       	cpi	r24, 0x04	; 4
    1720:	b9 f0       	breq	.+46     	; 0x1750 <udc_next_desc_in_iface+0x58>
    1722:	86 13       	cpse	r24, r22
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <udc_next_desc_in_iface+0x40>
    1726:	05 c0       	rjmp	.+10     	; 0x1732 <udc_next_desc_in_iface+0x3a>
    1728:	81 81       	ldd	r24, Z+1	; 0x01
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	a1 f0       	breq	.+40     	; 0x1756 <udc_next_desc_in_iface+0x5e>
    172e:	86 13       	cpse	r24, r22
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <udc_next_desc_in_iface+0x40>
    1732:	8e 2f       	mov	r24, r30
    1734:	9f 2f       	mov	r25, r31
    1736:	08 95       	ret
    1738:	80 81       	ld	r24, Z
    173a:	e8 0f       	add	r30, r24
    173c:	f1 1d       	adc	r31, r1
    173e:	e2 17       	cp	r30, r18
    1740:	f3 07       	cpc	r31, r19
    1742:	90 f3       	brcs	.-28     	; 0x1728 <udc_next_desc_in_iface+0x30>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	08 95       	ret
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	08 95       	ret
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	08 95       	ret
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	08 95       	ret

0000175c <udc_valid_address>:
    175c:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1760:	8f 77       	andi	r24, 0x7F	; 127
    1762:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <udd_set_address>
    1766:	08 95       	ret

00001768 <udc_update_iface_desc>:
    1768:	90 91 46 23 	lds	r25, 0x2346	; 0x802346 <udc_num_configuration>
    176c:	99 23       	and	r25, r25
    176e:	81 f1       	breq	.+96     	; 0x17d0 <udc_update_iface_desc+0x68>
    1770:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <udc_ptr_conf>
    1774:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1778:	01 90       	ld	r0, Z+
    177a:	f0 81       	ld	r31, Z
    177c:	e0 2d       	mov	r30, r0
    177e:	94 81       	ldd	r25, Z+4	; 0x04
    1780:	89 17       	cp	r24, r25
    1782:	40 f5       	brcc	.+80     	; 0x17d4 <udc_update_iface_desc+0x6c>
    1784:	e0 93 42 23 	sts	0x2342, r30	; 0x802342 <udc_ptr_iface>
    1788:	f0 93 43 23 	sts	0x2343, r31	; 0x802343 <udc_ptr_iface+0x1>
    178c:	22 81       	ldd	r18, Z+2	; 0x02
    178e:	33 81       	ldd	r19, Z+3	; 0x03
    1790:	2e 0f       	add	r18, r30
    1792:	3f 1f       	adc	r19, r31
    1794:	e2 17       	cp	r30, r18
    1796:	f3 07       	cpc	r31, r19
    1798:	f8 f4       	brcc	.+62     	; 0x17d8 <udc_update_iface_desc+0x70>
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	94 30       	cpi	r25, 0x04	; 4
    179e:	61 f4       	brne	.+24     	; 0x17b8 <udc_update_iface_desc+0x50>
    17a0:	92 81       	ldd	r25, Z+2	; 0x02
    17a2:	98 13       	cpse	r25, r24
    17a4:	09 c0       	rjmp	.+18     	; 0x17b8 <udc_update_iface_desc+0x50>
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	96 13       	cpse	r25, r22
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <udc_update_iface_desc+0x50>
    17ac:	e0 93 42 23 	sts	0x2342, r30	; 0x802342 <udc_ptr_iface>
    17b0:	f0 93 43 23 	sts	0x2343, r31	; 0x802343 <udc_ptr_iface+0x1>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	08 95       	ret
    17b8:	90 81       	ld	r25, Z
    17ba:	e9 0f       	add	r30, r25
    17bc:	f1 1d       	adc	r31, r1
    17be:	e2 17       	cp	r30, r18
    17c0:	f3 07       	cpc	r31, r19
    17c2:	58 f3       	brcs	.-42     	; 0x179a <udc_update_iface_desc+0x32>
    17c4:	e0 93 42 23 	sts	0x2342, r30	; 0x802342 <udc_ptr_iface>
    17c8:	f0 93 43 23 	sts	0x2343, r31	; 0x802343 <udc_ptr_iface+0x1>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	08 95       	ret
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	08 95       	ret
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	08 95       	ret
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	08 95       	ret

000017dc <udc_iface_disable>:
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	c8 2f       	mov	r28, r24
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	be df       	rcall	.-132    	; 0x1768 <udc_update_iface_desc>
    17ec:	18 2f       	mov	r17, r24
    17ee:	88 23       	and	r24, r24
    17f0:	81 f1       	breq	.+96     	; 0x1852 <udc_iface_disable+0x76>
    17f2:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <udc_ptr_conf>
    17f6:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    17fa:	ec 2f       	mov	r30, r28
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	12 96       	adiw	r26, 0x02	; 2
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	13 97       	sbiw	r26, 0x03	; 3
    180a:	e8 0f       	add	r30, r24
    180c:	f9 1f       	adc	r31, r25
    180e:	e0 80       	ld	r14, Z
    1810:	f1 80       	ldd	r15, Z+1	; 0x01
    1812:	d7 01       	movw	r26, r14
    1814:	16 96       	adiw	r26, 0x06	; 6
    1816:	ed 91       	ld	r30, X+
    1818:	fc 91       	ld	r31, X
    181a:	17 97       	sbiw	r26, 0x07	; 7
    181c:	09 95       	icall
    181e:	68 2f       	mov	r22, r24
    1820:	8c 2f       	mov	r24, r28
    1822:	a2 df       	rcall	.-188    	; 0x1768 <udc_update_iface_desc>
    1824:	18 2f       	mov	r17, r24
    1826:	88 23       	and	r24, r24
    1828:	a1 f0       	breq	.+40     	; 0x1852 <udc_iface_disable+0x76>
    182a:	c0 91 42 23 	lds	r28, 0x2342	; 0x802342 <udc_ptr_iface>
    182e:	d0 91 43 23 	lds	r29, 0x2343	; 0x802343 <udc_ptr_iface+0x1>
    1832:	65 e0       	ldi	r22, 0x05	; 5
    1834:	ce 01       	movw	r24, r28
    1836:	60 df       	rcall	.-320    	; 0x16f8 <udc_next_desc_in_iface>
    1838:	ec 01       	movw	r28, r24
    183a:	89 2b       	or	r24, r25
    183c:	21 f0       	breq	.+8      	; 0x1846 <udc_iface_disable+0x6a>
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <udd_ep_free>
    1844:	f6 cf       	rjmp	.-20     	; 0x1832 <udc_iface_disable+0x56>
    1846:	d7 01       	movw	r26, r14
    1848:	12 96       	adiw	r26, 0x02	; 2
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	13 97       	sbiw	r26, 0x03	; 3
    1850:	09 95       	icall
    1852:	81 2f       	mov	r24, r17
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	08 95       	ret

00001860 <udc_iface_enable>:
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	18 2f       	mov	r17, r24
    1868:	7f df       	rcall	.-258    	; 0x1768 <udc_update_iface_desc>
    186a:	88 23       	and	r24, r24
    186c:	39 f1       	breq	.+78     	; 0x18bc <udc_iface_enable+0x5c>
    186e:	c0 91 42 23 	lds	r28, 0x2342	; 0x802342 <udc_ptr_iface>
    1872:	d0 91 43 23 	lds	r29, 0x2343	; 0x802343 <udc_ptr_iface+0x1>
    1876:	65 e0       	ldi	r22, 0x05	; 5
    1878:	ce 01       	movw	r24, r28
    187a:	3e df       	rcall	.-388    	; 0x16f8 <udc_next_desc_in_iface>
    187c:	ec 01       	movw	r28, r24
    187e:	89 2b       	or	r24, r25
    1880:	41 f0       	breq	.+16     	; 0x1892 <udc_iface_enable+0x32>
    1882:	4c 81       	ldd	r20, Y+4	; 0x04
    1884:	5d 81       	ldd	r21, Y+5	; 0x05
    1886:	6b 81       	ldd	r22, Y+3	; 0x03
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9c d7       	rcall	.+3896   	; 0x27c4 <udd_ep_alloc>
    188c:	81 11       	cpse	r24, r1
    188e:	f3 cf       	rjmp	.-26     	; 0x1876 <udc_iface_enable+0x16>
    1890:	15 c0       	rjmp	.+42     	; 0x18bc <udc_iface_enable+0x5c>
    1892:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <udc_ptr_conf>
    1896:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    189a:	e1 2f       	mov	r30, r17
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	12 96       	adiw	r26, 0x02	; 2
    18a4:	8d 91       	ld	r24, X+
    18a6:	9c 91       	ld	r25, X
    18a8:	13 97       	sbiw	r26, 0x03	; 3
    18aa:	e8 0f       	add	r30, r24
    18ac:	f9 1f       	adc	r31, r25
    18ae:	01 90       	ld	r0, Z+
    18b0:	f0 81       	ld	r31, Z
    18b2:	e0 2d       	mov	r30, r0
    18b4:	01 90       	ld	r0, Z+
    18b6:	f0 81       	ld	r31, Z
    18b8:	e0 2d       	mov	r30, r0
    18ba:	09 95       	icall
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	08 95       	ret

000018c4 <udc_start>:
    18c4:	eb c6       	rjmp	.+3542   	; 0x269c <udd_enable>
    18c6:	08 95       	ret

000018c8 <udc_reset>:
    18c8:	cf 93       	push	r28
    18ca:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <udc_num_configuration>
    18ce:	88 23       	and	r24, r24
    18d0:	c1 f0       	breq	.+48     	; 0x1902 <udc_reset+0x3a>
    18d2:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <udc_ptr_conf>
    18d6:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    18da:	01 90       	ld	r0, Z+
    18dc:	f0 81       	ld	r31, Z
    18de:	e0 2d       	mov	r30, r0
    18e0:	84 81       	ldd	r24, Z+4	; 0x04
    18e2:	88 23       	and	r24, r24
    18e4:	71 f0       	breq	.+28     	; 0x1902 <udc_reset+0x3a>
    18e6:	c0 e0       	ldi	r28, 0x00	; 0
    18e8:	8c 2f       	mov	r24, r28
    18ea:	78 df       	rcall	.-272    	; 0x17dc <udc_iface_disable>
    18ec:	cf 5f       	subi	r28, 0xFF	; 255
    18ee:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <udc_ptr_conf>
    18f2:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    18f6:	01 90       	ld	r0, Z+
    18f8:	f0 81       	ld	r31, Z
    18fa:	e0 2d       	mov	r30, r0
    18fc:	84 81       	ldd	r24, Z+4	; 0x04
    18fe:	c8 17       	cp	r28, r24
    1900:	98 f3       	brcs	.-26     	; 0x18e8 <udc_reset+0x20>
    1902:	10 92 46 23 	sts	0x2346, r1	; 0x802346 <udc_num_configuration>
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <udc_device_status>
    190e:	90 93 4b 23 	sts	0x234B, r25	; 0x80234b <udc_device_status+0x1>
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
    1916:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
    1918:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <udc_num_configuration>
    191c:	88 23       	and	r24, r24
    191e:	49 f1       	breq	.+82     	; 0x1972 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1920:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <udc_ptr_conf>
    1924:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1928:	ed 91       	ld	r30, X+
    192a:	fc 91       	ld	r31, X
    192c:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    192e:	84 81       	ldd	r24, Z+4	; 0x04
    1930:	88 23       	and	r24, r24
    1932:	f9 f0       	breq	.+62     	; 0x1972 <udc_sof_notify+0x5c>
    1934:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    1936:	ec 2f       	mov	r30, r28
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	ee 0f       	add	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	12 96       	adiw	r26, 0x02	; 2
    1940:	8d 91       	ld	r24, X+
    1942:	9c 91       	ld	r25, X
    1944:	13 97       	sbiw	r26, 0x03	; 3
    1946:	e8 0f       	add	r30, r24
    1948:	f9 1f       	adc	r31, r25
    194a:	01 90       	ld	r0, Z+
    194c:	f0 81       	ld	r31, Z
    194e:	e0 2d       	mov	r30, r0
    1950:	00 84       	ldd	r0, Z+8	; 0x08
    1952:	f1 85       	ldd	r31, Z+9	; 0x09
    1954:	e0 2d       	mov	r30, r0
    1956:	30 97       	sbiw	r30, 0x00	; 0
    1958:	09 f0       	breq	.+2      	; 0x195c <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    195a:	09 95       	icall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    195c:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    195e:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <udc_ptr_conf>
    1962:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1966:	ed 91       	ld	r30, X+
    1968:	fc 91       	ld	r31, X
    196a:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    196c:	84 81       	ldd	r24, Z+4	; 0x04
    196e:	c8 17       	cp	r28, r24
    1970:	10 f3       	brcs	.-60     	; 0x1936 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    197e:	e1 e8       	ldi	r30, 0x81	; 129
    1980:	f4 e2       	ldi	r31, 0x24	; 36
    1982:	12 86       	std	Z+10, r1	; 0x0a
    1984:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
    1986:	14 86       	std	Z+12, r1	; 0x0c
    1988:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
    198a:	16 86       	std	Z+14, r1	; 0x0e
    198c:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
    198e:	80 81       	ld	r24, Z
    1990:	88 23       	and	r24, r24
    1992:	0c f0       	brlt	.+2      	; 0x1996 <udc_process_setup+0x20>
    1994:	63 c2       	rjmp	.+1222   	; 0x1e5c <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1996:	20 91 87 24 	lds	r18, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    199a:	30 91 88 24 	lds	r19, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    199e:	21 15       	cp	r18, r1
    19a0:	31 05       	cpc	r19, r1
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <udc_process_setup+0x30>
    19a4:	56 c2       	rjmp	.+1196   	; 0x1e52 <udc_process_setup+0x4dc>
    19a6:	51 c2       	rjmp	.+1186   	; 0x1e4a <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    19a8:	8f 71       	andi	r24, 0x1F	; 31
    19aa:	09 f0       	breq	.+2      	; 0x19ae <udc_process_setup+0x38>
    19ac:	a7 c0       	rjmp	.+334    	; 0x1afc <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    19ae:	90 91 82 24 	lds	r25, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    19b2:	96 30       	cpi	r25, 0x06	; 6
    19b4:	79 f0       	breq	.+30     	; 0x19d4 <udc_process_setup+0x5e>
    19b6:	98 30       	cpi	r25, 0x08	; 8
    19b8:	09 f4       	brne	.+2      	; 0x19bc <udc_process_setup+0x46>
    19ba:	96 c0       	rjmp	.+300    	; 0x1ae8 <udc_process_setup+0x172>
    19bc:	91 11       	cpse	r25, r1
    19be:	9e c0       	rjmp	.+316    	; 0x1afc <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	09 f0       	breq	.+2      	; 0x19c8 <udc_process_setup+0x52>
    19c6:	ca c1       	rjmp	.+916    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	8a e4       	ldi	r24, 0x4A	; 74
    19ce:	93 e2       	ldi	r25, 0x23	; 35
    19d0:	f2 d6       	rcall	.+3556   	; 0x27b6 <udd_set_setup_payload>
    19d2:	4d c2       	rjmp	.+1178   	; 0x1e6e <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    19d4:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    19d8:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    19dc:	29 2f       	mov	r18, r25
    19de:	33 27       	eor	r19, r19
    19e0:	22 30       	cpi	r18, 0x02	; 2
    19e2:	31 05       	cpc	r19, r1
    19e4:	a9 f0       	breq	.+42     	; 0x1a10 <udc_process_setup+0x9a>
    19e6:	24 f4       	brge	.+8      	; 0x19f0 <udc_process_setup+0x7a>
    19e8:	21 30       	cpi	r18, 0x01	; 1
    19ea:	31 05       	cpc	r19, r1
    19ec:	41 f0       	breq	.+16     	; 0x19fe <udc_process_setup+0x88>
    19ee:	ad c1       	rjmp	.+858    	; 0x1d4a <udc_process_setup+0x3d4>
    19f0:	23 30       	cpi	r18, 0x03	; 3
    19f2:	31 05       	cpc	r19, r1
    19f4:	d9 f1       	breq	.+118    	; 0x1a6c <udc_process_setup+0xf6>
    19f6:	2f 30       	cpi	r18, 0x0F	; 15
    19f8:	31 05       	cpc	r19, r1
    19fa:	51 f1       	breq	.+84     	; 0x1a50 <udc_process_setup+0xda>
    19fc:	a6 c1       	rjmp	.+844    	; 0x1d4a <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
    19fe:	80 91 4a 20 	lds	r24, 0x204A	; 0x80204a <udc_config>
    1a02:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <udc_config+0x1>
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1a06:	dc 01       	movw	r26, r24
    1a08:	6c 91       	ld	r22, X
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	d4 d6       	rcall	.+3496   	; 0x27b6 <udd_set_setup_payload>
    1a0e:	5d c0       	rjmp	.+186    	; 0x1aca <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1a10:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <udc_config>
    1a14:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <udc_config+0x1>
    1a18:	21 89       	ldd	r18, Z+17	; 0x11
    1a1a:	82 17       	cp	r24, r18
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <udc_process_setup+0xaa>
    1a1e:	9e c1       	rjmp	.+828    	; 0x1d5c <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1a20:	99 27       	eor	r25, r25
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config+0x2>
    1a2e:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x3>
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	62 81       	ldd	r22, Z+2	; 0x02
    1a3e:	73 81       	ldd	r23, Z+3	; 0x03
    1a40:	ba d6       	rcall	.+3444   	; 0x27b6 <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1a42:	e0 91 89 24 	lds	r30, 0x2489	; 0x802489 <udd_g_ctrlreq+0x8>
    1a46:	f0 91 8a 24 	lds	r31, 0x248A	; 0x80248a <udd_g_ctrlreq+0x9>
    1a4a:	82 e0       	ldi	r24, 0x02	; 2
    1a4c:	81 83       	std	Z+1, r24	; 0x01
    1a4e:	3d c0       	rjmp	.+122    	; 0x1aca <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    1a50:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <udc_config+0x4>
    1a54:	90 91 4f 20 	lds	r25, 0x204F	; 0x80204f <udc_config+0x5>
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <udc_process_setup+0xe8>
    1a5c:	7f c1       	rjmp	.+766    	; 0x1d5c <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    1a5e:	dc 01       	movw	r26, r24
    1a60:	12 96       	adiw	r26, 0x02	; 2
    1a62:	6d 91       	ld	r22, X+
    1a64:	7c 91       	ld	r23, X
    1a66:	13 97       	sbiw	r26, 0x03	; 3
    1a68:	a6 d6       	rcall	.+3404   	; 0x27b6 <udd_set_setup_payload>
    1a6a:	2f c0       	rjmp	.+94     	; 0x1aca <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1a6c:	99 27       	eor	r25, r25
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	91 f0       	breq	.+36     	; 0x1a98 <udc_process_setup+0x122>
    1a74:	58 f0       	brcs	.+22     	; 0x1a8c <udc_process_setup+0x116>
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <udc_process_setup+0x108>
    1a7c:	f4 c1       	rjmp	.+1000   	; 0x1e66 <udc_process_setup+0x4f0>
    1a7e:	03 97       	sbiw	r24, 0x03	; 3
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <udc_process_setup+0x10e>
    1a82:	6c c1       	rjmp	.+728    	; 0x1d5c <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    1a84:	2c e0       	ldi	r18, 0x0C	; 12
		str = udc_get_string_serial_name();
    1a86:	8d ec       	ldi	r24, 0xCD	; 205
    1a88:	90 e2       	ldi	r25, 0x20	; 32
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1a8c:	64 e0       	ldi	r22, 0x04	; 4
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	84 eb       	ldi	r24, 0xB4	; 180
    1a92:	90 e2       	ldi	r25, 0x20	; 32
    1a94:	90 d6       	rcall	.+3360   	; 0x27b6 <udd_set_setup_payload>
    1a96:	19 c0       	rjmp	.+50     	; 0x1aca <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
    1a98:	8a ea       	ldi	r24, 0xAA	; 170
    1a9a:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1a9c:	29 e0       	ldi	r18, 0x09	; 9
    1a9e:	38 2f       	mov	r19, r24
    1aa0:	ae e8       	ldi	r26, 0x8E	; 142
    1aa2:	b0 e2       	ldi	r27, 0x20	; 32
    1aa4:	e8 2f       	mov	r30, r24
    1aa6:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    1aa8:	81 91       	ld	r24, Z+
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	8d 93       	st	X+, r24
    1aae:	9d 93       	st	X+, r25
    1ab0:	8e 2f       	mov	r24, r30
    1ab2:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    1ab4:	82 17       	cp	r24, r18
    1ab6:	c0 f3       	brcs	.-16     	; 0x1aa8 <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1ab8:	62 2f       	mov	r22, r18
    1aba:	66 0f       	add	r22, r22
    1abc:	6e 5f       	subi	r22, 0xFE	; 254
    1abe:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <udc_string_desc>
		udd_set_setup_payload(
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	8c e8       	ldi	r24, 0x8C	; 140
    1ac6:	90 e2       	ldi	r25, 0x20	; 32
    1ac8:	76 d6       	rcall	.+3308   	; 0x27b6 <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1aca:	e1 e8       	ldi	r30, 0x81	; 129
    1acc:	f4 e2       	ldi	r31, 0x24	; 36
    1ace:	86 81       	ldd	r24, Z+6	; 0x06
    1ad0:	97 81       	ldd	r25, Z+7	; 0x07
    1ad2:	22 85       	ldd	r18, Z+10	; 0x0a
    1ad4:	33 85       	ldd	r19, Z+11	; 0x0b
    1ad6:	82 17       	cp	r24, r18
    1ad8:	93 07       	cpc	r25, r19
    1ada:	08 f0       	brcs	.+2      	; 0x1ade <udc_process_setup+0x168>
    1adc:	c8 c1       	rjmp	.+912    	; 0x1e6e <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1ade:	80 93 8b 24 	sts	0x248B, r24	; 0x80248b <udd_g_ctrlreq+0xa>
    1ae2:	90 93 8c 24 	sts	0x248C, r25	; 0x80248c <udd_g_ctrlreq+0xb>
    1ae6:	c3 c1       	rjmp	.+902    	; 0x1e6e <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
    1ae8:	21 30       	cpi	r18, 0x01	; 1
    1aea:	31 05       	cpc	r19, r1
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <udc_process_setup+0x17a>
    1aee:	36 c1       	rjmp	.+620    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	86 e4       	ldi	r24, 0x46	; 70
    1af6:	93 e2       	ldi	r25, 0x23	; 35
    1af8:	5e d6       	rcall	.+3260   	; 0x27b6 <udd_set_setup_payload>
    1afa:	b9 c1       	rjmp	.+882    	; 0x1e6e <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	e1 f5       	brne	.+120    	; 0x1b78 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b00:	90 91 82 24 	lds	r25, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1b04:	9a 30       	cpi	r25, 0x0A	; 10
    1b06:	c1 f5       	brne	.+112    	; 0x1b78 <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1b08:	21 30       	cpi	r18, 0x01	; 1
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <udc_process_setup+0x19a>
    1b0e:	26 c1       	rjmp	.+588    	; 0x1d5c <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1b10:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <udc_num_configuration>
    1b14:	88 23       	and	r24, r24
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <udc_process_setup+0x1a4>
    1b18:	21 c1       	rjmp	.+578    	; 0x1d5c <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1b1a:	c0 91 85 24 	lds	r28, 0x2485	; 0x802485 <udd_g_ctrlreq+0x4>
    1b1e:	d0 91 86 24 	lds	r29, 0x2486	; 0x802486 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1b22:	00 91 44 23 	lds	r16, 0x2344	; 0x802344 <udc_ptr_conf>
    1b26:	10 91 45 23 	lds	r17, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1b2a:	d8 01       	movw	r26, r16
    1b2c:	ed 91       	ld	r30, X+
    1b2e:	fc 91       	ld	r31, X
    1b30:	84 81       	ldd	r24, Z+4	; 0x04
    1b32:	c8 17       	cp	r28, r24
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <udc_process_setup+0x1c2>
    1b36:	12 c1       	rjmp	.+548    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	8c 2f       	mov	r24, r28
    1b3c:	15 de       	rcall	.-982    	; 0x1768 <udc_update_iface_desc>
    1b3e:	88 23       	and	r24, r24
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <udc_process_setup+0x1ce>
    1b42:	0c c1       	rjmp	.+536    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1b44:	ce 01       	movw	r24, r28
    1b46:	99 27       	eor	r25, r25
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	d8 01       	movw	r26, r16
    1b4e:	12 96       	adiw	r26, 0x02	; 2
    1b50:	ed 91       	ld	r30, X+
    1b52:	fc 91       	ld	r31, X
    1b54:	13 97       	sbiw	r26, 0x03	; 3
    1b56:	e8 0f       	add	r30, r24
    1b58:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
    1b5a:	01 90       	ld	r0, Z+
    1b5c:	f0 81       	ld	r31, Z
    1b5e:	e0 2d       	mov	r30, r0
    1b60:	86 81       	ldd	r24, Z+6	; 0x06
    1b62:	97 81       	ldd	r25, Z+7	; 0x07
    1b64:	fc 01       	movw	r30, r24
    1b66:	09 95       	icall
    1b68:	80 93 48 23 	sts	0x2348, r24	; 0x802348 <udc_iface_setting>

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	88 e4       	ldi	r24, 0x48	; 72
    1b72:	93 e2       	ldi	r25, 0x23	; 35
    1b74:	20 d6       	rcall	.+3136   	; 0x27b6 <udd_set_setup_payload>
    1b76:	7b c1       	rjmp	.+758    	; 0x1e6e <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	09 f0       	breq	.+2      	; 0x1b7e <udc_process_setup+0x208>
    1b7c:	ef c0       	rjmp	.+478    	; 0x1d5c <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1b7e:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1b82:	81 11       	cpse	r24, r1
    1b84:	e4 c0       	rjmp	.+456    	; 0x1d4e <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <udc_process_setup+0x218>
    1b8c:	e7 c0       	rjmp	.+462    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    1b8e:	80 91 85 24 	lds	r24, 0x2485	; 0x802485 <udd_g_ctrlreq+0x4>
    1b92:	a0 d6       	rcall	.+3392   	; 0x28d4 <udd_ep_is_halted>
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	80 93 40 23 	sts	0x2340, r24	; 0x802340 <udc_ep_status.4544>
    1b9a:	90 93 41 23 	sts	0x2341, r25	; 0x802341 <udc_ep_status.4544+0x1>
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	80 e4       	ldi	r24, 0x40	; 64
    1ba4:	93 e2       	ldi	r25, 0x23	; 35
    1ba6:	07 d6       	rcall	.+3086   	; 0x27b6 <udd_set_setup_payload>
    1ba8:	62 c1       	rjmp	.+708    	; 0x1e6e <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1baa:	8f 71       	andi	r24, 0x1F	; 31
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <udc_process_setup+0x23a>
    1bae:	83 c0       	rjmp	.+262    	; 0x1cb6 <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1bb0:	90 91 82 24 	lds	r25, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1bb4:	93 30       	cpi	r25, 0x03	; 3
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <udc_process_setup+0x244>
    1bb8:	cc c0       	rjmp	.+408    	; 0x1d52 <udc_process_setup+0x3dc>
    1bba:	18 f4       	brcc	.+6      	; 0x1bc2 <udc_process_setup+0x24c>
    1bbc:	91 30       	cpi	r25, 0x01	; 1
    1bbe:	a1 f0       	breq	.+40     	; 0x1be8 <udc_process_setup+0x272>
    1bc0:	7a c0       	rjmp	.+244    	; 0x1cb6 <udc_process_setup+0x340>
    1bc2:	95 30       	cpi	r25, 0x05	; 5
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <udc_process_setup+0x256>
    1bc6:	99 30       	cpi	r25, 0x09	; 9
    1bc8:	39 f1       	breq	.+78     	; 0x1c18 <udc_process_setup+0x2a2>
    1bca:	75 c0       	rjmp	.+234    	; 0x1cb6 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1bcc:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1bd0:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1bd4:	89 2b       	or	r24, r25
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <udc_process_setup+0x264>
    1bd8:	c1 c0       	rjmp	.+386    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1bda:	8e ea       	ldi	r24, 0xAE	; 174
    1bdc:	9b e0       	ldi	r25, 0x0B	; 11
    1bde:	80 93 8d 24 	sts	0x248D, r24	; 0x80248d <udd_g_ctrlreq+0xc>
    1be2:	90 93 8e 24 	sts	0x248E, r25	; 0x80248e <udd_g_ctrlreq+0xd>
    1be6:	43 c1       	rjmp	.+646    	; 0x1e6e <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1be8:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1bec:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1bf0:	89 2b       	or	r24, r25
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <udc_process_setup+0x280>
    1bf4:	b3 c0       	rjmp	.+358    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1bf6:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1bfa:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <udc_process_setup+0x28e>
    1c02:	ac c0       	rjmp	.+344    	; 0x1d5c <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    1c04:	80 91 4a 23 	lds	r24, 0x234A	; 0x80234a <udc_device_status>
    1c08:	90 91 4b 23 	lds	r25, 0x234B	; 0x80234b <udc_device_status+0x1>
    1c0c:	8d 7f       	andi	r24, 0xFD	; 253
    1c0e:	80 93 4a 23 	sts	0x234A, r24	; 0x80234a <udc_device_status>
    1c12:	90 93 4b 23 	sts	0x234B, r25	; 0x80234b <udc_device_status+0x1>
    1c16:	2b c1       	rjmp	.+598    	; 0x1e6e <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1c18:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1c1c:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1c20:	89 2b       	or	r24, r25
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <udc_process_setup+0x2b0>
    1c24:	9b c0       	rjmp	.+310    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1c26:	bf d5       	rcall	.+2942   	; 0x27a6 <udd_getaddress>
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <udc_process_setup+0x2b8>
    1c2c:	97 c0       	rjmp	.+302    	; 0x1d5c <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c2e:	20 91 83 24 	lds	r18, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1c32:	30 91 84 24 	lds	r19, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    1c36:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
    1c38:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <udc_config>
    1c3c:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <udc_config+0x1>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    1c40:	81 89       	ldd	r24, Z+17	; 0x11
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	82 17       	cp	r24, r18
    1c46:	93 07       	cpc	r25, r19
    1c48:	08 f4       	brcc	.+2      	; 0x1c4c <udc_process_setup+0x2d6>
    1c4a:	88 c0       	rjmp	.+272    	; 0x1d5c <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
    1c4c:	3d de       	rcall	.-902    	; 0x18c8 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1c4e:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1c52:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    1c56:	80 93 46 23 	sts	0x2346, r24	; 0x802346 <udc_num_configuration>
	if (udc_num_configuration == 0) {
    1c5a:	88 23       	and	r24, r24
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <udc_process_setup+0x2ea>
    1c5e:	07 c1       	rjmp	.+526    	; 0x1e6e <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    1c60:	99 27       	eor	r25, r25
    1c62:	81 50       	subi	r24, 0x01	; 1
    1c64:	90 4c       	sbci	r25, 0xC0	; 192
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <udc_config+0x2>
    1c72:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <udc_config+0x3>
    1c76:	e8 0f       	add	r30, r24
    1c78:	f9 1f       	adc	r31, r25
    1c7a:	e0 93 44 23 	sts	0x2344, r30	; 0x802344 <udc_ptr_conf>
    1c7e:	f0 93 45 23 	sts	0x2345, r31	; 0x802345 <udc_ptr_conf+0x1>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1c82:	01 90       	ld	r0, Z+
    1c84:	f0 81       	ld	r31, Z
    1c86:	e0 2d       	mov	r30, r0
    1c88:	84 81       	ldd	r24, Z+4	; 0x04
    1c8a:	88 23       	and	r24, r24
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <udc_process_setup+0x31a>
    1c8e:	ef c0       	rjmp	.+478    	; 0x1e6e <udc_process_setup+0x4f8>
    1c90:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	8c 2f       	mov	r24, r28
    1c96:	e4 dd       	rcall	.-1080   	; 0x1860 <udc_iface_enable>
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <udc_process_setup+0x328>
    1c9c:	5f c0       	rjmp	.+190    	; 0x1d5c <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1c9e:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ca0:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <udc_ptr_conf>
    1ca4:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1ca8:	01 90       	ld	r0, Z+
    1caa:	f0 81       	ld	r31, Z
    1cac:	e0 2d       	mov	r30, r0
    1cae:	84 81       	ldd	r24, Z+4	; 0x04
    1cb0:	c8 17       	cp	r28, r24
    1cb2:	78 f3       	brcs	.-34     	; 0x1c92 <udc_process_setup+0x31c>
    1cb4:	dc c0       	rjmp	.+440    	; 0x1e6e <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	e1 f4       	brne	.+56     	; 0x1cf2 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cba:	90 91 82 24 	lds	r25, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1cbe:	9b 30       	cpi	r25, 0x0B	; 11
    1cc0:	c1 f4       	brne	.+48     	; 0x1cf2 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    1cc2:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1cc6:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1cca:	89 2b       	or	r24, r25
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <udc_process_setup+0x35a>
    1cce:	46 c0       	rjmp	.+140    	; 0x1d5c <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
    1cd0:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <udc_num_configuration>
    1cd4:	88 23       	and	r24, r24
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <udc_process_setup+0x364>
    1cd8:	41 c0       	rjmp	.+130    	; 0x1d5c <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1cda:	e1 e8       	ldi	r30, 0x81	; 129
    1cdc:	f4 e2       	ldi	r31, 0x24	; 36
    1cde:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    1ce0:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1ce2:	8c 2f       	mov	r24, r28
    1ce4:	7b dd       	rcall	.-1290   	; 0x17dc <udc_iface_disable>
    1ce6:	88 23       	and	r24, r24
    1ce8:	c9 f1       	breq	.+114    	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1cea:	6d 2f       	mov	r22, r29
    1cec:	8c 2f       	mov	r24, r28
    1cee:	b8 dd       	rcall	.-1168   	; 0x1860 <udc_iface_enable>
    1cf0:	33 c0       	rjmp	.+102    	; 0x1d58 <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	99 f5       	brne	.+102    	; 0x1d5c <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1cf6:	80 91 82 24 	lds	r24, 0x2482	; 0x802482 <udd_g_ctrlreq+0x1>
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	19 f0       	breq	.+6      	; 0x1d04 <udc_process_setup+0x38e>
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	89 f0       	breq	.+34     	; 0x1d24 <udc_process_setup+0x3ae>
    1d02:	29 c0       	rjmp	.+82     	; 0x1d56 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d04:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1d08:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	31 f5       	brne	.+76     	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d10:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1d14:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    1d18:	89 2b       	or	r24, r25
    1d1a:	01 f5       	brne	.+64     	; 0x1d5c <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d1c:	80 91 85 24 	lds	r24, 0x2485	; 0x802485 <udd_g_ctrlreq+0x4>
    1d20:	f4 d5       	rcall	.+3048   	; 0x290a <udd_ep_clear_halt>
    1d22:	1a c0       	rjmp	.+52     	; 0x1d58 <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1d24:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    1d28:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    1d2c:	89 2b       	or	r24, r25
    1d2e:	b1 f4       	brne	.+44     	; 0x1d5c <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1d30:	80 91 83 24 	lds	r24, 0x2483	; 0x802483 <udd_g_ctrlreq+0x2>
    1d34:	90 91 84 24 	lds	r25, 0x2484	; 0x802484 <udd_g_ctrlreq+0x3>
    1d38:	89 2b       	or	r24, r25
    1d3a:	81 f4       	brne	.+32     	; 0x1d5c <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d3c:	c1 e8       	ldi	r28, 0x81	; 129
    1d3e:	d4 e2       	ldi	r29, 0x24	; 36
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	e1 d6       	rcall	.+3522   	; 0x2b06 <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	44 d7       	rcall	.+3720   	; 0x2bd0 <udd_ep_set_halt>
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
    1d56:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    1d58:	81 11       	cpse	r24, r1
    1d5a:	8a c0       	rjmp	.+276    	; 0x1e70 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1d5c:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <udd_g_ctrlreq>
    1d60:	8f 71       	andi	r24, 0x1F	; 31
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	71 f5       	brne	.+92     	; 0x1dc2 <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1d66:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <udc_num_configuration>
    1d6a:	88 23       	and	r24, r24
    1d6c:	51 f1       	breq	.+84     	; 0x1dc2 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1d6e:	00 91 85 24 	lds	r16, 0x2485	; 0x802485 <udd_g_ctrlreq+0x4>
    1d72:	10 91 86 24 	lds	r17, 0x2486	; 0x802486 <udd_g_ctrlreq+0x5>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1d76:	c0 91 44 23 	lds	r28, 0x2344	; 0x802344 <udc_ptr_conf>
    1d7a:	d0 91 45 23 	lds	r29, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1d7e:	e8 81       	ld	r30, Y
    1d80:	f9 81       	ldd	r31, Y+1	; 0x01
    1d82:	84 81       	ldd	r24, Z+4	; 0x04
    1d84:	08 17       	cp	r16, r24
    1d86:	e8 f4       	brcc	.+58     	; 0x1dc2 <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	80 2f       	mov	r24, r16
    1d8c:	ed dc       	rcall	.-1574   	; 0x1768 <udc_update_iface_desc>
    1d8e:	88 23       	and	r24, r24
    1d90:	c1 f0       	breq	.+48     	; 0x1dc2 <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1d92:	f8 01       	movw	r30, r16
    1d94:	ff 27       	eor	r31, r31
    1d96:	cf 01       	movw	r24, r30
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d9e:	fb 81       	ldd	r31, Y+3	; 0x03
    1da0:	e8 0f       	add	r30, r24
    1da2:	f9 1f       	adc	r31, r25
    1da4:	c0 81       	ld	r28, Z
    1da6:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1da8:	ee 81       	ldd	r30, Y+6	; 0x06
    1daa:	ff 81       	ldd	r31, Y+7	; 0x07
    1dac:	09 95       	icall
    1dae:	68 2f       	mov	r22, r24
    1db0:	80 2f       	mov	r24, r16
    1db2:	da dc       	rcall	.-1612   	; 0x1768 <udc_update_iface_desc>
    1db4:	88 23       	and	r24, r24
    1db6:	29 f0       	breq	.+10     	; 0x1dc2 <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1db8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dba:	fd 81       	ldd	r31, Y+5	; 0x05
    1dbc:	09 95       	icall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	57 c0       	rjmp	.+174    	; 0x1e70 <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1dc2:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <udd_g_ctrlreq>
    1dc6:	8f 71       	andi	r24, 0x1F	; 31
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	09 f0       	breq	.+2      	; 0x1dce <udc_process_setup+0x458>
    1dcc:	40 c0       	rjmp	.+128    	; 0x1e4e <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1dce:	80 91 46 23 	lds	r24, 0x2346	; 0x802346 <udc_num_configuration>
    1dd2:	88 23       	and	r24, r24
    1dd4:	b1 f1       	breq	.+108    	; 0x1e42 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1dd6:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <udc_ptr_conf>
    1dda:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1dde:	ed 91       	ld	r30, X+
    1de0:	fc 91       	ld	r31, X
    1de2:	11 97       	sbiw	r26, 0x01	; 1
    1de4:	84 81       	ldd	r24, Z+4	; 0x04
    1de6:	88 23       	and	r24, r24
    1de8:	71 f1       	breq	.+92     	; 0x1e46 <udc_process_setup+0x4d0>
    1dea:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1dec:	ec 2f       	mov	r30, r28
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	ee 0f       	add	r30, r30
    1df2:	ff 1f       	adc	r31, r31
    1df4:	12 96       	adiw	r26, 0x02	; 2
    1df6:	8d 91       	ld	r24, X+
    1df8:	9c 91       	ld	r25, X
    1dfa:	13 97       	sbiw	r26, 0x03	; 3
    1dfc:	e8 0f       	add	r30, r24
    1dfe:	f9 1f       	adc	r31, r25
    1e00:	00 81       	ld	r16, Z
    1e02:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1e04:	d8 01       	movw	r26, r16
    1e06:	16 96       	adiw	r26, 0x06	; 6
    1e08:	ed 91       	ld	r30, X+
    1e0a:	fc 91       	ld	r31, X
    1e0c:	17 97       	sbiw	r26, 0x07	; 7
    1e0e:	09 95       	icall
    1e10:	68 2f       	mov	r22, r24
    1e12:	8c 2f       	mov	r24, r28
    1e14:	a9 dc       	rcall	.-1710   	; 0x1768 <udc_update_iface_desc>
    1e16:	88 23       	and	r24, r24
    1e18:	59 f1       	breq	.+86     	; 0x1e70 <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1e1a:	d8 01       	movw	r26, r16
    1e1c:	14 96       	adiw	r26, 0x04	; 4
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	15 97       	sbiw	r26, 0x05	; 5
    1e24:	09 95       	icall
    1e26:	81 11       	cpse	r24, r1
    1e28:	23 c0       	rjmp	.+70     	; 0x1e70 <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1e2a:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1e2c:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <udc_ptr_conf>
    1e30:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <udc_ptr_conf+0x1>
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	11 97       	sbiw	r26, 0x01	; 1
    1e3a:	94 81       	ldd	r25, Z+4	; 0x04
    1e3c:	c9 17       	cp	r28, r25
    1e3e:	b0 f2       	brcs	.-84     	; 0x1dec <udc_process_setup+0x476>
    1e40:	17 c0       	rjmp	.+46     	; 0x1e70 <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	15 c0       	rjmp	.+42     	; 0x1e70 <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	13 c0       	rjmp	.+38     	; 0x1e70 <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	11 c0       	rjmp	.+34     	; 0x1e70 <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1e52:	98 2f       	mov	r25, r24
    1e54:	90 76       	andi	r25, 0x60	; 96
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <udc_process_setup+0x4e4>
    1e58:	81 cf       	rjmp	.-254    	; 0x1d5c <udc_process_setup+0x3e6>
    1e5a:	a6 cd       	rjmp	.-1204   	; 0x19a8 <udc_process_setup+0x32>
    1e5c:	98 2f       	mov	r25, r24
    1e5e:	90 76       	andi	r25, 0x60	; 96
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <udc_process_setup+0x4ee>
    1e62:	7c cf       	rjmp	.-264    	; 0x1d5c <udc_process_setup+0x3e6>
    1e64:	a2 ce       	rjmp	.-700    	; 0x1baa <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    1e66:	23 e0       	ldi	r18, 0x03	; 3
		str = udc_string_product_name;
    1e68:	86 ea       	ldi	r24, 0xA6	; 166
    1e6a:	90 e2       	ldi	r25, 0x20	; 32
    1e6c:	18 ce       	rjmp	.-976    	; 0x1a9e <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	08 95       	ret

00001e7a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1e7a:	43 e0       	ldi	r20, 0x03	; 3
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	96 e0       	ldi	r25, 0x06	; 6
    1e84:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1e88:	43 e0       	ldi	r20, 0x03	; 3
    1e8a:	50 e0       	ldi	r21, 0x00	; 0
    1e8c:	62 e0       	ldi	r22, 0x02	; 2
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	96 e0       	ldi	r25, 0x06	; 6
    1e92:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1e96:	43 e0       	ldi	r20, 0x03	; 3
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	64 e0       	ldi	r22, 0x04	; 4
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	96 e0       	ldi	r25, 0x06	; 6
    1ea0:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1ea4:	43 e0       	ldi	r20, 0x03	; 3
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	68 e0       	ldi	r22, 0x08	; 8
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	96 e0       	ldi	r25, 0x06	; 6
    1eae:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1eb2:	43 e0       	ldi	r20, 0x03	; 3
    1eb4:	50 e0       	ldi	r21, 0x00	; 0
    1eb6:	60 e1       	ldi	r22, 0x10	; 16
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	96 e0       	ldi	r25, 0x06	; 6
    1ebc:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1ec0:	43 e0       	ldi	r20, 0x03	; 3
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	60 e2       	ldi	r22, 0x20	; 32
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	96 e0       	ldi	r25, 0x06	; 6
    1eca:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1ece:	43 e0       	ldi	r20, 0x03	; 3
    1ed0:	50 e0       	ldi	r21, 0x00	; 0
    1ed2:	60 e4       	ldi	r22, 0x40	; 64
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	96 e0       	ldi	r25, 0x06	; 6
    1ed8:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1edc:	43 e0       	ldi	r20, 0x03	; 3
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	60 e8       	ldi	r22, 0x80	; 128
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	96 e0       	ldi	r25, 0x06	; 6
    1ee6:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	58 e1       	ldi	r21, 0x18	; 24
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	80 e2       	ldi	r24, 0x20	; 32
    1ef2:	96 e0       	ldi	r25, 0x06	; 6
    1ef4:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1ef8:	40 e0       	ldi	r20, 0x00	; 0
    1efa:	58 e1       	ldi	r21, 0x18	; 24
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	80 e2       	ldi	r24, 0x20	; 32
    1f00:	96 e0       	ldi	r25, 0x06	; 6
    1f02:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	58 e1       	ldi	r21, 0x18	; 24
    1f0a:	64 e0       	ldi	r22, 0x04	; 4
    1f0c:	80 e2       	ldi	r24, 0x20	; 32
    1f0e:	96 e0       	ldi	r25, 0x06	; 6
    1f10:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	58 e1       	ldi	r21, 0x18	; 24
    1f18:	68 e0       	ldi	r22, 0x08	; 8
    1f1a:	80 e2       	ldi	r24, 0x20	; 32
    1f1c:	96 e0       	ldi	r25, 0x06	; 6
    1f1e:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f22:	43 e0       	ldi	r20, 0x03	; 3
    1f24:	50 e0       	ldi	r21, 0x00	; 0
    1f26:	60 e8       	ldi	r22, 0x80	; 128
    1f28:	80 e4       	ldi	r24, 0x40	; 64
    1f2a:	96 e0       	ldi	r25, 0x06	; 6
    1f2c:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f30:	43 e0       	ldi	r20, 0x03	; 3
    1f32:	50 e0       	ldi	r21, 0x00	; 0
    1f34:	60 e2       	ldi	r22, 0x20	; 32
    1f36:	80 e4       	ldi	r24, 0x40	; 64
    1f38:	96 e0       	ldi	r25, 0x06	; 6
    1f3a:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	60 e4       	ldi	r22, 0x40	; 64
    1f44:	80 e4       	ldi	r24, 0x40	; 64
    1f46:	96 e0       	ldi	r25, 0x06	; 6
    1f48:	0e 94 55 06 	call	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f4c:	43 e0       	ldi	r20, 0x03	; 3
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	60 e1       	ldi	r22, 0x10	; 16
    1f52:	80 e4       	ldi	r24, 0x40	; 64
    1f54:	96 e0       	ldi	r25, 0x06	; 6
    1f56:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <ioport_configure_port_pin>
    1f5a:	08 95       	ret

00001f5c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1f5c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1f5e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1f60:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1f62:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1f64:	60 83       	st	Z, r22
	ret                             // Return to caller
    1f66:	08 95       	ret

00001f68 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1f68:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    1f6c:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1f6e:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1f70:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    1f74:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1f76:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1f7a:	08 95       	ret

00001f7c <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	6a 01       	movw	r12, r20
    1f90:	7b 01       	movw	r14, r22
    1f92:	db 01       	movw	r26, r22
    1f94:	ca 01       	movw	r24, r20
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	a1 09       	sbc	r26, r1
    1f9a:	b1 09       	sbc	r27, r1

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	60 0f       	add	r22, r16
    1fa2:	71 1f       	adc	r23, r17
    1fa4:	82 1f       	adc	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	a7 01       	movw	r20, r14
    1faa:	96 01       	movw	r18, r12
    1fac:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__udivmodsi4>

	if (divisor > 128) {
    1fb0:	21 38       	cpi	r18, 0x81	; 129
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	41 05       	cpc	r20, r1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	f8 f4       	brcc	.+62     	; 0x1ff8 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
    1fba:	21 34       	cpi	r18, 0x41	; 65
    1fbc:	60 f4       	brcc	.+24     	; 0x1fd6 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
    1fbe:	21 32       	cpi	r18, 0x21	; 33
    1fc0:	60 f4       	brcc	.+24     	; 0x1fda <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
    1fc2:	21 31       	cpi	r18, 0x11	; 17
    1fc4:	60 f4       	brcc	.+24     	; 0x1fde <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
    1fc6:	29 30       	cpi	r18, 0x09	; 9
    1fc8:	60 f4       	brcc	.+24     	; 0x1fe2 <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
    1fca:	25 30       	cpi	r18, 0x05	; 5
    1fcc:	60 f4       	brcc	.+24     	; 0x1fe6 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
    1fce:	23 30       	cpi	r18, 0x03	; 3
    1fd0:	60 f4       	brcc	.+24     	; 0x1fea <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    1fd2:	80 e8       	ldi	r24, 0x80	; 128
    1fd4:	0b c0       	rjmp	.+22     	; 0x1fec <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	09 c0       	rjmp	.+18     	; 0x1fec <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
    1fde:	82 e8       	ldi	r24, 0x82	; 130
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
    1fe6:	81 e8       	ldi	r24, 0x81	; 129
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
    1fea:	80 e0       	ldi	r24, 0x00	; 0
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
    1fec:	98 81       	ld	r25, Y
    1fee:	9c 77       	andi	r25, 0x7C	; 124
    1ff0:	98 2b       	or	r25, r24
    1ff2:	98 83       	st	Y, r25

	return 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
    1ff8:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	08 95       	ret

0000200c <udd_sleep_mode>:
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
		udd_send_remote_wake_up();
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	00 d0       	rcall	.+0      	; 0x2012 <udd_sleep_mode+0x6>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	81 11       	cpse	r24, r1
    2018:	26 c0       	rjmp	.+76     	; 0x2066 <udd_sleep_mode+0x5a>
    201a:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <udd_b_idle>
    201e:	99 23       	and	r25, r25
    2020:	f9 f0       	breq	.+62     	; 0x2060 <udd_sleep_mode+0x54>
    2022:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <sleepmgr_locks+0x1>
    2026:	91 11       	cpse	r25, r1
    2028:	01 c0       	rjmp	.+2      	; 0x202c <udd_sleep_mode+0x20>
    202a:	ff cf       	rjmp	.-2      	; 0x202a <udd_sleep_mode+0x1e>
    202c:	9f b7       	in	r25, 0x3f	; 63
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	f8 94       	cli
    2032:	2a 81       	ldd	r18, Y+2	; 0x02
    2034:	ea e7       	ldi	r30, 0x7A	; 122
    2036:	f4 e2       	ldi	r31, 0x24	; 36
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	91 50       	subi	r25, 0x01	; 1
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	2f bf       	out	0x3f, r18	; 63
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <udd_sleep_mode+0x54>
    2042:	90 91 7b 24 	lds	r25, 0x247B	; 0x80247b <sleepmgr_locks+0x1>
    2046:	9f 3f       	cpi	r25, 0xFF	; 255
    2048:	09 f4       	brne	.+2      	; 0x204c <udd_sleep_mode+0x40>
    204a:	ff cf       	rjmp	.-2      	; 0x204a <udd_sleep_mode+0x3e>
    204c:	9f b7       	in	r25, 0x3f	; 63
    204e:	99 83       	std	Y+1, r25	; 0x01
    2050:	f8 94       	cli
    2052:	29 81       	ldd	r18, Y+1	; 0x01
    2054:	ea e7       	ldi	r30, 0x7A	; 122
    2056:	f4 e2       	ldi	r31, 0x24	; 36
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	9f 5f       	subi	r25, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	2f bf       	out	0x3f, r18	; 63
    2060:	80 93 78 24 	sts	0x2478, r24	; 0x802478 <udd_b_idle>
    2064:	05 c0       	rjmp	.+10     	; 0x2070 <udd_sleep_mode+0x64>
    2066:	90 91 78 24 	lds	r25, 0x2478	; 0x802478 <udd_b_idle>
    206a:	99 23       	and	r25, r25
    206c:	51 f3       	breq	.-44     	; 0x2042 <udd_sleep_mode+0x36>
    206e:	f8 cf       	rjmp	.-16     	; 0x2060 <udd_sleep_mode+0x54>
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	08 95       	ret

0000207a <udd_ctrl_init>:
    207a:	0f 93       	push	r16
    207c:	e8 ec       	ldi	r30, 0xC8	; 200
    207e:	f4 e0       	ldi	r31, 0x04	; 4
    2080:	80 81       	ld	r24, Z
    2082:	8f 7d       	andi	r24, 0xDF	; 223
    2084:	80 83       	st	Z, r24
    2086:	80 81       	ld	r24, Z
    2088:	8f 7d       	andi	r24, 0xDF	; 223
    208a:	80 83       	st	Z, r24
    208c:	ec e4       	ldi	r30, 0x4C	; 76
    208e:	f4 e2       	ldi	r31, 0x24	; 36
    2090:	02 e0       	ldi	r16, 0x02	; 2
    2092:	05 93       	las	Z, r16
    2094:	10 92 4e 24 	sts	0x244E, r1	; 0x80244e <udd_sram+0x16>
    2098:	10 92 4f 24 	sts	0x244F, r1	; 0x80244f <udd_sram+0x17>
    209c:	00 e2       	ldi	r16, 0x20	; 32
    209e:	06 93       	lac	Z, r16
    20a0:	00 e4       	ldi	r16, 0x40	; 64
    20a2:	06 93       	lac	Z, r16
    20a4:	e4 e4       	ldi	r30, 0x44	; 68
    20a6:	f4 e2       	ldi	r31, 0x24	; 36
    20a8:	00 e4       	ldi	r16, 0x40	; 64
    20aa:	06 93       	lac	Z, r16
    20ac:	e1 e8       	ldi	r30, 0x81	; 129
    20ae:	f4 e2       	ldi	r31, 0x24	; 36
    20b0:	14 86       	std	Z+12, r1	; 0x0c
    20b2:	15 86       	std	Z+13, r1	; 0x0d
    20b4:	16 86       	std	Z+14, r1	; 0x0e
    20b6:	17 86       	std	Z+15, r1	; 0x0f
    20b8:	12 86       	std	Z+10, r1	; 0x0a
    20ba:	13 86       	std	Z+11, r1	; 0x0b
    20bc:	10 92 35 24 	sts	0x2435, r1	; 0x802435 <udd_ep_control_state>
    20c0:	0f 91       	pop	r16
    20c2:	08 95       	ret

000020c4 <udd_ctrl_stall_data>:
    20c4:	0f 93       	push	r16
    20c6:	85 e0       	ldi	r24, 0x05	; 5
    20c8:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <udd_ep_control_state>
    20cc:	ed e4       	ldi	r30, 0x4D	; 77
    20ce:	f4 e2       	ldi	r31, 0x24	; 36
    20d0:	04 e0       	ldi	r16, 0x04	; 4
    20d2:	05 93       	las	Z, r16
    20d4:	e5 e4       	ldi	r30, 0x45	; 69
    20d6:	f4 e2       	ldi	r31, 0x24	; 36
    20d8:	04 e0       	ldi	r16, 0x04	; 4
    20da:	05 93       	las	Z, r16
    20dc:	0f 91       	pop	r16
    20de:	08 95       	ret

000020e0 <udd_ctrl_send_zlp_in>:
    20e0:	0f 93       	push	r16
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <udd_ep_control_state>
    20e8:	10 92 4e 24 	sts	0x244E, r1	; 0x80244e <udd_sram+0x16>
    20ec:	10 92 4f 24 	sts	0x244F, r1	; 0x80244f <udd_sram+0x17>
    20f0:	ec e4       	ldi	r30, 0x4C	; 76
    20f2:	f4 e2       	ldi	r31, 0x24	; 36
    20f4:	02 e0       	ldi	r16, 0x02	; 2
    20f6:	06 93       	lac	Z, r16
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret

000020fc <udd_ctrl_endofrequest>:
    20fc:	e0 91 8d 24 	lds	r30, 0x248D	; 0x80248d <udd_g_ctrlreq+0xc>
    2100:	f0 91 8e 24 	lds	r31, 0x248E	; 0x80248e <udd_g_ctrlreq+0xd>
    2104:	30 97       	sbiw	r30, 0x00	; 0
    2106:	09 f0       	breq	.+2      	; 0x210a <udd_ctrl_endofrequest+0xe>
    2108:	09 95       	icall
    210a:	08 95       	ret

0000210c <udd_ctrl_in_sent>:
    210c:	0f 93       	push	r16
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_ep_control_state>
    2116:	83 30       	cpi	r24, 0x03	; 3
    2118:	19 f4       	brne	.+6      	; 0x2120 <udd_ctrl_in_sent+0x14>
    211a:	f0 df       	rcall	.-32     	; 0x20fc <udd_ctrl_endofrequest>
    211c:	ae df       	rcall	.-164    	; 0x207a <udd_ctrl_init>
    211e:	5e c0       	rjmp	.+188    	; 0x21dc <udd_ctrl_in_sent+0xd0>
    2120:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_ctrl_payload_nb_trans>
    2124:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    2128:	c0 91 8b 24 	lds	r28, 0x248B	; 0x80248b <udd_g_ctrlreq+0xa>
    212c:	d0 91 8c 24 	lds	r29, 0x248C	; 0x80248c <udd_g_ctrlreq+0xb>
    2130:	c8 1b       	sub	r28, r24
    2132:	d9 0b       	sbc	r29, r25
    2134:	71 f5       	brne	.+92     	; 0x2192 <udd_ctrl_in_sent+0x86>
    2136:	20 91 33 24 	lds	r18, 0x2433	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    213a:	30 91 34 24 	lds	r19, 0x2434	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
    213e:	82 0f       	add	r24, r18
    2140:	93 1f       	adc	r25, r19
    2142:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    2146:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
    214a:	20 91 87 24 	lds	r18, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    214e:	30 91 88 24 	lds	r19, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    2152:	82 17       	cp	r24, r18
    2154:	93 07       	cpc	r25, r19
    2156:	21 f0       	breq	.+8      	; 0x2160 <udd_ctrl_in_sent+0x54>
    2158:	80 91 4c 23 	lds	r24, 0x234C	; 0x80234c <b_shortpacket.5257>
    215c:	88 23       	and	r24, r24
    215e:	41 f0       	breq	.+16     	; 0x2170 <udd_ctrl_in_sent+0x64>
    2160:	84 e0       	ldi	r24, 0x04	; 4
    2162:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <udd_ep_control_state>
    2166:	e4 e4       	ldi	r30, 0x44	; 68
    2168:	f4 e2       	ldi	r31, 0x24	; 36
    216a:	02 e0       	ldi	r16, 0x02	; 2
    216c:	06 93       	lac	Z, r16
    216e:	36 c0       	rjmp	.+108    	; 0x21dc <udd_ctrl_in_sent+0xd0>
    2170:	e0 91 8f 24 	lds	r30, 0x248F	; 0x80248f <udd_g_ctrlreq+0xe>
    2174:	f0 91 90 24 	lds	r31, 0x2490	; 0x802490 <udd_g_ctrlreq+0xf>
    2178:	30 97       	sbiw	r30, 0x00	; 0
    217a:	99 f0       	breq	.+38     	; 0x21a2 <udd_ctrl_in_sent+0x96>
    217c:	09 95       	icall
    217e:	88 23       	and	r24, r24
    2180:	81 f0       	breq	.+32     	; 0x21a2 <udd_ctrl_in_sent+0x96>
    2182:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <udd_ctrl_payload_nb_trans>
    2186:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    218a:	c0 91 8b 24 	lds	r28, 0x248B	; 0x80248b <udd_g_ctrlreq+0xa>
    218e:	d0 91 8c 24 	lds	r29, 0x248C	; 0x80248c <udd_g_ctrlreq+0xb>
    2192:	c0 34       	cpi	r28, 0x40	; 64
    2194:	d1 05       	cpc	r29, r1
    2196:	28 f0       	brcs	.+10     	; 0x21a2 <udd_ctrl_in_sent+0x96>
    2198:	10 92 4c 23 	sts	0x234C, r1	; 0x80234c <b_shortpacket.5257>
    219c:	c0 e4       	ldi	r28, 0x40	; 64
    219e:	d0 e0       	ldi	r29, 0x00	; 0
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <udd_ctrl_in_sent+0x9c>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	80 93 4c 23 	sts	0x234C, r24	; 0x80234c <b_shortpacket.5257>
    21a8:	e8 e3       	ldi	r30, 0x38	; 56
    21aa:	f4 e2       	ldi	r31, 0x24	; 36
    21ac:	c6 8b       	std	Z+22, r28	; 0x16
    21ae:	d7 8b       	std	Z+23, r29	; 0x17
    21b0:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_ctrl_payload_nb_trans>
    21b4:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    21b8:	20 91 89 24 	lds	r18, 0x2489	; 0x802489 <udd_g_ctrlreq+0x8>
    21bc:	30 91 8a 24 	lds	r19, 0x248A	; 0x80248a <udd_g_ctrlreq+0x9>
    21c0:	28 0f       	add	r18, r24
    21c2:	39 1f       	adc	r19, r25
    21c4:	20 8f       	std	Z+24, r18	; 0x18
    21c6:	31 8f       	std	Z+25, r19	; 0x19
    21c8:	c8 0f       	add	r28, r24
    21ca:	d9 1f       	adc	r29, r25
    21cc:	c0 93 31 24 	sts	0x2431, r28	; 0x802431 <udd_ctrl_payload_nb_trans>
    21d0:	d0 93 32 24 	sts	0x2432, r29	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    21d4:	ec e4       	ldi	r30, 0x4C	; 76
    21d6:	f4 e2       	ldi	r31, 0x24	; 36
    21d8:	02 e0       	ldi	r16, 0x02	; 2
    21da:	06 93       	lac	Z, r16
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <udd_ep_get_size>:
    21e4:	fc 01       	movw	r30, r24
    21e6:	81 81       	ldd	r24, Z+1	; 0x01
    21e8:	e8 2f       	mov	r30, r24
    21ea:	e7 70       	andi	r30, 0x07	; 7
    21ec:	8e 2f       	mov	r24, r30
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	fc 01       	movw	r30, r24
    21f2:	31 97       	sbiw	r30, 0x01	; 1
    21f4:	e7 30       	cpi	r30, 0x07	; 7
    21f6:	f1 05       	cpc	r31, r1
    21f8:	c0 f4       	brcc	.+48     	; 0x222a <udd_ep_get_size+0x46>
    21fa:	e7 5a       	subi	r30, 0xA7	; 167
    21fc:	fe 4f       	sbci	r31, 0xFE	; 254
    21fe:	9d c7       	rjmp	.+3898   	; 0x313a <__tablejump2__>
    2200:	80 e1       	ldi	r24, 0x10	; 16
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	08 95       	ret
    2206:	80 e2       	ldi	r24, 0x20	; 32
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	08 95       	ret
    220c:	80 e4       	ldi	r24, 0x40	; 64
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	08 95       	ret
    2212:	80 e8       	ldi	r24, 0x80	; 128
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	08 95       	ret
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	08 95       	ret
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	92 e0       	ldi	r25, 0x02	; 2
    2222:	08 95       	ret
    2224:	8f ef       	ldi	r24, 0xFF	; 255
    2226:	93 e0       	ldi	r25, 0x03	; 3
    2228:	08 95       	ret
    222a:	88 e0       	ldi	r24, 0x08	; 8
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	08 95       	ret

00002230 <udd_ep_get_job>:
    2230:	28 2f       	mov	r18, r24
    2232:	2f 70       	andi	r18, 0x0F	; 15
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	22 0f       	add	r18, r18
    2238:	33 1f       	adc	r19, r19
    223a:	08 2e       	mov	r0, r24
    223c:	00 0c       	add	r0, r0
    223e:	99 0b       	sbc	r25, r25
    2240:	88 27       	eor	r24, r24
    2242:	99 0f       	add	r25, r25
    2244:	88 1f       	adc	r24, r24
    2246:	99 27       	eor	r25, r25
    2248:	82 0f       	add	r24, r18
    224a:	93 1f       	adc	r25, r19
    224c:	02 97       	sbiw	r24, 0x02	; 2
    224e:	9c 01       	movw	r18, r24
    2250:	22 0f       	add	r18, r18
    2252:	33 1f       	adc	r19, r19
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	22 0f       	add	r18, r18
    225a:	33 1f       	adc	r19, r19
    225c:	82 0f       	add	r24, r18
    225e:	93 1f       	adc	r25, r19
    2260:	83 53       	subi	r24, 0x33	; 51
    2262:	9c 4d       	sbci	r25, 0xDC	; 220
    2264:	08 95       	ret

00002266 <udd_ctrl_interrupt_tc_setup>:
    2266:	0f 93       	push	r16
    2268:	cf 93       	push	r28
    226a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    226e:	80 ff       	sbrs	r24, 0
    2270:	64 c0       	rjmp	.+200    	; 0x233a <udd_ctrl_interrupt_tc_setup+0xd4>
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2278:	e4 e4       	ldi	r30, 0x44	; 68
    227a:	f4 e2       	ldi	r31, 0x24	; 36
    227c:	00 e8       	ldi	r16, 0x80	; 128
    227e:	06 93       	lac	Z, r16
    2280:	ec e4       	ldi	r30, 0x4C	; 76
    2282:	f4 e2       	ldi	r31, 0x24	; 36
    2284:	00 e8       	ldi	r16, 0x80	; 128
    2286:	06 93       	lac	Z, r16
    2288:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
    228c:	e4 e4       	ldi	r30, 0x44	; 68
    228e:	f4 e2       	ldi	r31, 0x24	; 36
    2290:	00 e1       	ldi	r16, 0x10	; 16
    2292:	06 93       	lac	Z, r16
    2294:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_ep_control_state>
    2298:	88 23       	and	r24, r24
    229a:	29 f0       	breq	.+10     	; 0x22a6 <udd_ctrl_interrupt_tc_setup+0x40>
    229c:	83 50       	subi	r24, 0x03	; 3
    229e:	82 30       	cpi	r24, 0x02	; 2
    22a0:	08 f4       	brcc	.+2      	; 0x22a4 <udd_ctrl_interrupt_tc_setup+0x3e>
    22a2:	2c df       	rcall	.-424    	; 0x20fc <udd_ctrl_endofrequest>
    22a4:	ea de       	rcall	.-556    	; 0x207a <udd_ctrl_init>
    22a6:	80 91 46 24 	lds	r24, 0x2446	; 0x802446 <udd_sram+0xe>
    22aa:	90 91 47 24 	lds	r25, 0x2447	; 0x802447 <udd_sram+0xf>
    22ae:	08 97       	sbiw	r24, 0x08	; 8
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <udd_ctrl_interrupt_tc_setup+0x4e>
    22b2:	45 c0       	rjmp	.+138    	; 0x233e <udd_ctrl_interrupt_tc_setup+0xd8>
    22b4:	88 e0       	ldi	r24, 0x08	; 8
    22b6:	e1 ef       	ldi	r30, 0xF1	; 241
    22b8:	f3 e2       	ldi	r31, 0x23	; 35
    22ba:	a1 e8       	ldi	r26, 0x81	; 129
    22bc:	b4 e2       	ldi	r27, 0x24	; 36
    22be:	01 90       	ld	r0, Z+
    22c0:	0d 92       	st	X+, r0
    22c2:	8a 95       	dec	r24
    22c4:	e1 f7       	brne	.-8      	; 0x22be <udd_ctrl_interrupt_tc_setup+0x58>
    22c6:	e8 ec       	ldi	r30, 0xC8	; 200
    22c8:	f4 e0       	ldi	r31, 0x04	; 4
    22ca:	80 81       	ld	r24, Z
    22cc:	80 62       	ori	r24, 0x20	; 32
    22ce:	80 83       	st	Z, r24
    22d0:	80 81       	ld	r24, Z
    22d2:	80 62       	ori	r24, 0x20	; 32
    22d4:	80 83       	st	Z, r24
    22d6:	4f db       	rcall	.-2402   	; 0x1976 <udc_process_setup>
    22d8:	c8 2f       	mov	r28, r24
    22da:	81 11       	cpse	r24, r1
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <udd_ctrl_interrupt_tc_setup+0x7e>
    22de:	f2 de       	rcall	.-540    	; 0x20c4 <udd_ctrl_stall_data>
    22e0:	c1 e0       	ldi	r28, 0x01	; 1
    22e2:	2e c0       	rjmp	.+92     	; 0x2340 <udd_ctrl_interrupt_tc_setup+0xda>
    22e4:	80 91 81 24 	lds	r24, 0x2481	; 0x802481 <udd_g_ctrlreq>
    22e8:	88 23       	and	r24, r24
    22ea:	6c f4       	brge	.+26     	; 0x2306 <udd_ctrl_interrupt_tc_setup+0xa0>
    22ec:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    22f0:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
    22f4:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <udd_ctrl_payload_nb_trans>
    22f8:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <udd_ep_control_state>
    2302:	04 df       	rcall	.-504    	; 0x210c <udd_ctrl_in_sent>
    2304:	1d c0       	rjmp	.+58     	; 0x2340 <udd_ctrl_interrupt_tc_setup+0xda>
    2306:	80 91 87 24 	lds	r24, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    230a:	90 91 88 24 	lds	r25, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    230e:	89 2b       	or	r24, r25
    2310:	11 f4       	brne	.+4      	; 0x2316 <udd_ctrl_interrupt_tc_setup+0xb0>
    2312:	e6 de       	rcall	.-564    	; 0x20e0 <udd_ctrl_send_zlp_in>
    2314:	15 c0       	rjmp	.+42     	; 0x2340 <udd_ctrl_interrupt_tc_setup+0xda>
    2316:	10 92 33 24 	sts	0x2433, r1	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    231a:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
    231e:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <udd_ctrl_payload_nb_trans>
    2322:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <udd_ep_control_state>
    232c:	e4 e4       	ldi	r30, 0x44	; 68
    232e:	f4 e2       	ldi	r31, 0x24	; 36
    2330:	02 e0       	ldi	r16, 0x02	; 2
    2332:	06 93       	lac	Z, r16
    2334:	00 e2       	ldi	r16, 0x20	; 32
    2336:	06 93       	lac	Z, r16
    2338:	03 c0       	rjmp	.+6      	; 0x2340 <udd_ctrl_interrupt_tc_setup+0xda>
    233a:	c0 e0       	ldi	r28, 0x00	; 0
    233c:	01 c0       	rjmp	.+2      	; 0x2340 <udd_ctrl_interrupt_tc_setup+0xda>
    233e:	c1 e0       	ldi	r28, 0x01	; 1
    2340:	8c 2f       	mov	r24, r28
    2342:	cf 91       	pop	r28
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <udd_ep_trans_complet>:
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	d8 2e       	mov	r13, r24
    2360:	67 df       	rcall	.-306    	; 0x2230 <udd_ep_get_job>
    2362:	8c 01       	movw	r16, r24
    2364:	bd 2c       	mov	r11, r13
    2366:	bb 1c       	adc	r11, r11
    2368:	bb 24       	eor	r11, r11
    236a:	bb 1c       	adc	r11, r11
    236c:	cd 2d       	mov	r28, r13
    236e:	cf 70       	andi	r28, 0x0F	; 15
    2370:	d0 e0       	ldi	r29, 0x00	; 0
    2372:	cc 0f       	add	r28, r28
    2374:	dd 1f       	adc	r29, r29
    2376:	cb 0d       	add	r28, r11
    2378:	d1 1d       	adc	r29, r1
    237a:	ce 01       	movw	r24, r28
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	9c 01       	movw	r18, r24
    238a:	2c 5b       	subi	r18, 0xBC	; 188
    238c:	3b 4d       	sbci	r19, 0xDB	; 219
    238e:	79 01       	movw	r14, r18
    2390:	c9 01       	movw	r24, r18
    2392:	28 df       	rcall	.-432    	; 0x21e4 <udd_ep_get_size>
    2394:	4c 01       	movw	r8, r24
    2396:	bb 20       	and	r11, r11
    2398:	09 f4       	brne	.+2      	; 0x239c <udd_ep_trans_complet+0x54>
    239a:	79 c0       	rjmp	.+242    	; 0x248e <udd_ep_trans_complet+0x146>
    239c:	fe 01       	movw	r30, r28
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	ee 0f       	add	r30, r30
    23a4:	ff 1f       	adc	r31, r31
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	e8 5c       	subi	r30, 0xC8	; 200
    23ac:	fb 4d       	sbci	r31, 0xDB	; 219
    23ae:	22 89       	ldd	r18, Z+18	; 0x12
    23b0:	33 89       	ldd	r19, Z+19	; 0x13
    23b2:	d8 01       	movw	r26, r16
    23b4:	15 96       	adiw	r26, 0x05	; 5
    23b6:	8d 91       	ld	r24, X+
    23b8:	9c 91       	ld	r25, X
    23ba:	16 97       	sbiw	r26, 0x06	; 6
    23bc:	82 0f       	add	r24, r18
    23be:	93 1f       	adc	r25, r19
    23c0:	15 96       	adiw	r26, 0x05	; 5
    23c2:	8d 93       	st	X+, r24
    23c4:	9c 93       	st	X, r25
    23c6:	16 97       	sbiw	r26, 0x06	; 6
    23c8:	13 96       	adiw	r26, 0x03	; 3
    23ca:	2d 91       	ld	r18, X+
    23cc:	3c 91       	ld	r19, X
    23ce:	14 97       	sbiw	r26, 0x04	; 4
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <udd_ep_trans_complet+0x90>
    23d6:	45 c0       	rjmp	.+138    	; 0x2462 <udd_ep_trans_complet+0x11a>
    23d8:	28 1b       	sub	r18, r24
    23da:	39 0b       	sbc	r19, r25
    23dc:	21 15       	cp	r18, r1
    23de:	b4 e0       	ldi	r27, 0x04	; 4
    23e0:	3b 07       	cpc	r19, r27
    23e2:	38 f0       	brcs	.+14     	; 0x23f2 <udd_ep_trans_complet+0xaa>
    23e4:	2f ef       	ldi	r18, 0xFF	; 255
    23e6:	33 e0       	ldi	r19, 0x03	; 3
    23e8:	c9 01       	movw	r24, r18
    23ea:	b4 01       	movw	r22, r8
    23ec:	70 d6       	rcall	.+3296   	; 0x30ce <__udivmodhi4>
    23ee:	28 1b       	sub	r18, r24
    23f0:	39 0b       	sbc	r19, r25
    23f2:	f8 01       	movw	r30, r16
    23f4:	80 81       	ld	r24, Z
    23f6:	81 ff       	sbrs	r24, 1
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <udd_ep_trans_complet+0xc4>
    23fa:	c9 01       	movw	r24, r18
    23fc:	b4 01       	movw	r22, r8
    23fe:	67 d6       	rcall	.+3278   	; 0x30ce <__udivmodhi4>
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	89 2b       	or	r24, r25
    2404:	09 f0       	breq	.+2      	; 0x2408 <udd_ep_trans_complet+0xc0>
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	84 2f       	mov	r24, r20
    240a:	01 c0       	rjmp	.+2      	; 0x240e <udd_ep_trans_complet+0xc6>
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	d8 01       	movw	r26, r16
    2410:	9c 91       	ld	r25, X
    2412:	80 fb       	bst	r24, 0
    2414:	91 f9       	bld	r25, 1
    2416:	9c 93       	st	X, r25
    2418:	fe 01       	movw	r30, r28
    241a:	ee 0f       	add	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	ee 0f       	add	r30, r30
    2420:	ff 1f       	adc	r31, r31
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	e8 5c       	subi	r30, 0xC8	; 200
    2428:	fb 4d       	sbci	r31, 0xDB	; 219
    242a:	12 8a       	std	Z+18, r1	; 0x12
    242c:	13 8a       	std	Z+19, r1	; 0x13
    242e:	26 87       	std	Z+14, r18	; 0x0e
    2430:	37 87       	std	Z+15, r19	; 0x0f
    2432:	11 96       	adiw	r26, 0x01	; 1
    2434:	2d 91       	ld	r18, X+
    2436:	3c 91       	ld	r19, X
    2438:	12 97       	sbiw	r26, 0x02	; 2
    243a:	15 96       	adiw	r26, 0x05	; 5
    243c:	8d 91       	ld	r24, X+
    243e:	9c 91       	ld	r25, X
    2440:	16 97       	sbiw	r26, 0x06	; 6
    2442:	82 0f       	add	r24, r18
    2444:	93 1f       	adc	r25, r19
    2446:	cc 0f       	add	r28, r28
    2448:	dd 1f       	adc	r29, r29
    244a:	cc 0f       	add	r28, r28
    244c:	dd 1f       	adc	r29, r29
    244e:	cc 0f       	add	r28, r28
    2450:	dd 1f       	adc	r29, r29
    2452:	c8 5b       	subi	r28, 0xB8	; 184
    2454:	db 4d       	sbci	r29, 0xDB	; 219
    2456:	88 83       	st	Y, r24
    2458:	99 83       	std	Y+1, r25	; 0x01
    245a:	f7 01       	movw	r30, r14
    245c:	02 e0       	ldi	r16, 0x02	; 2
    245e:	06 93       	lac	Z, r16
    2460:	e4 c0       	rjmp	.+456    	; 0x262a <udd_ep_trans_complet+0x2e2>
    2462:	d8 01       	movw	r26, r16
    2464:	8c 91       	ld	r24, X
    2466:	81 ff       	sbrs	r24, 1
    2468:	cd c0       	rjmp	.+410    	; 0x2604 <udd_ep_trans_complet+0x2bc>
    246a:	8d 7f       	andi	r24, 0xFD	; 253
    246c:	8c 93       	st	X, r24
    246e:	cc 0f       	add	r28, r28
    2470:	dd 1f       	adc	r29, r29
    2472:	cc 0f       	add	r28, r28
    2474:	dd 1f       	adc	r29, r29
    2476:	cc 0f       	add	r28, r28
    2478:	dd 1f       	adc	r29, r29
    247a:	c8 5c       	subi	r28, 0xC8	; 200
    247c:	db 4d       	sbci	r29, 0xDB	; 219
    247e:	1a 8a       	std	Y+18, r1	; 0x12
    2480:	1b 8a       	std	Y+19, r1	; 0x13
    2482:	1e 86       	std	Y+14, r1	; 0x0e
    2484:	1f 86       	std	Y+15, r1	; 0x0f
    2486:	f7 01       	movw	r30, r14
    2488:	02 e0       	ldi	r16, 0x02	; 2
    248a:	06 93       	lac	Z, r16
    248c:	ce c0       	rjmp	.+412    	; 0x262a <udd_ep_trans_complet+0x2e2>
    248e:	fe 01       	movw	r30, r28
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	e8 5c       	subi	r30, 0xC8	; 200
    249e:	fb 4d       	sbci	r31, 0xDB	; 219
    24a0:	a6 84       	ldd	r10, Z+14	; 0x0e
    24a2:	b7 84       	ldd	r11, Z+15	; 0x0f
    24a4:	d8 01       	movw	r26, r16
    24a6:	8c 91       	ld	r24, X
    24a8:	82 ff       	sbrs	r24, 2
    24aa:	19 c0       	rjmp	.+50     	; 0x24de <udd_ep_trans_complet+0x196>
    24ac:	11 96       	adiw	r26, 0x01	; 1
    24ae:	ed 91       	ld	r30, X+
    24b0:	fc 91       	ld	r31, X
    24b2:	12 97       	sbiw	r26, 0x02	; 2
    24b4:	15 96       	adiw	r26, 0x05	; 5
    24b6:	2d 91       	ld	r18, X+
    24b8:	3c 91       	ld	r19, X
    24ba:	16 97       	sbiw	r26, 0x06	; 6
    24bc:	13 96       	adiw	r26, 0x03	; 3
    24be:	8d 91       	ld	r24, X+
    24c0:	9c 91       	ld	r25, X
    24c2:	14 97       	sbiw	r26, 0x04	; 4
    24c4:	b4 01       	movw	r22, r8
    24c6:	03 d6       	rcall	.+3078   	; 0x30ce <__udivmodhi4>
    24c8:	b0 e4       	ldi	r27, 0x40	; 64
    24ca:	db 9e       	mul	r13, r27
    24cc:	b0 01       	movw	r22, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	63 5f       	subi	r22, 0xF3	; 243
    24d2:	7c 4d       	sbci	r23, 0xDC	; 220
    24d4:	ac 01       	movw	r20, r24
    24d6:	cf 01       	movw	r24, r30
    24d8:	82 0f       	add	r24, r18
    24da:	93 1f       	adc	r25, r19
    24dc:	43 d6       	rcall	.+3206   	; 0x3164 <memcpy>
    24de:	f8 01       	movw	r30, r16
    24e0:	25 81       	ldd	r18, Z+5	; 0x05
    24e2:	36 81       	ldd	r19, Z+6	; 0x06
    24e4:	2a 0d       	add	r18, r10
    24e6:	3b 1d       	adc	r19, r11
    24e8:	25 83       	std	Z+5, r18	; 0x05
    24ea:	36 83       	std	Z+6, r19	; 0x06
    24ec:	83 81       	ldd	r24, Z+3	; 0x03
    24ee:	94 81       	ldd	r25, Z+4	; 0x04
    24f0:	82 17       	cp	r24, r18
    24f2:	93 07       	cpc	r25, r19
    24f4:	68 f4       	brcc	.+26     	; 0x2510 <udd_ep_trans_complet+0x1c8>
    24f6:	85 83       	std	Z+5, r24	; 0x05
    24f8:	96 83       	std	Z+6, r25	; 0x06
    24fa:	cc 0f       	add	r28, r28
    24fc:	dd 1f       	adc	r29, r29
    24fe:	cc 0f       	add	r28, r28
    2500:	dd 1f       	adc	r29, r29
    2502:	cc 0f       	add	r28, r28
    2504:	dd 1f       	adc	r29, r29
    2506:	c8 5c       	subi	r28, 0xC8	; 200
    2508:	db 4d       	sbci	r29, 0xDB	; 219
    250a:	8a 89       	ldd	r24, Y+18	; 0x12
    250c:	9b 89       	ldd	r25, Y+19	; 0x13
    250e:	7a c0       	rjmp	.+244    	; 0x2604 <udd_ep_trans_complet+0x2bc>
    2510:	fe 01       	movw	r30, r28
    2512:	ee 0f       	add	r30, r30
    2514:	ff 1f       	adc	r31, r31
    2516:	ee 0f       	add	r30, r30
    2518:	ff 1f       	adc	r31, r31
    251a:	ee 0f       	add	r30, r30
    251c:	ff 1f       	adc	r31, r31
    251e:	e8 5c       	subi	r30, 0xC8	; 200
    2520:	fb 4d       	sbci	r31, 0xDB	; 219
    2522:	42 89       	ldd	r20, Z+18	; 0x12
    2524:	53 89       	ldd	r21, Z+19	; 0x13
    2526:	4a 15       	cp	r20, r10
    2528:	5b 05       	cpc	r21, r11
    252a:	09 f0       	breq	.+2      	; 0x252e <udd_ep_trans_complet+0x1e6>
    252c:	6b c0       	rjmp	.+214    	; 0x2604 <udd_ep_trans_complet+0x2bc>
    252e:	28 17       	cp	r18, r24
    2530:	39 07       	cpc	r19, r25
    2532:	09 f4       	brne	.+2      	; 0x2536 <udd_ep_trans_complet+0x1ee>
    2534:	67 c0       	rjmp	.+206    	; 0x2604 <udd_ep_trans_complet+0x2bc>
    2536:	ac 01       	movw	r20, r24
    2538:	42 1b       	sub	r20, r18
    253a:	53 0b       	sbc	r21, r19
    253c:	9a 01       	movw	r18, r20
    253e:	21 15       	cp	r18, r1
    2540:	54 e0       	ldi	r21, 0x04	; 4
    2542:	35 07       	cpc	r19, r21
    2544:	50 f0       	brcs	.+20     	; 0x255a <udd_ep_trans_complet+0x212>
    2546:	2f ef       	ldi	r18, 0xFF	; 255
    2548:	33 e0       	ldi	r19, 0x03	; 3
    254a:	c9 01       	movw	r24, r18
    254c:	b4 01       	movw	r22, r8
    254e:	bf d5       	rcall	.+2942   	; 0x30ce <__udivmodhi4>
    2550:	d9 01       	movw	r26, r18
    2552:	a8 1b       	sub	r26, r24
    2554:	b9 0b       	sbc	r27, r25
    2556:	cd 01       	movw	r24, r26
    2558:	07 c0       	rjmp	.+14     	; 0x2568 <udd_ep_trans_complet+0x220>
    255a:	c9 01       	movw	r24, r18
    255c:	b4 01       	movw	r22, r8
    255e:	b7 d5       	rcall	.+2926   	; 0x30ce <__udivmodhi4>
    2560:	f9 01       	movw	r30, r18
    2562:	e8 1b       	sub	r30, r24
    2564:	f9 0b       	sbc	r31, r25
    2566:	cf 01       	movw	r24, r30
    2568:	fe 01       	movw	r30, r28
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31
    2576:	e8 5c       	subi	r30, 0xC8	; 200
    2578:	fb 4d       	sbci	r31, 0xDB	; 219
    257a:	16 86       	std	Z+14, r1	; 0x0e
    257c:	17 86       	std	Z+15, r1	; 0x0f
    257e:	88 15       	cp	r24, r8
    2580:	99 05       	cpc	r25, r9
    2582:	00 f5       	brcc	.+64     	; 0x25c4 <udd_ep_trans_complet+0x27c>
    2584:	d8 01       	movw	r26, r16
    2586:	8c 91       	ld	r24, X
    2588:	84 60       	ori	r24, 0x04	; 4
    258a:	8c 93       	st	X, r24
    258c:	b0 e4       	ldi	r27, 0x40	; 64
    258e:	db 9e       	mul	r13, r27
    2590:	c0 01       	movw	r24, r0
    2592:	11 24       	eor	r1, r1
    2594:	83 5f       	subi	r24, 0xF3	; 243
    2596:	9c 4d       	sbci	r25, 0xDC	; 220
    2598:	fe 01       	movw	r30, r28
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	e8 5b       	subi	r30, 0xB8	; 184
    25a8:	fb 4d       	sbci	r31, 0xDB	; 219
    25aa:	80 83       	st	Z, r24
    25ac:	91 83       	std	Z+1, r25	; 0x01
    25ae:	cc 0f       	add	r28, r28
    25b0:	dd 1f       	adc	r29, r29
    25b2:	cc 0f       	add	r28, r28
    25b4:	dd 1f       	adc	r29, r29
    25b6:	cc 0f       	add	r28, r28
    25b8:	dd 1f       	adc	r29, r29
    25ba:	c8 5c       	subi	r28, 0xC8	; 200
    25bc:	db 4d       	sbci	r29, 0xDB	; 219
    25be:	8a 8a       	std	Y+18, r8	; 0x12
    25c0:	9b 8a       	std	Y+19, r9	; 0x13
    25c2:	1c c0       	rjmp	.+56     	; 0x25fc <udd_ep_trans_complet+0x2b4>
    25c4:	f8 01       	movw	r30, r16
    25c6:	41 81       	ldd	r20, Z+1	; 0x01
    25c8:	52 81       	ldd	r21, Z+2	; 0x02
    25ca:	25 81       	ldd	r18, Z+5	; 0x05
    25cc:	36 81       	ldd	r19, Z+6	; 0x06
    25ce:	24 0f       	add	r18, r20
    25d0:	35 1f       	adc	r19, r21
    25d2:	fe 01       	movw	r30, r28
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	ee 0f       	add	r30, r30
    25da:	ff 1f       	adc	r31, r31
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	e8 5b       	subi	r30, 0xB8	; 184
    25e2:	fb 4d       	sbci	r31, 0xDB	; 219
    25e4:	20 83       	st	Z, r18
    25e6:	31 83       	std	Z+1, r19	; 0x01
    25e8:	cc 0f       	add	r28, r28
    25ea:	dd 1f       	adc	r29, r29
    25ec:	cc 0f       	add	r28, r28
    25ee:	dd 1f       	adc	r29, r29
    25f0:	cc 0f       	add	r28, r28
    25f2:	dd 1f       	adc	r29, r29
    25f4:	c8 5c       	subi	r28, 0xC8	; 200
    25f6:	db 4d       	sbci	r29, 0xDB	; 219
    25f8:	8a 8b       	std	Y+18, r24	; 0x12
    25fa:	9b 8b       	std	Y+19, r25	; 0x13
    25fc:	f7 01       	movw	r30, r14
    25fe:	02 e0       	ldi	r16, 0x02	; 2
    2600:	06 93       	lac	Z, r16
    2602:	13 c0       	rjmp	.+38     	; 0x262a <udd_ep_trans_complet+0x2e2>
    2604:	d8 01       	movw	r26, r16
    2606:	8c 91       	ld	r24, X
    2608:	80 ff       	sbrs	r24, 0
    260a:	0f c0       	rjmp	.+30     	; 0x262a <udd_ep_trans_complet+0x2e2>
    260c:	8e 7f       	andi	r24, 0xFE	; 254
    260e:	8c 93       	st	X, r24
    2610:	17 96       	adiw	r26, 0x07	; 7
    2612:	ed 91       	ld	r30, X+
    2614:	fc 91       	ld	r31, X
    2616:	18 97       	sbiw	r26, 0x08	; 8
    2618:	30 97       	sbiw	r30, 0x00	; 0
    261a:	39 f0       	breq	.+14     	; 0x262a <udd_ep_trans_complet+0x2e2>
    261c:	15 96       	adiw	r26, 0x05	; 5
    261e:	6d 91       	ld	r22, X+
    2620:	7c 91       	ld	r23, X
    2622:	16 97       	sbiw	r26, 0x06	; 6
    2624:	4d 2d       	mov	r20, r13
    2626:	80 e0       	ldi	r24, 0x00	; 0
    2628:	09 95       	icall
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	bf 90       	pop	r11
    263a:	af 90       	pop	r10
    263c:	9f 90       	pop	r9
    263e:	8f 90       	pop	r8
    2640:	08 95       	ret

00002642 <udd_attach>:
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	1f 92       	push	r1
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	8f b7       	in	r24, 0x3f	; 63
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	f8 94       	cli
    2654:	19 81       	ldd	r17, Y+1	; 0x01
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	d9 dc       	rcall	.-1614   	; 0x200c <udd_sleep_mode>
    265a:	ea ec       	ldi	r30, 0xCA	; 202
    265c:	f4 e0       	ldi	r31, 0x04	; 4
    265e:	80 e4       	ldi	r24, 0x40	; 64
    2660:	80 83       	st	Z, r24
    2662:	80 e2       	ldi	r24, 0x20	; 32
    2664:	80 83       	st	Z, r24
    2666:	e1 ec       	ldi	r30, 0xC1	; 193
    2668:	f4 e0       	ldi	r31, 0x04	; 4
    266a:	80 81       	ld	r24, Z
    266c:	81 60       	ori	r24, 0x01	; 1
    266e:	80 83       	st	Z, r24
    2670:	a9 ec       	ldi	r26, 0xC9	; 201
    2672:	b4 e0       	ldi	r27, 0x04	; 4
    2674:	8c 91       	ld	r24, X
    2676:	82 60       	ori	r24, 0x02	; 2
    2678:	8c 93       	st	X, r24
    267a:	e8 ec       	ldi	r30, 0xC8	; 200
    267c:	f4 e0       	ldi	r31, 0x04	; 4
    267e:	80 81       	ld	r24, Z
    2680:	80 64       	ori	r24, 0x40	; 64
    2682:	80 83       	st	Z, r24
    2684:	8c 91       	ld	r24, X
    2686:	81 60       	ori	r24, 0x01	; 1
    2688:	8c 93       	st	X, r24
    268a:	80 81       	ld	r24, Z
    268c:	80 68       	ori	r24, 0x80	; 128
    268e:	80 83       	st	Z, r24
    2690:	1f bf       	out	0x3f, r17	; 63
    2692:	0f 90       	pop	r0
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	08 95       	ret

0000269c <udd_enable>:
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
    26a0:	cf 93       	push	r28
    26a2:	df 93       	push	r29
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <udd_enable+0xa>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
    26aa:	00 e6       	ldi	r16, 0x60	; 96
    26ac:	10 e0       	ldi	r17, 0x00	; 0
    26ae:	f8 01       	movw	r30, r16
    26b0:	10 82       	st	Z, r1
    26b2:	80 e3       	ldi	r24, 0x30	; 48
    26b4:	0e 94 10 06 	call	0xc20	; 0xc20 <sysclk_enable_usb>
    26b8:	e0 ec       	ldi	r30, 0xC0	; 192
    26ba:	f4 e0       	ldi	r31, 0x04	; 4
    26bc:	80 81       	ld	r24, Z
    26be:	80 64       	ori	r24, 0x40	; 64
    26c0:	80 83       	st	Z, r24
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	f8 01       	movw	r30, r16
    26c6:	80 83       	st	Z, r24
    26c8:	8f b7       	in	r24, 0x3f	; 63
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	f8 94       	cli
    26ce:	1a 81       	ldd	r17, Y+2	; 0x02
    26d0:	e8 e3       	ldi	r30, 0x38	; 56
    26d2:	f4 e2       	ldi	r31, 0x24	; 36
    26d4:	15 86       	std	Z+13, r1	; 0x0d
    26d6:	15 8a       	std	Z+21, r1	; 0x15
    26d8:	15 8e       	std	Z+29, r1	; 0x1d
    26da:	15 a2       	std	Z+37, r1	; 0x25
    26dc:	15 a6       	std	Z+45, r1	; 0x2d
    26de:	15 aa       	std	Z+53, r1	; 0x35
    26e0:	ed ec       	ldi	r30, 0xCD	; 205
    26e2:	f3 e2       	ldi	r31, 0x23	; 35
    26e4:	80 81       	ld	r24, Z
    26e6:	8e 7f       	andi	r24, 0xFE	; 254
    26e8:	80 83       	st	Z, r24
    26ea:	e6 ed       	ldi	r30, 0xD6	; 214
    26ec:	f3 e2       	ldi	r31, 0x23	; 35
    26ee:	80 81       	ld	r24, Z
    26f0:	8e 7f       	andi	r24, 0xFE	; 254
    26f2:	80 83       	st	Z, r24
    26f4:	ef ed       	ldi	r30, 0xDF	; 223
    26f6:	f3 e2       	ldi	r31, 0x23	; 35
    26f8:	80 81       	ld	r24, Z
    26fa:	8e 7f       	andi	r24, 0xFE	; 254
    26fc:	80 83       	st	Z, r24
    26fe:	e8 ee       	ldi	r30, 0xE8	; 232
    2700:	f3 e2       	ldi	r31, 0x23	; 35
    2702:	80 81       	ld	r24, Z
    2704:	8e 7f       	andi	r24, 0xFE	; 254
    2706:	80 83       	st	Z, r24
    2708:	6a e1       	ldi	r22, 0x1A	; 26
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	2c dc       	rcall	.-1960   	; 0x1f68 <nvm_read_byte>
    2710:	8f 3f       	cpi	r24, 0xFF	; 255
    2712:	19 f0       	breq	.+6      	; 0x271a <udd_enable+0x7e>
    2714:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <udd_enable+0x84>
    271a:	8f e1       	ldi	r24, 0x1F	; 31
    271c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__TEXT_REGION_LENGTH__+0x7004fa>
    2720:	6b e1       	ldi	r22, 0x1B	; 27
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	20 dc       	rcall	.-1984   	; 0x1f68 <nvm_read_byte>
    2728:	8f 3f       	cpi	r24, 0xFF	; 255
    272a:	19 f0       	breq	.+6      	; 0x2732 <udd_enable+0x96>
    272c:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2730:	03 c0       	rjmp	.+6      	; 0x2738 <udd_enable+0x9c>
    2732:	8f e1       	ldi	r24, 0x1F	; 31
    2734:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <__TEXT_REGION_LENGTH__+0x7004fb>
    2738:	e0 ec       	ldi	r30, 0xC0	; 192
    273a:	f4 e0       	ldi	r31, 0x04	; 4
    273c:	80 81       	ld	r24, Z
    273e:	82 60       	ori	r24, 0x02	; 2
    2740:	80 83       	st	Z, r24
    2742:	80 81       	ld	r24, Z
    2744:	80 68       	ori	r24, 0x80	; 128
    2746:	80 83       	st	Z, r24
    2748:	80 81       	ld	r24, Z
    274a:	80 61       	ori	r24, 0x10	; 16
    274c:	80 83       	st	Z, r24
    274e:	84 e4       	ldi	r24, 0x44	; 68
    2750:	94 e2       	ldi	r25, 0x24	; 36
    2752:	86 83       	std	Z+6, r24	; 0x06
    2754:	97 83       	std	Z+7, r25	; 0x07
    2756:	80 81       	ld	r24, Z
    2758:	80 62       	ori	r24, 0x20	; 32
    275a:	80 83       	st	Z, r24
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
    2762:	e8 ec       	ldi	r30, 0xC8	; 200
    2764:	f4 e0       	ldi	r31, 0x04	; 4
    2766:	80 81       	ld	r24, Z
    2768:	81 60       	ori	r24, 0x01	; 1
    276a:	80 83       	st	Z, r24
    276c:	10 92 78 24 	sts	0x2478, r1	; 0x802478 <udd_b_idle>
    2770:	80 91 7f 24 	lds	r24, 0x247F	; 0x80247f <sleepmgr_locks+0x5>
    2774:	8f 3f       	cpi	r24, 0xFF	; 255
    2776:	09 f4       	brne	.+2      	; 0x277a <udd_enable+0xde>
    2778:	ff cf       	rjmp	.-2      	; 0x2778 <udd_enable+0xdc>
    277a:	8f b7       	in	r24, 0x3f	; 63
    277c:	89 83       	std	Y+1, r24	; 0x01
    277e:	f8 94       	cli
    2780:	99 81       	ldd	r25, Y+1	; 0x01
    2782:	ea e7       	ldi	r30, 0x7A	; 122
    2784:	f4 e2       	ldi	r31, 0x24	; 36
    2786:	85 81       	ldd	r24, Z+5	; 0x05
    2788:	8f 5f       	subi	r24, 0xFF	; 255
    278a:	85 83       	std	Z+5, r24	; 0x05
    278c:	9f bf       	out	0x3f, r25	; 63
    278e:	59 df       	rcall	.-334    	; 0x2642 <udd_attach>
    2790:	1f bf       	out	0x3f, r17	; 63
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	08 95       	ret

000027a0 <udd_set_address>:
    27a0:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27a4:	08 95       	ret

000027a6 <udd_getaddress>:
    27a6:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
    27aa:	08 95       	ret

000027ac <udd_get_frame_number>:
    27ac:	80 91 74 24 	lds	r24, 0x2474	; 0x802474 <udd_sram+0x3c>
    27b0:	90 91 75 24 	lds	r25, 0x2475	; 0x802475 <udd_sram+0x3d>
    27b4:	08 95       	ret

000027b6 <udd_set_setup_payload>:
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    27b6:	e1 e8       	ldi	r30, 0x81	; 129
    27b8:	f4 e2       	ldi	r31, 0x24	; 36
    27ba:	80 87       	std	Z+8, r24	; 0x08
    27bc:	91 87       	std	Z+9, r25	; 0x09
	udd_g_ctrlreq.payload_size = payload_size;
    27be:	62 87       	std	Z+10, r22	; 0x0a
    27c0:	73 87       	std	Z+11, r23	; 0x0b
    27c2:	08 95       	ret

000027c4 <udd_ep_alloc>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    27c4:	28 2f       	mov	r18, r24
    27c6:	2f 70       	andi	r18, 0x0F	; 15
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	22 0f       	add	r18, r18
    27cc:	33 1f       	adc	r19, r19
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    27ce:	08 2e       	mov	r0, r24
    27d0:	00 0c       	add	r0, r0
    27d2:	99 0b       	sbc	r25, r25
    27d4:	88 27       	eor	r24, r24
    27d6:	99 0f       	add	r25, r25
    27d8:	88 1f       	adc	r24, r24
    27da:	99 27       	eor	r25, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    27dc:	82 0f       	add	r24, r18
    27de:	93 1f       	adc	r25, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
    27e0:	fc 01       	movw	r30, r24
    27e2:	ee 0f       	add	r30, r30
    27e4:	ff 1f       	adc	r31, r31
    27e6:	ee 0f       	add	r30, r30
    27e8:	ff 1f       	adc	r31, r31
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	e8 5c       	subi	r30, 0xC8	; 200
    27f0:	fb 4d       	sbci	r31, 0xDB	; 219
    27f2:	25 85       	ldd	r18, Z+13	; 0x0d
    27f4:	20 7c       	andi	r18, 0xC0	; 192
    27f6:	09 f0       	breq	.+2      	; 0x27fa <udd_ep_alloc+0x36>
    27f8:	69 c0       	rjmp	.+210    	; 0x28cc <udd_ep_alloc+0x108>
	USB_EP_BUFSIZE_t size;
	UDD_EP_t *ep_ctrl;

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
    27fa:	63 70       	andi	r22, 0x03	; 3
    27fc:	61 30       	cpi	r22, 0x01	; 1
    27fe:	11 f0       	breq	.+4      	; 0x2804 <udd_ep_alloc+0x40>
    2800:	18 f4       	brcc	.+6      	; 0x2808 <udd_ep_alloc+0x44>
    2802:	04 c0       	rjmp	.+8      	; 0x280c <udd_ep_alloc+0x48>
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
		break;
	case USB_EP_TYPE_ISOCHRONOUS:
		type = USB_EP_TYPE_ISOCHRONOUS_gc;
    2804:	20 ec       	ldi	r18, 0xC0	; 192
    2806:	03 c0       	rjmp	.+6      	; 0x280e <udd_ep_alloc+0x4a>
		break;
	case USB_EP_TYPE_BULK:
	case USB_EP_TYPE_INTERRUPT: //interrupt behaves as bulk
		type = USB_EP_TYPE_BULK_gc;
    2808:	20 e8       	ldi	r18, 0x80	; 128
    280a:	01 c0       	rjmp	.+2      	; 0x280e <udd_ep_alloc+0x4a>

#if (0!=USB_DEVICE_MAX_EP)
	// Translate USB attribute to hardware defines
	switch (bmAttributes & USB_EP_TYPE_MASK) {
	case USB_EP_TYPE_CONTROL:
		type = USB_EP_TYPE_CONTROL_gc;
    280c:	20 e4       	ldi	r18, 0x40	; 64
#else
	type = USB_EP_TYPE_CONTROL_gc;
#endif

	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
    280e:	40 38       	cpi	r20, 0x80	; 128
    2810:	51 05       	cpc	r21, r1
    2812:	e9 f0       	breq	.+58     	; 0x284e <udd_ep_alloc+0x8a>
    2814:	50 f4       	brcc	.+20     	; 0x282a <udd_ep_alloc+0x66>
    2816:	40 32       	cpi	r20, 0x20	; 32
    2818:	51 05       	cpc	r21, r1
    281a:	a9 f0       	breq	.+42     	; 0x2846 <udd_ep_alloc+0x82>
    281c:	40 34       	cpi	r20, 0x40	; 64
    281e:	51 05       	cpc	r21, r1
    2820:	a1 f0       	breq	.+40     	; 0x284a <udd_ep_alloc+0x86>
    2822:	40 31       	cpi	r20, 0x10	; 16
    2824:	51 05       	cpc	r21, r1
    2826:	d9 f4       	brne	.+54     	; 0x285e <udd_ep_alloc+0x9a>
    2828:	0c c0       	rjmp	.+24     	; 0x2842 <udd_ep_alloc+0x7e>
    282a:	41 15       	cp	r20, r1
    282c:	32 e0       	ldi	r19, 0x02	; 2
    282e:	53 07       	cpc	r21, r19
    2830:	91 f0       	breq	.+36     	; 0x2856 <udd_ep_alloc+0x92>
    2832:	4f 3f       	cpi	r20, 0xFF	; 255
    2834:	33 e0       	ldi	r19, 0x03	; 3
    2836:	53 07       	cpc	r21, r19
    2838:	81 f0       	breq	.+32     	; 0x285a <udd_ep_alloc+0x96>
    283a:	41 15       	cp	r20, r1
    283c:	51 40       	sbci	r21, 0x01	; 1
    283e:	79 f4       	brne	.+30     	; 0x285e <udd_ep_alloc+0x9a>
    2840:	08 c0       	rjmp	.+16     	; 0x2852 <udd_ep_alloc+0x8e>
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
		break;
	case 16:
		size = USB_EP_BUFSIZE_16_gc;
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0d c0       	rjmp	.+26     	; 0x2860 <udd_ep_alloc+0x9c>
		break;
	case 32:
		size = USB_EP_BUFSIZE_32_gc;
    2846:	42 e0       	ldi	r20, 0x02	; 2
    2848:	0b c0       	rjmp	.+22     	; 0x2860 <udd_ep_alloc+0x9c>
		break;
	case 64:
		size = USB_EP_BUFSIZE_64_gc;
    284a:	43 e0       	ldi	r20, 0x03	; 3
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <udd_ep_alloc+0x9c>
		break;
#if (0!=USB_DEVICE_MAX_EP)
	case 128:
		size = USB_EP_BUFSIZE_128_gc;
    284e:	44 e0       	ldi	r20, 0x04	; 4
    2850:	07 c0       	rjmp	.+14     	; 0x2860 <udd_ep_alloc+0x9c>
		break;
	case 256:
		size = USB_EP_BUFSIZE_256_gc;
    2852:	45 e0       	ldi	r20, 0x05	; 5
    2854:	05 c0       	rjmp	.+10     	; 0x2860 <udd_ep_alloc+0x9c>
		break;
	case 512:
		size = USB_EP_BUFSIZE_512_gc;
    2856:	46 e0       	ldi	r20, 0x06	; 6
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <udd_ep_alloc+0x9c>
		break;
	case 1023:
		size =USB_EP_BUFSIZE_1023_gc;
    285a:	47 e0       	ldi	r20, 0x07	; 7
    285c:	01 c0       	rjmp	.+2      	; 0x2860 <udd_ep_alloc+0x9c>
	// Translate USB endpoint size to hardware defines
	switch (MaxEndpointSize) {
	default:
		Assert(false); // Wrong value
	case 8:
		size = USB_EP_BUFSIZE_8_gc;
    285e:	40 e0       	ldi	r20, 0x00	; 0
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2860:	fc 01       	movw	r30, r24
    2862:	ee 0f       	add	r30, r30
    2864:	ff 1f       	adc	r31, r31
    2866:	ee 0f       	add	r30, r30
    2868:	ff 1f       	adc	r31, r31
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	e8 5c       	subi	r30, 0xC8	; 200
    2870:	fb 4d       	sbci	r31, 0xDB	; 219
    2872:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2874:	36 e0       	ldi	r19, 0x06	; 6
    2876:	34 87       	std	Z+12, r19	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2878:	24 2b       	or	r18, r20
    287a:	25 87       	std	Z+13, r18	; 0x0d
		return false; // Already allocated
	}
	udd_ep_init(ep, bmAttributes, MaxEndpointSize);

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
    287c:	fc 01       	movw	r30, r24
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	ee 0f       	add	r30, r30
    2884:	ff 1f       	adc	r31, r31
    2886:	ee 0f       	add	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	e8 5c       	subi	r30, 0xC8	; 200
    288c:	fb 4d       	sbci	r31, 0xDB	; 219
    288e:	25 85       	ldd	r18, Z+13	; 0x0d
    2890:	20 7c       	andi	r18, 0xC0	; 192
    2892:	20 3c       	cpi	r18, 0xC0	; 192
    2894:	69 f4       	brne	.+26     	; 0x28b0 <udd_ep_alloc+0xec>
			&& (udd_endpoint_get_size_field(ep_ctrl)
    2896:	fc 01       	movw	r30, r24
    2898:	ee 0f       	add	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	e8 5c       	subi	r30, 0xC8	; 200
    28a6:	fb 4d       	sbci	r31, 0xDB	; 219
    28a8:	25 85       	ldd	r18, Z+13	; 0x0d
    28aa:	27 70       	andi	r18, 0x07	; 7
    28ac:	27 30       	cpi	r18, 0x07	; 7
    28ae:	81 f0       	breq	.+32     	; 0x28d0 <udd_ep_alloc+0x10c>
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
	}

	udd_endpoint_set_multipacket(ep_ctrl);
    28b0:	88 0f       	add	r24, r24
    28b2:	99 1f       	adc	r25, r25
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	fc 01       	movw	r30, r24
    28be:	e8 5c       	subi	r30, 0xC8	; 200
    28c0:	fb 4d       	sbci	r31, 0xDB	; 219
    28c2:	85 85       	ldd	r24, Z+13	; 0x0d
    28c4:	80 62       	ori	r24, 0x20	; 32
    28c6:	85 87       	std	Z+13, r24	; 0x0d
	return true;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	08 95       	ret
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	if (udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Already allocated
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	08 95       	ret

	// Do not use multipacket mode with isochronous 1023 bytes endpoint
	if (udd_endpoint_get_type(ep_ctrl)==USB_EP_TYPE_ISOCHRONOUS_gc
			&& (udd_endpoint_get_size_field(ep_ctrl)
			==USB_EP_BUFSIZE_1023_gc)) {
		return true;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
	}

	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}
    28d2:	08 95       	ret

000028d4 <udd_ep_is_halted>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    28d4:	e8 2f       	mov	r30, r24
    28d6:	ef 70       	andi	r30, 0x0F	; 15
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	ee 0f       	add	r30, r30
    28dc:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    28de:	08 2e       	mov	r0, r24
    28e0:	00 0c       	add	r0, r0
    28e2:	99 0b       	sbc	r25, r25
    28e4:	88 27       	eor	r24, r24
    28e6:	99 0f       	add	r25, r25
    28e8:	88 1f       	adc	r24, r24
    28ea:	99 27       	eor	r25, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    28ec:	e8 0f       	add	r30, r24
    28ee:	f9 1f       	adc	r31, r25
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	return (udd_endpoint_is_stall(ep_ctrl));
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	ee 0f       	add	r30, r30
    28f6:	ff 1f       	adc	r31, r31
    28f8:	ee 0f       	add	r30, r30
    28fa:	ff 1f       	adc	r31, r31
    28fc:	e8 5c       	subi	r30, 0xC8	; 200
    28fe:	fb 4d       	sbci	r31, 0xDB	; 219
    2900:	85 85       	ldd	r24, Z+13	; 0x0d
}
    2902:	82 fb       	bst	r24, 2
    2904:	88 27       	eor	r24, r24
    2906:	80 f9       	bld	r24, 0
    2908:	08 95       	ret

0000290a <udd_ep_clear_halt>:
	udd_ep_abort(ep);
	return true;
}

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    290a:	0f 93       	push	r16
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    290c:	28 2f       	mov	r18, r24
    290e:	2f 70       	andi	r18, 0x0F	; 15
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	a9 01       	movw	r20, r18
    2914:	44 0f       	add	r20, r20
    2916:	55 1f       	adc	r21, r21
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2918:	28 2f       	mov	r18, r24
    291a:	08 2e       	mov	r0, r24
    291c:	00 0c       	add	r0, r0
    291e:	33 0b       	sbc	r19, r19
    2920:	22 27       	eor	r18, r18
    2922:	33 0f       	add	r19, r19
    2924:	22 1f       	adc	r18, r18
    2926:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2928:	24 0f       	add	r18, r20
    292a:	35 1f       	adc	r19, r21
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_clear_dtgl(ep_ctrl);
    292c:	a9 01       	movw	r20, r18
    292e:	44 0f       	add	r20, r20
    2930:	55 1f       	adc	r21, r21
    2932:	44 0f       	add	r20, r20
    2934:	55 1f       	adc	r21, r21
    2936:	44 0f       	add	r20, r20
    2938:	55 1f       	adc	r21, r21
    293a:	fa 01       	movw	r30, r20
    293c:	ec 5b       	subi	r30, 0xBC	; 188
    293e:	fb 4d       	sbci	r31, 0xDB	; 219
    2940:	01 e0       	ldi	r16, 0x01	; 1
    2942:	06 93       	lac	Z, r16
	if (!udd_endpoint_is_stall(ep_ctrl)) {
    2944:	fa 01       	movw	r30, r20
    2946:	e8 5c       	subi	r30, 0xC8	; 200
    2948:	fb 4d       	sbci	r31, 0xDB	; 219
    294a:	95 85       	ldd	r25, Z+13	; 0x0d
    294c:	92 ff       	sbrs	r25, 2
    294e:	11 c0       	rjmp	.+34     	; 0x2972 <udd_ep_clear_halt+0x68>
		return true; // No stall on going
	}
	udd_endpoint_disable_stall(ep_ctrl);
    2950:	fa 01       	movw	r30, r20
    2952:	e8 5c       	subi	r30, 0xC8	; 200
    2954:	fb 4d       	sbci	r31, 0xDB	; 219
    2956:	95 85       	ldd	r25, Z+13	; 0x0d
    2958:	9b 7f       	andi	r25, 0xFB	; 251
    295a:	95 87       	std	Z+13, r25	; 0x0d

	// If a job is register on clear halt action
	// then execute callback
	ptr_job = udd_ep_get_job(ep);
    295c:	69 dc       	rcall	.-1838   	; 0x2230 <udd_ep_get_job>
    295e:	fc 01       	movw	r30, r24
	if (ptr_job->busy == true) {
    2960:	80 81       	ld	r24, Z
    2962:	80 ff       	sbrs	r24, 0
    2964:	06 c0       	rjmp	.+12     	; 0x2972 <udd_ep_clear_halt+0x68>
		ptr_job->busy = false;
    2966:	8e 7f       	andi	r24, 0xFE	; 254
    2968:	80 83       	st	Z, r24
		ptr_job->call_nohalt();
    296a:	07 80       	ldd	r0, Z+7	; 0x07
    296c:	f0 85       	ldd	r31, Z+8	; 0x08
    296e:	e0 2d       	mov	r30, r0
    2970:	09 95       	icall
	}
	return true;
}
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	0f 91       	pop	r16
    2976:	08 95       	ret

00002978 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf,
		iram_size_t buf_size, udd_callback_trans_t callback)
{
    2978:	5f 92       	push	r5
    297a:	6f 92       	push	r6
    297c:	7f 92       	push	r7
    297e:	8f 92       	push	r8
    2980:	9f 92       	push	r9
    2982:	af 92       	push	r10
    2984:	bf 92       	push	r11
    2986:	cf 92       	push	r12
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	1f 92       	push	r1
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	78 2e       	mov	r7, r24
    299e:	66 2e       	mov	r6, r22
    29a0:	4a 01       	movw	r8, r20
    29a2:	59 01       	movw	r10, r18
	UDD_EP_t *ep_ctrl;

	Assert(udd_ep_is_valid(ep));

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
    29a4:	45 dc       	rcall	.-1910   	; 0x2230 <udd_ep_get_job>
    29a6:	6c 01       	movw	r12, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    29a8:	57 2c       	mov	r5, r7
    29aa:	55 1c       	adc	r5, r5
    29ac:	55 24       	eor	r5, r5
    29ae:	55 1c       	adc	r5, r5
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    29b0:	87 2d       	mov	r24, r7
    29b2:	8f 70       	andi	r24, 0x0F	; 15
    29b4:	e8 2e       	mov	r14, r24
    29b6:	f1 2c       	mov	r15, r1
    29b8:	ee 0c       	add	r14, r14
    29ba:	ff 1c       	adc	r15, r15
    29bc:	e5 0c       	add	r14, r5
    29be:	f1 1c       	adc	r15, r1

	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
    29c0:	f7 01       	movw	r30, r14
    29c2:	ee 0f       	add	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	ee 0f       	add	r30, r30
    29c8:	ff 1f       	adc	r31, r31
    29ca:	ee 0f       	add	r30, r30
    29cc:	ff 1f       	adc	r31, r31
    29ce:	e8 5c       	subi	r30, 0xC8	; 200
    29d0:	fb 4d       	sbci	r31, 0xDB	; 219
    29d2:	85 85       	ldd	r24, Z+13	; 0x0d
    29d4:	80 7c       	andi	r24, 0xC0	; 192
    29d6:	09 f4       	brne	.+2      	; 0x29da <udd_ep_run+0x62>
    29d8:	81 c0       	rjmp	.+258    	; 0x2adc <udd_ep_run+0x164>
		return false; // Endpoint not allocated
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
    29da:	f7 01       	movw	r30, r14
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	ee 0f       	add	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	e8 5c       	subi	r30, 0xC8	; 200
    29ea:	fb 4d       	sbci	r31, 0xDB	; 219
    29ec:	85 85       	ldd	r24, Z+13	; 0x0d
    29ee:	80 7c       	andi	r24, 0xC0	; 192
    29f0:	80 3c       	cpi	r24, 0xC0	; 192
    29f2:	61 f0       	breq	.+24     	; 0x2a0c <udd_ep_run+0x94>
		&& udd_endpoint_is_stall(ep_ctrl)) {
    29f4:	f7 01       	movw	r30, r14
    29f6:	ee 0f       	add	r30, r30
    29f8:	ff 1f       	adc	r31, r31
    29fa:	ee 0f       	add	r30, r30
    29fc:	ff 1f       	adc	r31, r31
    29fe:	ee 0f       	add	r30, r30
    2a00:	ff 1f       	adc	r31, r31
    2a02:	e8 5c       	subi	r30, 0xC8	; 200
    2a04:	fb 4d       	sbci	r31, 0xDB	; 219
    2a06:	85 85       	ldd	r24, Z+13	; 0x0d
    2a08:	82 fd       	sbrc	r24, 2
    2a0a:	6a c0       	rjmp	.+212    	; 0x2ae0 <udd_ep_run+0x168>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2a0c:	8f b7       	in	r24, 0x3f	; 63
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2a10:	f8 94       	cli
	return flags;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
		return false; // Endpoint is halted
	}
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    2a14:	f6 01       	movw	r30, r12
    2a16:	90 81       	ld	r25, Z
    2a18:	90 ff       	sbrs	r25, 0
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <udd_ep_run+0xaa>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2a1c:	8f bf       	out	0x3f, r24	; 63
		cpu_irq_restore(flags);
		return false; // Job already on going
    2a1e:	51 2c       	mov	r5, r1
    2a20:	60 c0       	rjmp	.+192    	; 0x2ae2 <udd_ep_run+0x16a>
	}
	ptr_job->busy = true;
    2a22:	f6 01       	movw	r30, r12
    2a24:	90 81       	ld	r25, Z
    2a26:	91 60       	ori	r25, 0x01	; 1
    2a28:	90 83       	st	Z, r25
    2a2a:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);


	// Update Job information
	ptr_job->buf = buf;
    2a2c:	81 82       	std	Z+1, r8	; 0x01
    2a2e:	92 82       	std	Z+2, r9	; 0x02
	ptr_job->buf_size = buf_size;
    2a30:	a3 82       	std	Z+3, r10	; 0x03
    2a32:	b4 82       	std	Z+4, r11	; 0x04
	ptr_job->nb_trans = 0;
    2a34:	15 82       	std	Z+5, r1	; 0x05
    2a36:	16 82       	std	Z+6, r1	; 0x06
	ptr_job->call_trans = callback;
    2a38:	07 83       	std	Z+7, r16	; 0x07
    2a3a:	10 87       	std	Z+8, r17	; 0x08
	// Need to enable shortpacket to send a ZLP (buf_size==0)
	ptr_job->b_shortpacket = b_shortpacket || (buf_size==0);
    2a3c:	61 10       	cpse	r6, r1
    2a3e:	06 c0       	rjmp	.+12     	; 0x2a4c <udd_ep_run+0xd4>
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	a1 14       	cp	r10, r1
    2a44:	b1 04       	cpc	r11, r1
    2a46:	19 f0       	breq	.+6      	; 0x2a4e <udd_ep_run+0xd6>
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <udd_ep_run+0xd6>
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	f6 01       	movw	r30, r12
    2a50:	80 81       	ld	r24, Z
    2a52:	90 fb       	bst	r25, 0
    2a54:	81 f9       	bld	r24, 1
	ptr_job->b_use_out_cache_buffer = false;
    2a56:	8b 7f       	andi	r24, 0xFB	; 251
    2a58:	80 83       	st	Z, r24

	// Initialize value to simulate a empty transfer
	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    2a5a:	55 20       	and	r5, r5
    2a5c:	61 f0       	breq	.+24     	; 0x2a76 <udd_ep_run+0xfe>
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
    2a5e:	f7 01       	movw	r30, r14
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ee 0f       	add	r30, r30
    2a66:	ff 1f       	adc	r31, r31
    2a68:	ee 0f       	add	r30, r30
    2a6a:	ff 1f       	adc	r31, r31
    2a6c:	e8 5c       	subi	r30, 0xC8	; 200
    2a6e:	fb 4d       	sbci	r31, 0xDB	; 219
    2a70:	12 8a       	std	Z+18, r1	; 0x12
    2a72:	13 8a       	std	Z+19, r1	; 0x13
    2a74:	2e c0       	rjmp	.+92     	; 0x2ad2 <udd_ep_run+0x15a>
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
    2a76:	f7 01       	movw	r30, r14
    2a78:	ee 0f       	add	r30, r30
    2a7a:	ff 1f       	adc	r31, r31
    2a7c:	ee 0f       	add	r30, r30
    2a7e:	ff 1f       	adc	r31, r31
    2a80:	ee 0f       	add	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	e8 5c       	subi	r30, 0xC8	; 200
    2a86:	fb 4d       	sbci	r31, 0xDB	; 219
    2a88:	85 85       	ldd	r24, Z+13	; 0x0d
    2a8a:	80 7c       	andi	r24, 0xC0	; 192
    2a8c:	80 3c       	cpi	r24, 0xC0	; 192
    2a8e:	a1 f4       	brne	.+40     	; 0x2ab8 <udd_ep_run+0x140>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2a90:	c7 01       	movw	r24, r14
    2a92:	88 0f       	add	r24, r24
    2a94:	99 1f       	adc	r25, r25
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
		udd_endpoint_in_reset_nb_sent(ep_ctrl);
	}
	else
	{
		if ((USB_EP_TYPE_ISOCHRONOUS_gc == udd_endpoint_get_type(ep_ctrl))
		&& (0 != (buf_size % udd_ep_get_size(ep_ctrl)))) {
    2a9e:	8c 5b       	subi	r24, 0xBC	; 188
    2aa0:	9b 4d       	sbci	r25, 0xDB	; 219
    2aa2:	a0 db       	rcall	.-2240   	; 0x21e4 <udd_ep_get_size>
    2aa4:	bc 01       	movw	r22, r24
    2aa6:	c5 01       	movw	r24, r10
    2aa8:	12 d3       	rcall	.+1572   	; 0x30ce <__udivmodhi4>
    2aaa:	89 2b       	or	r24, r25
    2aac:	29 f0       	breq	.+10     	; 0x2ab8 <udd_ep_run+0x140>
			// The user must use a buffer size modulo endpoint size
			ptr_job->busy = false;
    2aae:	f6 01       	movw	r30, r12
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8e 7f       	andi	r24, 0xFE	; 254
    2ab4:	80 83       	st	Z, r24
			return false;
    2ab6:	15 c0       	rjmp	.+42     	; 0x2ae2 <udd_ep_run+0x16a>
		}
		udd_endpoint_out_reset_nb_received(ep_ctrl);
    2ab8:	f7 01       	movw	r30, r14
    2aba:	ee 0f       	add	r30, r30
    2abc:	ff 1f       	adc	r31, r31
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	ee 0f       	add	r30, r30
    2ac4:	ff 1f       	adc	r31, r31
    2ac6:	e8 5c       	subi	r30, 0xC8	; 200
    2ac8:	fb 4d       	sbci	r31, 0xDB	; 219
    2aca:	16 86       	std	Z+14, r1	; 0x0e
    2acc:	17 86       	std	Z+15, r1	; 0x0f
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
    2ace:	12 8a       	std	Z+18, r1	; 0x12
    2ad0:	13 8a       	std	Z+19, r1	; 0x13
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
    2ad2:	87 2d       	mov	r24, r7
    2ad4:	39 dc       	rcall	.-1934   	; 0x2348 <udd_ep_trans_complet>
	return true;
    2ad6:	55 24       	eor	r5, r5
    2ad8:	53 94       	inc	r5
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <udd_ep_run+0x16a>
	// Get control & job about this endpoint
	ptr_job = udd_ep_get_job(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);

	if (!udd_endpoint_is_enable(ep_ctrl)) {
		return false; // Endpoint not allocated
    2adc:	51 2c       	mov	r5, r1
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <udd_ep_run+0x16a>
	}
	if (udd_endpoint_get_type(ep_ctrl)!=USB_EP_TYPE_ISOCHRONOUS_gc
		&& udd_endpoint_is_stall(ep_ctrl)) {
		return false; // Endpoint is halted
    2ae0:	51 2c       	mov	r5, r1
		udd_endpoint_out_set_nbbyte(ep_ctrl, 0);
	}
	// Request next transfer
	udd_ep_trans_complet(ep);
	return true;
}
    2ae2:	85 2d       	mov	r24, r5
    2ae4:	0f 90       	pop	r0
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	1f 91       	pop	r17
    2aec:	0f 91       	pop	r16
    2aee:	ff 90       	pop	r15
    2af0:	ef 90       	pop	r14
    2af2:	df 90       	pop	r13
    2af4:	cf 90       	pop	r12
    2af6:	bf 90       	pop	r11
    2af8:	af 90       	pop	r10
    2afa:	9f 90       	pop	r9
    2afc:	8f 90       	pop	r8
    2afe:	7f 90       	pop	r7
    2b00:	6f 90       	pop	r6
    2b02:	5f 90       	pop	r5
    2b04:	08 95       	ret

00002b06 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	18 2f       	mov	r17, r24
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2b12:	f8 2e       	mov	r15, r24
    2b14:	ff 1c       	adc	r15, r15
    2b16:	ff 24       	eor	r15, r15
    2b18:	ff 1c       	adc	r15, r15
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b1a:	c8 2f       	mov	r28, r24
    2b1c:	cf 70       	andi	r28, 0x0F	; 15
    2b1e:	d0 e0       	ldi	r29, 0x00	; 0
    2b20:	cc 0f       	add	r28, r28
    2b22:	dd 1f       	adc	r29, r29
    2b24:	cf 0d       	add	r28, r15
    2b26:	d1 1d       	adc	r29, r1
	UDD_EP_t *ep_ctrl;
	udd_ep_job_t *ptr_job;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    2b28:	83 db       	rcall	.-2298   	; 0x2230 <udd_ep_get_job>
    2b2a:	dc 01       	movw	r26, r24

	// Stop transfer
	udd_endpoint_set_NACK0(ep_ctrl);
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	ee 0f       	add	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	ee 0f       	add	r30, r30
    2b34:	ff 1f       	adc	r31, r31
    2b36:	ee 0f       	add	r30, r30
    2b38:	ff 1f       	adc	r31, r31
    2b3a:	ec 5b       	subi	r30, 0xBC	; 188
    2b3c:	fb 4d       	sbci	r31, 0xDB	; 219
    2b3e:	02 e0       	ldi	r16, 0x02	; 2
    2b40:	05 93       	las	Z, r16
	if (ptr_job->busy == false) {
    2b42:	8c 91       	ld	r24, X
    2b44:	80 ff       	sbrs	r24, 0
    2b46:	22 c0       	rjmp	.+68     	; 0x2b8c <udd_ep_abort+0x86>
		return; // No job on going
	}
	ptr_job->busy = false;
    2b48:	8e 7f       	andi	r24, 0xFE	; 254
    2b4a:	8c 93       	st	X, r24
	if (NULL != ptr_job->call_trans) {
    2b4c:	17 96       	adiw	r26, 0x07	; 7
    2b4e:	ed 91       	ld	r30, X+
    2b50:	fc 91       	ld	r31, X
    2b52:	18 97       	sbiw	r26, 0x08	; 8
    2b54:	30 97       	sbiw	r30, 0x00	; 0
    2b56:	d1 f0       	breq	.+52     	; 0x2b8c <udd_ep_abort+0x86>
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
    2b58:	ff 20       	and	r15, r15
    2b5a:	59 f0       	breq	.+22     	; 0x2b72 <udd_ep_abort+0x6c>
    2b5c:	cc 0f       	add	r28, r28
    2b5e:	dd 1f       	adc	r29, r29
    2b60:	cc 0f       	add	r28, r28
    2b62:	dd 1f       	adc	r29, r29
    2b64:	cc 0f       	add	r28, r28
    2b66:	dd 1f       	adc	r29, r29
    2b68:	c8 5c       	subi	r28, 0xC8	; 200
    2b6a:	db 4d       	sbci	r29, 0xDB	; 219
    2b6c:	6a 89       	ldd	r22, Y+18	; 0x12
    2b6e:	7b 89       	ldd	r23, Y+19	; 0x13
    2b70:	0a c0       	rjmp	.+20     	; 0x2b86 <udd_ep_abort+0x80>
    2b72:	cc 0f       	add	r28, r28
    2b74:	dd 1f       	adc	r29, r29
    2b76:	cc 0f       	add	r28, r28
    2b78:	dd 1f       	adc	r29, r29
    2b7a:	cc 0f       	add	r28, r28
    2b7c:	dd 1f       	adc	r29, r29
    2b7e:	c8 5c       	subi	r28, 0xC8	; 200
    2b80:	db 4d       	sbci	r29, 0xDB	; 219
    2b82:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b84:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b86:	41 2f       	mov	r20, r17
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	09 95       	icall
				(ep & USB_EP_DIR_IN) ?
				udd_endpoint_in_nb_sent(ep_ctrl)
				: udd_endpoint_out_nb_receiv(ep_ctrl),
				ep);
	}
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	08 95       	ret

00002b98 <udd_ep_free>:
	udd_endpoint_set_multipacket(ep_ctrl);
	return true;
}

void udd_ep_free(udd_ep_id_t ep)
{
    2b98:	cf 93       	push	r28
    2b9a:	c8 2f       	mov	r28, r24
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
    2b9c:	b4 df       	rcall	.-152    	; 0x2b06 <udd_ep_abort>
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2b9e:	ec 2f       	mov	r30, r28
    2ba0:	ef 70       	andi	r30, 0x0F	; 15
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2ba8:	8c 2f       	mov	r24, r28
    2baa:	cc 0f       	add	r28, r28
    2bac:	99 0b       	sbc	r25, r25
    2bae:	88 27       	eor	r24, r24
    2bb0:	99 0f       	add	r25, r25
    2bb2:	88 1f       	adc	r24, r24
    2bb4:	99 27       	eor	r25, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2bb6:	e8 0f       	add	r30, r24
    2bb8:	f9 1f       	adc	r31, r25
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	udd_ep_abort(ep);
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2bba:	ee 0f       	add	r30, r30
    2bbc:	ff 1f       	adc	r31, r31
    2bbe:	ee 0f       	add	r30, r30
    2bc0:	ff 1f       	adc	r31, r31
    2bc2:	ee 0f       	add	r30, r30
    2bc4:	ff 1f       	adc	r31, r31
    2bc6:	e8 5c       	subi	r30, 0xC8	; 200
    2bc8:	fb 4d       	sbci	r31, 0xDB	; 219
    2bca:	15 86       	std	Z+13, r1	; 0x0d
}
    2bcc:	cf 91       	pop	r28
    2bce:	08 95       	ret

00002bd0 <udd_ep_set_halt>:
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2bd0:	e8 2f       	mov	r30, r24
    2bd2:	ef 70       	andi	r30, 0x0F	; 15
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2bda:	28 2f       	mov	r18, r24
    2bdc:	08 2e       	mov	r0, r24
    2bde:	00 0c       	add	r0, r0
    2be0:	33 0b       	sbc	r19, r19
    2be2:	22 27       	eor	r18, r18
    2be4:	33 0f       	add	r19, r19
    2be6:	22 1f       	adc	r18, r18
    2be8:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2bea:	e2 0f       	add	r30, r18
    2bec:	f3 1f       	adc	r31, r19
{
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_enable_stall(ep_ctrl);
    2bee:	ee 0f       	add	r30, r30
    2bf0:	ff 1f       	adc	r31, r31
    2bf2:	ee 0f       	add	r30, r30
    2bf4:	ff 1f       	adc	r31, r31
    2bf6:	ee 0f       	add	r30, r30
    2bf8:	ff 1f       	adc	r31, r31
    2bfa:	e8 5c       	subi	r30, 0xC8	; 200
    2bfc:	fb 4d       	sbci	r31, 0xDB	; 219
    2bfe:	95 85       	ldd	r25, Z+13	; 0x0d
    2c00:	94 60       	ori	r25, 0x04	; 4
    2c02:	95 87       	std	Z+13, r25	; 0x0d

	udd_ep_abort(ep);
    2c04:	80 df       	rcall	.-256    	; 0x2b06 <udd_ep_abort>
	return true;
}
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	08 95       	ret

00002c0a <udd_ep_wait_stall_clear>:
	}
}

bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	8b 01       	movw	r16, r22
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c14:	c8 2f       	mov	r28, r24
    2c16:	cf 70       	andi	r28, 0x0F	; 15
    2c18:	d0 e0       	ldi	r29, 0x00	; 0
    2c1a:	cc 0f       	add	r28, r28
    2c1c:	dd 1f       	adc	r29, r29
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2c1e:	28 2f       	mov	r18, r24
    2c20:	08 2e       	mov	r0, r24
    2c22:	00 0c       	add	r0, r0
    2c24:	33 0b       	sbc	r19, r19
    2c26:	22 27       	eor	r18, r18
    2c28:	33 0f       	add	r19, r19
    2c2a:	22 1f       	adc	r18, r18
    2c2c:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2c2e:	c2 0f       	add	r28, r18
    2c30:	d3 1f       	adc	r29, r19
	udd_ep_job_t *ptr_job;
	UDD_EP_t *ep_ctrl;
	Assert(udd_ep_is_valid(ep));

	ep_ctrl = udd_ep_get_ctrl(ep);
	ptr_job = udd_ep_get_job(ep);
    2c32:	fe da       	rcall	.-2564   	; 0x2230 <udd_ep_get_job>

	if (udd_endpoint_is_stall(ep_ctrl)) {
    2c34:	cc 0f       	add	r28, r28
    2c36:	dd 1f       	adc	r29, r29
    2c38:	cc 0f       	add	r28, r28
    2c3a:	dd 1f       	adc	r29, r29
    2c3c:	cc 0f       	add	r28, r28
    2c3e:	dd 1f       	adc	r29, r29
    2c40:	c8 5c       	subi	r28, 0xC8	; 200
    2c42:	db 4d       	sbci	r29, 0xDB	; 219
    2c44:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c46:	22 ff       	sbrs	r18, 2
    2c48:	0a c0       	rjmp	.+20     	; 0x2c5e <udd_ep_wait_stall_clear+0x54>
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	20 81       	ld	r18, Z
    2c4e:	20 fd       	sbrc	r18, 0
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <udd_ep_wait_stall_clear+0x5c>
			return false; // Job already on going
		}
		ptr_job->busy = true;
    2c52:	21 60       	ori	r18, 0x01	; 1
    2c54:	20 83       	st	Z, r18
		ptr_job->call_nohalt = callback;
    2c56:	07 83       	std	Z+7, r16	; 0x07
    2c58:	10 87       	std	Z+8, r17	; 0x08
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	05 c0       	rjmp	.+10     	; 0x2c68 <udd_ep_wait_stall_clear+0x5e>
		}
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
    2c5e:	f8 01       	movw	r30, r16
    2c60:	09 95       	icall
	}
	return true;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	01 c0       	rjmp	.+2      	; 0x2c68 <udd_ep_wait_stall_clear+0x5e>
	ptr_job = udd_ep_get_job(ep);

	if (udd_endpoint_is_stall(ep_ctrl)) {
		// Wait clear halt endpoint
		if (ptr_job->busy == true) {
			return false; // Job already on going
    2c66:	80 e0       	ldi	r24, 0x00	; 0
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	0f 91       	pop	r16
    2c70:	08 95       	ret

00002c72 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    2c72:	1f 92       	push	r1
    2c74:	0f 92       	push	r0
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	0f 92       	push	r0
    2c7a:	11 24       	eor	r1, r1
    2c7c:	0f 93       	push	r16
    2c7e:	2f 93       	push	r18
    2c80:	3f 93       	push	r19
    2c82:	4f 93       	push	r20
    2c84:	5f 93       	push	r21
    2c86:	6f 93       	push	r22
    2c88:	7f 93       	push	r23
    2c8a:	8f 93       	push	r24
    2c8c:	9f 93       	push	r25
    2c8e:	af 93       	push	r26
    2c90:	bf 93       	push	r27
    2c92:	ef 93       	push	r30
    2c94:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    2c96:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2c9a:	88 23       	and	r24, r24
    2c9c:	3c f4       	brge	.+14     	; 0x2cac <__vector_125+0x3a>
		udd_ack_start_of_frame_event();
    2c9e:	80 e8       	ldi	r24, 0x80	; 128
    2ca0:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udc_sof_notify();
    2ca4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
    2ca8:	00 d2       	rcall	.+1024   	; 0x30aa <main_sof_action>
#endif
		goto udd_interrupt_bus_event_end;
    2caa:	88 c0       	rjmp	.+272    	; 0x2dbc <__vector_125+0x14a>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    2cac:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cb0:	82 ff       	sbrs	r24, 2
    2cb2:	20 c0       	rjmp	.+64     	; 0x2cf4 <__vector_125+0x82>
		udd_ack_underflow_event();
    2cb4:	84 e0       	ldi	r24, 0x04	; 4
    2cb6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_in_underflow()) {
    2cba:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <udd_sram+0x14>
    2cbe:	86 ff       	sbrs	r24, 6
    2cc0:	7d c0       	rjmp	.+250    	; 0x2dbc <__vector_125+0x14a>
	udd_control_out_ack_tc();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2cc2:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2cc6:	81 fd       	sbrc	r24, 1
    2cc8:	79 c0       	rjmp	.+242    	; 0x2dbc <__vector_125+0x14a>
    2cca:	cd da       	rcall	.-2662   	; 0x2266 <udd_ctrl_interrupt_tc_setup>
    2ccc:	81 11       	cpse	r24, r1
    2cce:	76 c0       	rjmp	.+236    	; 0x2dbc <__vector_125+0x14a>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2cd0:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_ep_control_state>
    2cd4:	81 30       	cpi	r24, 0x01	; 1
    2cd6:	11 f4       	brne	.+4      	; 0x2cdc <__vector_125+0x6a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    2cd8:	03 da       	rcall	.-3066   	; 0x20e0 <udd_ctrl_send_zlp_in>
    2cda:	70 c0       	rjmp	.+224    	; 0x2dbc <__vector_125+0x14a>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2cdc:	84 30       	cpi	r24, 0x04	; 4
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <__vector_125+0x70>
    2ce0:	6d c0       	rjmp	.+218    	; 0x2dbc <__vector_125+0x14a>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    2ce2:	ed e4       	ldi	r30, 0x4D	; 77
    2ce4:	f4 e2       	ldi	r31, 0x24	; 36
    2ce6:	04 e0       	ldi	r16, 0x04	; 4
    2ce8:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2cea:	e5 e4       	ldi	r30, 0x45	; 69
    2cec:	f4 e2       	ldi	r31, 0x24	; 36
    2cee:	04 e0       	ldi	r16, 0x04	; 4
    2cf0:	05 93       	las	Z, r16
    2cf2:	64 c0       	rjmp	.+200    	; 0x2dbc <__vector_125+0x14a>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    2cf4:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2cf8:	81 ff       	sbrs	r24, 1
    2cfa:	5b c0       	rjmp	.+182    	; 0x2db2 <__vector_125+0x140>
		udd_ack_overflow_event();
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (udd_control_out_overflow()) {
    2d02:	80 91 44 24 	lds	r24, 0x2444	; 0x802444 <udd_sram+0xc>
    2d06:	86 ff       	sbrs	r24, 6
    2d08:	59 c0       	rjmp	.+178    	; 0x2dbc <__vector_125+0x14a>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    2d0a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2d0e:	81 fd       	sbrc	r24, 1
    2d10:	55 c0       	rjmp	.+170    	; 0x2dbc <__vector_125+0x14a>
    2d12:	a9 da       	rcall	.-2734   	; 0x2266 <udd_ctrl_interrupt_tc_setup>
    2d14:	81 11       	cpse	r24, r1
    2d16:	52 c0       	rjmp	.+164    	; 0x2dbc <__vector_125+0x14a>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2d18:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_ep_control_state>
    2d1c:	82 30       	cpi	r24, 0x02	; 2
    2d1e:	41 f4       	brne	.+16     	; 0x2d30 <__vector_125+0xbe>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d20:	84 e0       	ldi	r24, 0x04	; 4
    2d22:	80 93 35 24 	sts	0x2435, r24	; 0x802435 <udd_ep_control_state>
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    2d26:	e4 e4       	ldi	r30, 0x44	; 68
    2d28:	f4 e2       	ldi	r31, 0x24	; 36
    2d2a:	02 e0       	ldi	r16, 0x02	; 2
    2d2c:	06 93       	lac	Z, r16
    2d2e:	46 c0       	rjmp	.+140    	; 0x2dbc <__vector_125+0x14a>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2d30:	83 30       	cpi	r24, 0x03	; 3
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <__vector_125+0xc4>
    2d34:	43 c0       	rjmp	.+134    	; 0x2dbc <__vector_125+0x14a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    2d36:	ed e4       	ldi	r30, 0x4D	; 77
    2d38:	f4 e2       	ldi	r31, 0x24	; 36
    2d3a:	04 e0       	ldi	r16, 0x04	; 4
    2d3c:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    2d3e:	e5 e4       	ldi	r30, 0x45	; 69
    2d40:	f4 e2       	ldi	r31, 0x24	; 36
    2d42:	04 e0       	ldi	r16, 0x04	; 4
    2d44:	05 93       	las	Z, r16
    2d46:	3a c0       	rjmp	.+116    	; 0x2dbc <__vector_125+0x14a>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    2d48:	80 e1       	ldi	r24, 0x10	; 16
    2d4a:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	da de       	rcall	.-588    	; 0x2b06 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2d52:	81 e8       	ldi	r24, 0x81	; 129
    2d54:	d8 de       	rcall	.-592    	; 0x2b06 <udd_ep_abort>
		udd_ack_reset_event();
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	d6 de       	rcall	.-596    	; 0x2b06 <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    2d5a:	82 e8       	ldi	r24, 0x82	; 130
    2d5c:	d4 de       	rcall	.-600    	; 0x2b06 <udd_ep_abort>
		}
#endif
		udc_reset();
    2d5e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    2d62:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2d66:	e8 e3       	ldi	r30, 0x38	; 56
    2d68:	f4 e2       	ldi	r31, 0x24	; 36
    2d6a:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    2d6c:	96 e0       	ldi	r25, 0x06	; 6
    2d6e:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2d70:	83 e4       	ldi	r24, 0x43	; 67
    2d72:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    2d74:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    2d76:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    2d78:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    2d7a:	81 ef       	ldi	r24, 0xF1	; 241
    2d7c:	93 e2       	ldi	r25, 0x23	; 35
    2d7e:	80 8b       	std	Z+16, r24	; 0x10
    2d80:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    2d82:	7b d9       	rcall	.-3338   	; 0x207a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    2d84:	1b c0       	rjmp	.+54     	; 0x2dbc <__vector_125+0x14a>
	}

	if (udd_is_suspend_event()) {
    2d86:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2d8a:	86 ff       	sbrs	r24, 6
    2d8c:	07 c0       	rjmp	.+14     	; 0x2d9c <__vector_125+0x12a>
		udd_ack_suspend_event();
    2d8e:	80 e4       	ldi	r24, 0x40	; 64
    2d90:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(false); // Enter in SUSPEND mode
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	3a d9       	rcall	.-3468   	; 0x200c <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
    2d98:	82 d1       	rcall	.+772    	; 0x309e <main_suspend_action>
#endif
		goto udd_interrupt_bus_event_end;
    2d9a:	10 c0       	rjmp	.+32     	; 0x2dbc <__vector_125+0x14a>
	}

	if (udd_is_resume_event()) {
    2d9c:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2da0:	85 ff       	sbrs	r24, 5
    2da2:	0c c0       	rjmp	.+24     	; 0x2dbc <__vector_125+0x14a>
		udd_ack_resume_event();
    2da4:	80 e2       	ldi	r24, 0x20	; 32
    2da6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		udd_sleep_mode(true); // Enter in power reduction mode
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	2f d9       	rcall	.-3490   	; 0x200c <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
    2dae:	7a d1       	rcall	.+756    	; 0x30a4 <main_resume_action>
#endif
		goto udd_interrupt_bus_event_end;
    2db0:	05 c0       	rjmp	.+10     	; 0x2dbc <__vector_125+0x14a>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    2db2:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <__TEXT_REGION_LENGTH__+0x7004cb>
    2db6:	84 fd       	sbrc	r24, 4
    2db8:	c7 cf       	rjmp	.-114    	; 0x2d48 <__vector_125+0xd6>
    2dba:	e5 cf       	rjmp	.-54     	; 0x2d86 <__vector_125+0x114>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    2dbc:	ff 91       	pop	r31
    2dbe:	ef 91       	pop	r30
    2dc0:	bf 91       	pop	r27
    2dc2:	af 91       	pop	r26
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	7f 91       	pop	r23
    2dca:	6f 91       	pop	r22
    2dcc:	5f 91       	pop	r21
    2dce:	4f 91       	pop	r20
    2dd0:	3f 91       	pop	r19
    2dd2:	2f 91       	pop	r18
    2dd4:	0f 91       	pop	r16
    2dd6:	0f 90       	pop	r0
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	0f 90       	pop	r0
    2ddc:	1f 90       	pop	r1
    2dde:	18 95       	reti

00002de0 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    2de0:	1f 92       	push	r1
    2de2:	0f 92       	push	r0
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	0f 92       	push	r0
    2de8:	11 24       	eor	r1, r1
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	2f 93       	push	r18
    2df0:	3f 93       	push	r19
    2df2:	4f 93       	push	r20
    2df4:	5f 93       	push	r21
    2df6:	6f 93       	push	r22
    2df8:	7f 93       	push	r23
    2dfa:	8f 93       	push	r24
    2dfc:	9f 93       	push	r25
    2dfe:	af 93       	push	r26
    2e00:	bf 93       	push	r27
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    2e0a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>
    2e0e:	81 fd       	sbrc	r24, 1
    2e10:	03 c0       	rjmp	.+6      	; 0x2e18 <__vector_126+0x38>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    2e12:	29 da       	rcall	.-2990   	; 0x2266 <udd_ctrl_interrupt_tc_setup>
    2e14:	81 11       	cpse	r24, r1
    2e16:	c3 c0       	rjmp	.+390    	; 0x2f9e <__vector_126+0x1be>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    2e1e:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <__TEXT_REGION_LENGTH__+0x7004c5>
	i_fifo = 2 * (1 + ~rp);
    2e22:	81 95       	neg	r24
    2e24:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    2e26:	e4 e4       	ldi	r30, 0x44	; 68
    2e28:	f4 e2       	ldi	r31, 0x24	; 36
    2e2a:	e8 1b       	sub	r30, r24
    2e2c:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    2e2e:	20 81       	ld	r18, Z
    2e30:	31 81       	ldd	r19, Z+1	; 0x01
    2e32:	24 54       	subi	r18, 0x44	; 68
    2e34:	34 42       	sbci	r19, 0x24	; 36
    2e36:	36 95       	lsr	r19
    2e38:	27 95       	ror	r18
    2e3a:	36 95       	lsr	r19
    2e3c:	27 95       	ror	r18
    2e3e:	36 95       	lsr	r19
    2e40:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    2e42:	82 2f       	mov	r24, r18
    2e44:	86 95       	lsr	r24
    2e46:	20 fd       	sbrc	r18, 0
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <__vector_126+0x6e>
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	01 c0       	rjmp	.+2      	; 0x2e50 <__vector_126+0x70>
    2e4e:	90 e8       	ldi	r25, 0x80	; 128
    2e50:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2e52:	e8 2f       	mov	r30, r24
    2e54:	ef 70       	andi	r30, 0x0F	; 15
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	ee 0f       	add	r30, r30
    2e5a:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	08 2e       	mov	r0, r24
    2e60:	00 0c       	add	r0, r0
    2e62:	33 0b       	sbc	r19, r19
    2e64:	22 27       	eor	r18, r18
    2e66:	33 0f       	add	r19, r19
    2e68:	22 1f       	adc	r18, r18
    2e6a:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    2e6c:	e2 0f       	add	r30, r18
    2e6e:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    2e70:	df 01       	movw	r26, r30
    2e72:	aa 0f       	add	r26, r26
    2e74:	bb 1f       	adc	r27, r27
    2e76:	aa 0f       	add	r26, r26
    2e78:	bb 1f       	adc	r27, r27
    2e7a:	aa 0f       	add	r26, r26
    2e7c:	bb 1f       	adc	r27, r27
    2e7e:	a8 5c       	subi	r26, 0xC8	; 200
    2e80:	bb 4d       	sbci	r27, 0xDB	; 219
    2e82:	1c 96       	adiw	r26, 0x0c	; 12
    2e84:	9c 91       	ld	r25, X
    2e86:	95 ff       	sbrs	r25, 5
    2e88:	8a c0       	rjmp	.+276    	; 0x2f9e <__vector_126+0x1be>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    2e8a:	ee 0f       	add	r30, r30
    2e8c:	ff 1f       	adc	r31, r31
    2e8e:	ee 0f       	add	r30, r30
    2e90:	ff 1f       	adc	r31, r31
    2e92:	ee 0f       	add	r30, r30
    2e94:	ff 1f       	adc	r31, r31
    2e96:	ec 5b       	subi	r30, 0xBC	; 188
    2e98:	fb 4d       	sbci	r31, 0xDB	; 219
    2e9a:	00 e2       	ldi	r16, 0x20	; 32
    2e9c:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    2e9e:	81 11       	cpse	r24, r1
    2ea0:	79 c0       	rjmp	.+242    	; 0x2f94 <__vector_126+0x1b4>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2ea2:	80 91 35 24 	lds	r24, 0x2435	; 0x802435 <udd_ep_control_state>
    2ea6:	84 30       	cpi	r24, 0x04	; 4
    2ea8:	19 f4       	brne	.+6      	; 0x2eb0 <__vector_126+0xd0>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    2eaa:	28 d9       	rcall	.-3504   	; 0x20fc <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    2eac:	e6 d8       	rcall	.-3636   	; 0x207a <udd_ctrl_init>
    2eae:	77 c0       	rjmp	.+238    	; 0x2f9e <__vector_126+0x1be>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    2eb0:	00 91 46 24 	lds	r16, 0x2446	; 0x802446 <udd_sram+0xe>
    2eb4:	10 91 47 24 	lds	r17, 0x2447	; 0x802447 <udd_sram+0xf>

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2eb8:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <udd_g_ctrlreq+0xa>
    2ebc:	90 91 8c 24 	lds	r25, 0x248C	; 0x80248c <udd_g_ctrlreq+0xb>
    2ec0:	c0 91 31 24 	lds	r28, 0x2431	; 0x802431 <udd_ctrl_payload_nb_trans>
    2ec4:	d0 91 32 24 	lds	r29, 0x2432	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    2ec8:	9e 01       	movw	r18, r28
    2eca:	20 0f       	add	r18, r16
    2ecc:	31 1f       	adc	r19, r17
    2ece:	82 17       	cp	r24, r18
    2ed0:	93 07       	cpc	r25, r19
    2ed2:	18 f4       	brcc	.+6      	; 0x2eda <__vector_126+0xfa>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2ed4:	8c 01       	movw	r16, r24
    2ed6:	0c 1b       	sub	r16, r28
    2ed8:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    2eda:	80 91 89 24 	lds	r24, 0x2489	; 0x802489 <udd_g_ctrlreq+0x8>
    2ede:	90 91 8a 24 	lds	r25, 0x248A	; 0x80248a <udd_g_ctrlreq+0x9>
    2ee2:	a8 01       	movw	r20, r16
    2ee4:	61 ef       	ldi	r22, 0xF1	; 241
    2ee6:	73 e2       	ldi	r23, 0x23	; 35
    2ee8:	8c 0f       	add	r24, r28
    2eea:	9d 1f       	adc	r25, r29
    2eec:	3b d1       	rcall	.+630    	; 0x3164 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    2eee:	c0 0f       	add	r28, r16
    2ef0:	d1 1f       	adc	r29, r17
    2ef2:	c0 93 31 24 	sts	0x2431, r28	; 0x802431 <udd_ctrl_payload_nb_trans>
    2ef6:	d0 93 32 24 	sts	0x2432, r29	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2efa:	00 34       	cpi	r16, 0x40	; 64
    2efc:	11 05       	cpc	r17, r1
    2efe:	69 f4       	brne	.+26     	; 0x2f1a <__vector_126+0x13a>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    2f00:	80 91 33 24 	lds	r24, 0x2433	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    2f04:	90 91 34 24 	lds	r25, 0x2434	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
    2f08:	8c 0f       	add	r24, r28
    2f0a:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    2f0c:	20 91 87 24 	lds	r18, 0x2487	; 0x802487 <udd_g_ctrlreq+0x6>
    2f10:	30 91 88 24 	lds	r19, 0x2488	; 0x802488 <udd_g_ctrlreq+0x7>
    2f14:	82 17       	cp	r24, r18
    2f16:	93 07       	cpc	r25, r19
    2f18:	80 f0       	brcs	.+32     	; 0x2f3a <__vector_126+0x15a>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2f1a:	e1 e8       	ldi	r30, 0x81	; 129
    2f1c:	f4 e2       	ldi	r31, 0x24	; 36
    2f1e:	c2 87       	std	Z+10, r28	; 0x0a
    2f20:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2f22:	06 84       	ldd	r0, Z+14	; 0x0e
    2f24:	f7 85       	ldd	r31, Z+15	; 0x0f
    2f26:	e0 2d       	mov	r30, r0
    2f28:	30 97       	sbiw	r30, 0x00	; 0
    2f2a:	29 f0       	breq	.+10     	; 0x2f36 <__vector_126+0x156>
			if (!udd_g_ctrlreq.over_under_run()) {
    2f2c:	09 95       	icall
    2f2e:	81 11       	cpse	r24, r1
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <__vector_126+0x156>
				// Stall ZLP
				udd_ctrl_stall_data();
    2f32:	c8 d8       	rcall	.-3696   	; 0x20c4 <udd_ctrl_stall_data>
    2f34:	34 c0       	rjmp	.+104    	; 0x2f9e <__vector_126+0x1be>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    2f36:	d4 d8       	rcall	.-3672   	; 0x20e0 <udd_ctrl_send_zlp_in>
    2f38:	32 c0       	rjmp	.+100    	; 0x2f9e <__vector_126+0x1be>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2f3a:	80 91 8b 24 	lds	r24, 0x248B	; 0x80248b <udd_g_ctrlreq+0xa>
    2f3e:	90 91 8c 24 	lds	r25, 0x248C	; 0x80248c <udd_g_ctrlreq+0xb>
    2f42:	c8 17       	cp	r28, r24
    2f44:	d9 07       	cpc	r29, r25
    2f46:	f9 f4       	brne	.+62     	; 0x2f86 <__vector_126+0x1a6>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    2f48:	e0 91 8f 24 	lds	r30, 0x248F	; 0x80248f <udd_g_ctrlreq+0xe>
    2f4c:	f0 91 90 24 	lds	r31, 0x2490	; 0x802490 <udd_g_ctrlreq+0xf>
    2f50:	30 97       	sbiw	r30, 0x00	; 0
    2f52:	11 f4       	brne	.+4      	; 0x2f58 <__vector_126+0x178>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    2f54:	b7 d8       	rcall	.-3730   	; 0x20c4 <udd_ctrl_stall_data>
    2f56:	23 c0       	rjmp	.+70     	; 0x2f9e <__vector_126+0x1be>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2f58:	09 95       	icall
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <__vector_126+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    2f5e:	b2 d8       	rcall	.-3740   	; 0x20c4 <udd_ctrl_stall_data>
    2f60:	1e c0       	rjmp	.+60     	; 0x2f9e <__vector_126+0x1be>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2f62:	20 91 33 24 	lds	r18, 0x2433	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    2f66:	30 91 34 24 	lds	r19, 0x2434	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
    2f6a:	80 91 31 24 	lds	r24, 0x2431	; 0x802431 <udd_ctrl_payload_nb_trans>
    2f6e:	90 91 32 24 	lds	r25, 0x2432	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
    2f72:	82 0f       	add	r24, r18
    2f74:	93 1f       	adc	r25, r19
    2f76:	80 93 33 24 	sts	0x2433, r24	; 0x802433 <udd_ctrl_prev_payload_nb_trans>
    2f7a:	90 93 34 24 	sts	0x2434, r25	; 0x802434 <udd_ctrl_prev_payload_nb_trans+0x1>
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    2f7e:	10 92 31 24 	sts	0x2431, r1	; 0x802431 <udd_ctrl_payload_nb_trans>
    2f82:	10 92 32 24 	sts	0x2432, r1	; 0x802432 <udd_ctrl_payload_nb_trans+0x1>
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    2f86:	e4 e4       	ldi	r30, 0x44	; 68
    2f88:	f4 e2       	ldi	r31, 0x24	; 36
    2f8a:	02 e0       	ldi	r16, 0x02	; 2
    2f8c:	06 93       	lac	Z, r16
	udd_control_out_ack_tc();
    2f8e:	00 e2       	ldi	r16, 0x20	; 32
    2f90:	06 93       	lac	Z, r16
    2f92:	05 c0       	rjmp	.+10     	; 0x2f9e <__vector_126+0x1be>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    2f94:	80 38       	cpi	r24, 0x80	; 128
    2f96:	11 f4       	brne	.+4      	; 0x2f9c <__vector_126+0x1bc>
		udd_ctrl_in_sent();
    2f98:	b9 d8       	rcall	.-3726   	; 0x210c <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <__vector_126+0x1be>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    2f9c:	d5 d9       	rcall	.-3158   	; 0x2348 <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	bf 91       	pop	r27
    2fa8:	af 91       	pop	r26
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	7f 91       	pop	r23
    2fb0:	6f 91       	pop	r22
    2fb2:	5f 91       	pop	r21
    2fb4:	4f 91       	pop	r20
    2fb6:	3f 91       	pop	r19
    2fb8:	2f 91       	pop	r18
    2fba:	1f 91       	pop	r17
    2fbc:	0f 91       	pop	r16
    2fbe:	0f 90       	pop	r0
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	0f 90       	pop	r0
    2fc4:	1f 90       	pop	r1
    2fc6:	18 95       	reti

00002fc8 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	irq_initialize_vectors();
    2fc8:	87 e0       	ldi	r24, 0x07	; 7
    2fca:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	cpu_irq_enable();
    2fce:	78 94       	sei
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2fd0:	ea e7       	ldi	r30, 0x7A	; 122
    2fd2:	f4 e2       	ldi	r31, 0x24	; 36
    2fd4:	10 82       	st	Z, r1
    2fd6:	11 82       	std	Z+1, r1	; 0x01
    2fd8:	12 82       	std	Z+2, r1	; 0x02
    2fda:	13 82       	std	Z+3, r1	; 0x03
    2fdc:	14 82       	std	Z+4, r1	; 0x04
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	85 83       	std	Z+5, r24	; 0x05

	// Initialize the sleep manager
	sleepmgr_init();
#if !SAM0
	sysclk_init();
    2fe2:	0e 94 7f 05 	call	0xafe	; 0xafe <sysclk_init>
	board_init();
    2fe6:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <board_init>
#else
	system_init();
#endif
	ui_init();
    2fea:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ui_init>
	ui_powerdown();
    2fee:	0e 94 89 01 	call	0x312	; 0x312 <ui_powerdown>

	memories_initialization();
    2ff2:	6a d0       	rcall	.+212    	; 0x30c8 <memories_initialization>

	// Start USB stack to authorize VBus monitoring
	udc_start();
    2ff4:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <udc_start>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    2ff8:	0a e7       	ldi	r16, 0x7A	; 122
    2ffa:	14 e2       	ldi	r17, 0x24	; 36
    2ffc:	0f 2e       	mov	r0, r31
    2ffe:	fb e7       	ldi	r31, 0x7B	; 123
    3000:	ef 2e       	mov	r14, r31
    3002:	f4 e2       	ldi	r31, 0x24	; 36
    3004:	ff 2e       	mov	r15, r31
    3006:	f0 2d       	mov	r31, r0
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    3008:	c8 e4       	ldi	r28, 0x48	; 72
    300a:	d0 e0       	ldi	r29, 0x00	; 0

	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {

		if (main_b_msc_enable) {
    300c:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <main_b_msc_enable>
    3010:	88 23       	and	r24, r24
    3012:	29 f1       	breq	.+74     	; 0x305e <__stack+0x5f>
			if (!udi_msc_process_trans()) {
    3014:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <udi_msc_process_trans>
    3018:	81 11       	cpse	r24, r1
    301a:	f8 cf       	rjmp	.-16     	; 0x300c <__stack+0xd>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    301c:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    301e:	f8 01       	movw	r30, r16
    3020:	80 81       	ld	r24, Z
    3022:	81 11       	cpse	r24, r1
    3024:	08 c0       	rjmp	.+16     	; 0x3036 <__stack+0x37>
    3026:	d7 01       	movw	r26, r14
    3028:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    302a:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    302c:	8d 91       	ld	r24, X+
    302e:	88 23       	and	r24, r24
    3030:	e1 f3       	breq	.-8      	; 0x302a <__stack+0x2b>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3032:	e1 11       	cpse	r30, r1
    3034:	02 c0       	rjmp	.+4      	; 0x303a <__stack+0x3b>
		cpu_irq_enable();
    3036:	78 94       	sei
    3038:	e9 cf       	rjmp	.-46     	; 0x300c <__stack+0xd>
    303a:	88 81       	ld	r24, Y

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	e0 50       	subi	r30, 0x00	; 0
    3040:	f0 4e       	sbci	r31, 0xE0	; 224
    3042:	98 2f       	mov	r25, r24
    3044:	91 7f       	andi	r25, 0xF1	; 241
    3046:	80 81       	ld	r24, Z
    3048:	89 2b       	or	r24, r25
    304a:	88 83       	st	Y, r24
	sleep_enable();
    304c:	88 81       	ld	r24, Y
    304e:	81 60       	ori	r24, 0x01	; 1
    3050:	88 83       	st	Y, r24

	cpu_irq_enable();
    3052:	78 94       	sei
	sleep_enter();
    3054:	88 95       	sleep

	sleep_disable();
    3056:	88 81       	ld	r24, Y
    3058:	8e 7f       	andi	r24, 0xFE	; 254
    305a:	88 83       	st	Y, r24
    305c:	d7 cf       	rjmp	.-82     	; 0x300c <__stack+0xd>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
    305e:	f8 94       	cli

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    3060:	f8 01       	movw	r30, r16
    3062:	80 81       	ld	r24, Z
    3064:	81 11       	cpse	r24, r1
    3066:	08 c0       	rjmp	.+16     	; 0x3078 <__stack+0x79>
    3068:	d7 01       	movw	r26, r14
    306a:	e0 e0       	ldi	r30, 0x00	; 0
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
    306c:	ef 5f       	subi	r30, 0xFF	; 255

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
    306e:	8d 91       	ld	r24, X+
    3070:	88 23       	and	r24, r24
    3072:	e1 f3       	breq	.-8      	; 0x306c <__stack+0x6d>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
    3074:	e1 11       	cpse	r30, r1
    3076:	02 c0       	rjmp	.+4      	; 0x307c <__stack+0x7d>
		cpu_irq_enable();
    3078:	78 94       	sei
    307a:	c8 cf       	rjmp	.-112    	; 0x300c <__stack+0xd>
    307c:	88 81       	ld	r24, Y

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	e0 50       	subi	r30, 0x00	; 0
    3082:	f0 4e       	sbci	r31, 0xE0	; 224
    3084:	81 7f       	andi	r24, 0xF1	; 241
    3086:	90 81       	ld	r25, Z
    3088:	89 2b       	or	r24, r25
    308a:	88 83       	st	Y, r24
	sleep_enable();
    308c:	88 81       	ld	r24, Y
    308e:	81 60       	ori	r24, 0x01	; 1
    3090:	88 83       	st	Y, r24

	cpu_irq_enable();
    3092:	78 94       	sei
	sleep_enter();
    3094:	88 95       	sleep

	sleep_disable();
    3096:	88 81       	ld	r24, Y
    3098:	8e 7f       	andi	r24, 0xFE	; 254
    309a:	88 83       	st	Y, r24
    309c:	b7 cf       	rjmp	.-146    	; 0x300c <__stack+0xd>

0000309e <main_suspend_action>:
	}
}

void main_suspend_action(void)
{
	ui_powerdown();
    309e:	0c 94 89 01 	jmp	0x312	; 0x312 <ui_powerdown>
    30a2:	08 95       	ret

000030a4 <main_resume_action>:
}

void main_resume_action(void)
{
	ui_wakeup();
    30a4:	0c 94 94 01 	jmp	0x328	; 0x328 <ui_wakeup>
    30a8:	08 95       	ret

000030aa <main_sof_action>:
}

void main_sof_action(void)
{
	if (!main_b_msc_enable)
    30aa:	80 91 79 24 	lds	r24, 0x2479	; 0x802479 <main_b_msc_enable>
    30ae:	88 23       	and	r24, r24
    30b0:	19 f0       	breq	.+6      	; 0x30b8 <main_sof_action+0xe>
		return;
	ui_process(udd_get_frame_number());
    30b2:	7c db       	rcall	.-2312   	; 0x27ac <udd_get_frame_number>
    30b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <ui_process>
    30b8:	08 95       	ret

000030ba <main_msc_enable>:
}

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	80 93 79 24 	sts	0x2479, r24	; 0x802479 <main_b_msc_enable>
	return true;
}
    30c0:	08 95       	ret

000030c2 <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
    30c2:	10 92 79 24 	sts	0x2479, r1	; 0x802479 <main_b_msc_enable>
    30c6:	08 95       	ret

000030c8 <memories_initialization>:
void memories_initialization(void)
{
#if (defined AT45DBX_MEM) && (AT45DBX_MEM == ENABLE)
	// sysclk_enable_peripheral_clock(AT45DBX_SPI_MODULE);
	// is already done by XMEGA SPI driver
	at45dbx_init();
    30c8:	0c 94 43 02 	jmp	0x486	; 0x486 <at45dbx_init>
    30cc:	08 95       	ret

000030ce <__udivmodhi4>:
    30ce:	aa 1b       	sub	r26, r26
    30d0:	bb 1b       	sub	r27, r27
    30d2:	51 e1       	ldi	r21, 0x11	; 17
    30d4:	07 c0       	rjmp	.+14     	; 0x30e4 <__udivmodhi4_ep>

000030d6 <__udivmodhi4_loop>:
    30d6:	aa 1f       	adc	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	a6 17       	cp	r26, r22
    30dc:	b7 07       	cpc	r27, r23
    30de:	10 f0       	brcs	.+4      	; 0x30e4 <__udivmodhi4_ep>
    30e0:	a6 1b       	sub	r26, r22
    30e2:	b7 0b       	sbc	r27, r23

000030e4 <__udivmodhi4_ep>:
    30e4:	88 1f       	adc	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	5a 95       	dec	r21
    30ea:	a9 f7       	brne	.-22     	; 0x30d6 <__udivmodhi4_loop>
    30ec:	80 95       	com	r24
    30ee:	90 95       	com	r25
    30f0:	bc 01       	movw	r22, r24
    30f2:	cd 01       	movw	r24, r26
    30f4:	08 95       	ret

000030f6 <__udivmodsi4>:
    30f6:	a1 e2       	ldi	r26, 0x21	; 33
    30f8:	1a 2e       	mov	r1, r26
    30fa:	aa 1b       	sub	r26, r26
    30fc:	bb 1b       	sub	r27, r27
    30fe:	fd 01       	movw	r30, r26
    3100:	0d c0       	rjmp	.+26     	; 0x311c <__udivmodsi4_ep>

00003102 <__udivmodsi4_loop>:
    3102:	aa 1f       	adc	r26, r26
    3104:	bb 1f       	adc	r27, r27
    3106:	ee 1f       	adc	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	a2 17       	cp	r26, r18
    310c:	b3 07       	cpc	r27, r19
    310e:	e4 07       	cpc	r30, r20
    3110:	f5 07       	cpc	r31, r21
    3112:	20 f0       	brcs	.+8      	; 0x311c <__udivmodsi4_ep>
    3114:	a2 1b       	sub	r26, r18
    3116:	b3 0b       	sbc	r27, r19
    3118:	e4 0b       	sbc	r30, r20
    311a:	f5 0b       	sbc	r31, r21

0000311c <__udivmodsi4_ep>:
    311c:	66 1f       	adc	r22, r22
    311e:	77 1f       	adc	r23, r23
    3120:	88 1f       	adc	r24, r24
    3122:	99 1f       	adc	r25, r25
    3124:	1a 94       	dec	r1
    3126:	69 f7       	brne	.-38     	; 0x3102 <__udivmodsi4_loop>
    3128:	60 95       	com	r22
    312a:	70 95       	com	r23
    312c:	80 95       	com	r24
    312e:	90 95       	com	r25
    3130:	9b 01       	movw	r18, r22
    3132:	ac 01       	movw	r20, r24
    3134:	bd 01       	movw	r22, r26
    3136:	cf 01       	movw	r24, r30
    3138:	08 95       	ret

0000313a <__tablejump2__>:
    313a:	ee 0f       	add	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	05 90       	lpm	r0, Z+
    3140:	f4 91       	lpm	r31, Z
    3142:	e0 2d       	mov	r30, r0
    3144:	09 94       	ijmp

00003146 <__umulhisi3>:
    3146:	a2 9f       	mul	r26, r18
    3148:	b0 01       	movw	r22, r0
    314a:	b3 9f       	mul	r27, r19
    314c:	c0 01       	movw	r24, r0
    314e:	a3 9f       	mul	r26, r19
    3150:	70 0d       	add	r23, r0
    3152:	81 1d       	adc	r24, r1
    3154:	11 24       	eor	r1, r1
    3156:	91 1d       	adc	r25, r1
    3158:	b2 9f       	mul	r27, r18
    315a:	70 0d       	add	r23, r0
    315c:	81 1d       	adc	r24, r1
    315e:	11 24       	eor	r1, r1
    3160:	91 1d       	adc	r25, r1
    3162:	08 95       	ret

00003164 <memcpy>:
    3164:	fb 01       	movw	r30, r22
    3166:	dc 01       	movw	r26, r24
    3168:	02 c0       	rjmp	.+4      	; 0x316e <memcpy+0xa>
    316a:	01 90       	ld	r0, Z+
    316c:	0d 92       	st	X+, r0
    316e:	41 50       	subi	r20, 0x01	; 1
    3170:	50 40       	sbci	r21, 0x00	; 0
    3172:	d8 f7       	brcc	.-10     	; 0x316a <memcpy+0x6>
    3174:	08 95       	ret

00003176 <_exit>:
    3176:	f8 94       	cli

00003178 <__stop_program>:
    3178:	ff cf       	rjmp	.-2      	; 0x3178 <__stop_program>
