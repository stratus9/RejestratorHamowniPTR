
ALL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00802000  00001cba  00001d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000041  00802200  00802200  00001f4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000084d8  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003559  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003829  00000000  00000000  0000dcd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dc8  00000000  00000000  00011504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002b0b1  00000000  00000000  000122cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000275b  00000000  00000000  0003d37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0003fad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009baf  00000000  00000000  0003fd40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7e c1       	rjmp	.+764    	; 0x2fe <__ctors_end>
       2:	00 00       	nop
       4:	98 c1       	rjmp	.+816    	; 0x336 <__bad_interrupt>
       6:	00 00       	nop
       8:	96 c1       	rjmp	.+812    	; 0x336 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c1       	rjmp	.+808    	; 0x336 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c1       	rjmp	.+804    	; 0x336 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c1       	rjmp	.+800    	; 0x336 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c1       	rjmp	.+796    	; 0x336 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c1       	rjmp	.+792    	; 0x336 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c1       	rjmp	.+788    	; 0x336 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c1       	rjmp	.+784    	; 0x336 <__bad_interrupt>
      26:	00 00       	nop
      28:	86 c1       	rjmp	.+780    	; 0x336 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	84 c1       	rjmp	.+776    	; 0x336 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c1       	rjmp	.+772    	; 0x336 <__bad_interrupt>
      32:	00 00       	nop
      34:	18 c2       	rjmp	.+1072   	; 0x466 <__vector_13>
      36:	00 00       	nop
      38:	b9 c4       	rjmp	.+2418   	; 0x9ac <__vector_14>
      3a:	00 00       	nop
      3c:	e0 c4       	rjmp	.+2496   	; 0x9fe <__vector_15>
      3e:	00 00       	nop
      40:	07 c5       	rjmp	.+2574   	; 0xa50 <__vector_16>
      42:	00 00       	nop
      44:	2e c5       	rjmp	.+2652   	; 0xaa2 <__vector_17>
      46:	00 00       	nop
      48:	55 c5       	rjmp	.+2730   	; 0xaf4 <__vector_18>
      4a:	00 00       	nop
      4c:	7c c5       	rjmp	.+2808   	; 0xb46 <__vector_19>
      4e:	00 00       	nop
      50:	a3 c5       	rjmp	.+2886   	; 0xb98 <__vector_20>
      52:	00 00       	nop
      54:	ca c5       	rjmp	.+2964   	; 0xbea <__vector_21>
      56:	00 00       	nop
      58:	f1 c5       	rjmp	.+3042   	; 0xc3c <__vector_22>
      5a:	00 00       	nop
      5c:	18 c6       	rjmp	.+3120   	; 0xc8e <__vector_23>
      5e:	00 00       	nop
      60:	6a c1       	rjmp	.+724    	; 0x336 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c1       	rjmp	.+720    	; 0x336 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c1       	rjmp	.+716    	; 0x336 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c1       	rjmp	.+712    	; 0x336 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c1       	rjmp	.+708    	; 0x336 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c1       	rjmp	.+704    	; 0x336 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c1       	rjmp	.+700    	; 0x336 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c1       	rjmp	.+696    	; 0x336 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c1       	rjmp	.+692    	; 0x336 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c1       	rjmp	.+688    	; 0x336 <__bad_interrupt>
      86:	00 00       	nop
      88:	56 c1       	rjmp	.+684    	; 0x336 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	54 c1       	rjmp	.+680    	; 0x336 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c1       	rjmp	.+676    	; 0x336 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c1       	rjmp	.+672    	; 0x336 <__bad_interrupt>
      96:	00 00       	nop
      98:	4e c1       	rjmp	.+668    	; 0x336 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4c c1       	rjmp	.+664    	; 0x336 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4a c1       	rjmp	.+660    	; 0x336 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	48 c1       	rjmp	.+656    	; 0x336 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	46 c1       	rjmp	.+652    	; 0x336 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	44 c1       	rjmp	.+648    	; 0x336 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	42 c1       	rjmp	.+644    	; 0x336 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	40 c1       	rjmp	.+640    	; 0x336 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f9 c1       	rjmp	.+1010   	; 0x4ac <__vector_46>
      ba:	00 00       	nop
      bc:	ab c7       	rjmp	.+3926   	; 0x1014 <__vector_47>
      be:	00 00       	nop
      c0:	d2 c7       	rjmp	.+4004   	; 0x1066 <__vector_48>
      c2:	00 00       	nop
      c4:	f9 c7       	rjmp	.+4082   	; 0x10b8 <__vector_49>
      c6:	00 00       	nop
      c8:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_50>
      cc:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_51>
      d0:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__vector_52>
      d4:	30 c1       	rjmp	.+608    	; 0x336 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2e c1       	rjmp	.+604    	; 0x336 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2c c1       	rjmp	.+600    	; 0x336 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2a c1       	rjmp	.+596    	; 0x336 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	28 c1       	rjmp	.+592    	; 0x336 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	26 c1       	rjmp	.+588    	; 0x336 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	24 c1       	rjmp	.+584    	; 0x336 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	22 c1       	rjmp	.+580    	; 0x336 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	20 c1       	rjmp	.+576    	; 0x336 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1e c1       	rjmp	.+572    	; 0x336 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1c c1       	rjmp	.+568    	; 0x336 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1a c1       	rjmp	.+564    	; 0x336 <__bad_interrupt>
     102:	00 00       	nop
     104:	18 c1       	rjmp	.+560    	; 0x336 <__bad_interrupt>
     106:	00 00       	nop
     108:	16 c1       	rjmp	.+556    	; 0x336 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	14 c1       	rjmp	.+552    	; 0x336 <__bad_interrupt>
     10e:	00 00       	nop
     110:	12 c1       	rjmp	.+548    	; 0x336 <__bad_interrupt>
     112:	00 00       	nop
     114:	10 c1       	rjmp	.+544    	; 0x336 <__bad_interrupt>
     116:	00 00       	nop
     118:	0e c1       	rjmp	.+540    	; 0x336 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c c1       	rjmp	.+536    	; 0x336 <__bad_interrupt>
     11e:	00 00       	nop
     120:	0a c1       	rjmp	.+532    	; 0x336 <__bad_interrupt>
     122:	00 00       	nop
     124:	08 c1       	rjmp	.+528    	; 0x336 <__bad_interrupt>
     126:	00 00       	nop
     128:	06 c1       	rjmp	.+524    	; 0x336 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	04 c1       	rjmp	.+520    	; 0x336 <__bad_interrupt>
     12e:	00 00       	nop
     130:	02 c1       	rjmp	.+516    	; 0x336 <__bad_interrupt>
     132:	00 00       	nop
     134:	d5 c5       	rjmp	.+2986   	; 0xce0 <__vector_77>
     136:	00 00       	nop
     138:	fc c5       	rjmp	.+3064   	; 0xd32 <__vector_78>
     13a:	00 00       	nop
     13c:	23 c6       	rjmp	.+3142   	; 0xd84 <__vector_79>
     13e:	00 00       	nop
     140:	4a c6       	rjmp	.+3220   	; 0xdd6 <__vector_80>
     142:	00 00       	nop
     144:	71 c6       	rjmp	.+3298   	; 0xe28 <__vector_81>
     146:	00 00       	nop
     148:	98 c6       	rjmp	.+3376   	; 0xe7a <__vector_82>
     14a:	00 00       	nop
     14c:	bf c6       	rjmp	.+3454   	; 0xecc <__vector_83>
     14e:	00 00       	nop
     150:	e6 c6       	rjmp	.+3532   	; 0xf1e <__vector_84>
     152:	00 00       	nop
     154:	0d c7       	rjmp	.+3610   	; 0xf70 <__vector_85>
     156:	00 00       	nop
     158:	34 c7       	rjmp	.+3688   	; 0xfc2 <__vector_86>
     15a:	00 00       	nop
     15c:	ec c0       	rjmp	.+472    	; 0x336 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ea c0       	rjmp	.+468    	; 0x336 <__bad_interrupt>
     162:	00 00       	nop
     164:	e8 c0       	rjmp	.+464    	; 0x336 <__bad_interrupt>
     166:	00 00       	nop
     168:	e6 c0       	rjmp	.+460    	; 0x336 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e4 c0       	rjmp	.+456    	; 0x336 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e2 c0       	rjmp	.+452    	; 0x336 <__bad_interrupt>
     172:	00 00       	nop
     174:	e0 c0       	rjmp	.+448    	; 0x336 <__bad_interrupt>
     176:	00 00       	nop
     178:	de c0       	rjmp	.+444    	; 0x336 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	dc c0       	rjmp	.+440    	; 0x336 <__bad_interrupt>
     17e:	00 00       	nop
     180:	da c0       	rjmp	.+436    	; 0x336 <__bad_interrupt>
     182:	00 00       	nop
     184:	d8 c0       	rjmp	.+432    	; 0x336 <__bad_interrupt>
     186:	00 00       	nop
     188:	d6 c0       	rjmp	.+428    	; 0x336 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d4 c0       	rjmp	.+424    	; 0x336 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d2 c0       	rjmp	.+420    	; 0x336 <__bad_interrupt>
     192:	00 00       	nop
     194:	d0 c0       	rjmp	.+416    	; 0x336 <__bad_interrupt>
     196:	00 00       	nop
     198:	ce c0       	rjmp	.+412    	; 0x336 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cc c0       	rjmp	.+408    	; 0x336 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ca c0       	rjmp	.+404    	; 0x336 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c8 c0       	rjmp	.+400    	; 0x336 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c6 c0       	rjmp	.+396    	; 0x336 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c4 c0       	rjmp	.+392    	; 0x336 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c2 c0       	rjmp	.+388    	; 0x336 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c0 c0       	rjmp	.+384    	; 0x336 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	be c0       	rjmp	.+380    	; 0x336 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bc c0       	rjmp	.+376    	; 0x336 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ba c0       	rjmp	.+372    	; 0x336 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b8 c0       	rjmp	.+368    	; 0x336 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b6 c0       	rjmp	.+364    	; 0x336 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b4 c0       	rjmp	.+360    	; 0x336 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b2 c0       	rjmp	.+356    	; 0x336 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b0 c0       	rjmp	.+352    	; 0x336 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ae c0       	rjmp	.+348    	; 0x336 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ac c0       	rjmp	.+344    	; 0x336 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	aa c0       	rjmp	.+340    	; 0x336 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a8 c0       	rjmp	.+336    	; 0x336 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a6 c0       	rjmp	.+332    	; 0x336 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a4 c0       	rjmp	.+328    	; 0x336 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a2 c0       	rjmp	.+324    	; 0x336 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a0 c0       	rjmp	.+320    	; 0x336 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9e c0       	rjmp	.+316    	; 0x336 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	6e 61       	ori	r22, 0x1E	; 30
     1fe:	6e 00       	.word	0x006e	; ????

00000200 <__c.2240>:
     200:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     210:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     220:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     230:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     240:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     250:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     260:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     270:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     280:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     290:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	cd bf       	out	0x3d, r28	; 61
     306:	df e2       	ldi	r29, 0x2F	; 47
     308:	de bf       	out	0x3e, r29	; 62

0000030a <__do_copy_data>:
     30a:	12 e2       	ldi	r17, 0x22	; 34
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	b0 e2       	ldi	r27, 0x20	; 32
     310:	ea eb       	ldi	r30, 0xBA	; 186
     312:	fc e1       	ldi	r31, 0x1C	; 28
     314:	02 c0       	rjmp	.+4      	; 0x31a <__do_copy_data+0x10>
     316:	05 90       	lpm	r0, Z+
     318:	0d 92       	st	X+, r0
     31a:	a0 30       	cpi	r26, 0x00	; 0
     31c:	b1 07       	cpc	r27, r17
     31e:	d9 f7       	brne	.-10     	; 0x316 <__do_copy_data+0xc>

00000320 <__do_clear_bss>:
     320:	22 e2       	ldi	r18, 0x22	; 34
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b2 e2       	ldi	r27, 0x22	; 34
     326:	01 c0       	rjmp	.+2      	; 0x32a <.do_clear_bss_start>

00000328 <.do_clear_bss_loop>:
     328:	1d 92       	st	X+, r1

0000032a <.do_clear_bss_start>:
     32a:	a1 34       	cpi	r26, 0x41	; 65
     32c:	b2 07       	cpc	r27, r18
     32e:	e1 f7       	brne	.-8      	; 0x328 <.do_clear_bss_loop>
     330:	67 d7       	rcall	.+3790   	; 0x1200 <main>
     332:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <_exit>

00000336 <__bad_interrupt>:
     336:	64 ce       	rjmp	.-824    	; 0x0 <__vectors>

00000338 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     33c:	e0 91 00 22 	lds	r30, 0x2200	; 0x802200 <__data_end>
     340:	f0 91 01 22 	lds	r31, 0x2201	; 0x802201 <__data_end+0x1>
     344:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     346:	83 ff       	sbrs	r24, 3
     348:	08 c0       	rjmp	.+16     	; 0x35a <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     34a:	88 60       	ori	r24, 0x08	; 8
     34c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     34e:	83 e0       	ldi	r24, 0x03	; 3
     350:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     352:	86 ef       	ldi	r24, 0xF6	; 246
     354:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <__data_end+0xa>
     358:	83 c0       	rjmp	.+262    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     35a:	98 2f       	mov	r25, r24
     35c:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     35e:	31 f0       	breq	.+12     	; 0x36c <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     360:	83 e0       	ldi	r24, 0x03	; 3
     362:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <__data_end+0xa>
     36a:	7a c0       	rjmp	.+244    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     36c:	86 ff       	sbrs	r24, 6
     36e:	43 c0       	rjmp	.+134    	; 0x3f6 <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     370:	c0 e0       	ldi	r28, 0x00	; 0
     372:	d2 e2       	ldi	r29, 0x22	; 34
     374:	aa 81       	ldd	r26, Y+2	; 0x02
     376:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     378:	8c 81       	ldd	r24, Y+4	; 0x04
     37a:	9d 81       	ldd	r25, Y+5	; 0x05
     37c:	14 96       	adiw	r26, 0x04	; 4
     37e:	2d 91       	ld	r18, X+
     380:	3c 91       	ld	r19, X
     382:	15 97       	sbiw	r26, 0x05	; 5
     384:	82 17       	cp	r24, r18
     386:	93 07       	cpc	r25, r19
     388:	6c f4       	brge	.+26     	; 0x3a4 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     38a:	9c 01       	movw	r18, r24
     38c:	2f 5f       	subi	r18, 0xFF	; 255
     38e:	3f 4f       	sbci	r19, 0xFF	; 255
     390:	20 93 04 22 	sts	0x2204, r18	; 0x802204 <__data_end+0x4>
     394:	30 93 05 22 	sts	0x2205, r19	; 0x802205 <__data_end+0x5>
     398:	a8 0f       	add	r26, r24
     39a:	b9 1f       	adc	r27, r25
     39c:	11 96       	adiw	r26, 0x01	; 1
     39e:	8c 91       	ld	r24, X
     3a0:	87 83       	std	Z+7, r24	; 0x07
     3a2:	5e c0       	rjmp	.+188    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

	} else if (transfer.data_count < pkg->length) {
     3a4:	80 91 06 22 	lds	r24, 0x2206	; 0x802206 <__data_end+0x6>
     3a8:	90 91 07 22 	lds	r25, 0x2207	; 0x802207 <__data_end+0x7>
     3ac:	18 96       	adiw	r26, 0x08	; 8
     3ae:	2d 91       	ld	r18, X+
     3b0:	3c 91       	ld	r19, X
     3b2:	19 97       	sbiw	r26, 0x09	; 9
     3b4:	82 17       	cp	r24, r18
     3b6:	93 07       	cpc	r25, r19
     3b8:	c8 f4       	brcc	.+50     	; 0x3ec <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     3ba:	20 91 08 22 	lds	r18, 0x2208	; 0x802208 <__data_end+0x8>
     3be:	22 23       	and	r18, r18
     3c0:	21 f0       	breq	.+8      	; 0x3ca <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     3c2:	86 81       	ldd	r24, Z+6	; 0x06
     3c4:	81 60       	ori	r24, 0x01	; 1
     3c6:	86 83       	std	Z+6, r24	; 0x06
     3c8:	4b c0       	rjmp	.+150    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

		} else {
			const uint8_t * const data = pkg->buffer;
     3ca:	16 96       	adiw	r26, 0x06	; 6
     3cc:	2d 91       	ld	r18, X+
     3ce:	3c 91       	ld	r19, X
     3d0:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     3d2:	ac 01       	movw	r20, r24
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	40 93 06 22 	sts	0x2206, r20	; 0x802206 <__data_end+0x6>
     3dc:	50 93 07 22 	sts	0x2207, r21	; 0x802207 <__data_end+0x7>
     3e0:	d9 01       	movw	r26, r18
     3e2:	a8 0f       	add	r26, r24
     3e4:	b9 1f       	adc	r27, r25
     3e6:	8c 91       	ld	r24, X
     3e8:	87 83       	std	Z+7, r24	; 0x07
     3ea:	3a c0       	rjmp	.+116    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     3f0:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <__data_end+0xa>
     3f4:	35 c0       	rjmp	.+106    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     3f6:	88 23       	and	r24, r24
     3f8:	84 f5       	brge	.+96     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b2 e2       	ldi	r27, 0x22	; 34
     3fe:	12 96       	adiw	r26, 0x02	; 2
     400:	cd 91       	ld	r28, X+
     402:	dc 91       	ld	r29, X
     404:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     406:	16 96       	adiw	r26, 0x06	; 6
     408:	8d 91       	ld	r24, X+
     40a:	9c 91       	ld	r25, X
     40c:	17 97       	sbiw	r26, 0x07	; 7
     40e:	28 85       	ldd	r18, Y+8	; 0x08
     410:	39 85       	ldd	r19, Y+9	; 0x09
     412:	82 17       	cp	r24, r18
     414:	93 07       	cpc	r25, r19
     416:	d8 f4       	brcc	.+54     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

		uint8_t * const data = pkg->buffer;
     418:	6e 81       	ldd	r22, Y+6	; 0x06
     41a:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     41c:	9c 01       	movw	r18, r24
     41e:	2f 5f       	subi	r18, 0xFF	; 255
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	20 93 06 22 	sts	0x2206, r18	; 0x802206 <__data_end+0x6>
     426:	30 93 07 22 	sts	0x2207, r19	; 0x802207 <__data_end+0x7>
     42a:	47 81       	ldd	r20, Z+7	; 0x07
     42c:	db 01       	movw	r26, r22
     42e:	a8 0f       	add	r26, r24
     430:	b9 1f       	adc	r27, r25
     432:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     434:	88 85       	ldd	r24, Y+8	; 0x08
     436:	99 85       	ldd	r25, Y+9	; 0x09
     438:	28 17       	cp	r18, r24
     43a:	39 07       	cpc	r19, r25
     43c:	18 f4       	brcc	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	83 83       	std	Z+3, r24	; 0x03
     442:	0e c0       	rjmp	.+28     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     444:	87 e0       	ldi	r24, 0x07	; 7
     446:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     448:	10 92 0a 22 	sts	0x220A, r1	; 0x80220a <__data_end+0xa>
     44c:	09 c0       	rjmp	.+18     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     452:	89 ef       	ldi	r24, 0xF9	; 249
     454:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <__data_end+0xa>
     458:	03 c0       	rjmp	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     45a:	8b ef       	ldi	r24, 0xFB	; 251
     45c:	80 93 0a 22 	sts	0x220A, r24	; 0x80220a <__data_end+0xa>
	}
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	08 95       	ret

00000466 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	2f 93       	push	r18
     472:	3f 93       	push	r19
     474:	4f 93       	push	r20
     476:	5f 93       	push	r21
     478:	6f 93       	push	r22
     47a:	7f 93       	push	r23
     47c:	8f 93       	push	r24
     47e:	9f 93       	push	r25
     480:	af 93       	push	r26
     482:	bf 93       	push	r27
     484:	ef 93       	push	r30
     486:	ff 93       	push	r31
     488:	57 df       	rcall	.-338    	; 0x338 <twim_interrupt_handler>
     48a:	ff 91       	pop	r31
     48c:	ef 91       	pop	r30
     48e:	bf 91       	pop	r27
     490:	af 91       	pop	r26
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	7f 91       	pop	r23
     498:	6f 91       	pop	r22
     49a:	5f 91       	pop	r21
     49c:	4f 91       	pop	r20
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <__vector_46>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
     4ce:	34 df       	rcall	.-408    	; 0x338 <twim_interrupt_handler>
     4d0:	ff 91       	pop	r31
     4d2:	ef 91       	pop	r30
     4d4:	bf 91       	pop	r27
     4d6:	af 91       	pop	r26
     4d8:	9f 91       	pop	r25
     4da:	8f 91       	pop	r24
     4dc:	7f 91       	pop	r23
     4de:	6f 91       	pop	r22
     4e0:	5f 91       	pop	r21
     4e2:	4f 91       	pop	r20
     4e4:	3f 91       	pop	r19
     4e6:	2f 91       	pop	r18
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     4f2:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     4f4:	db 01       	movw	r26, r22
     4f6:	14 96       	adiw	r26, 0x04	; 4
     4f8:	8c 91       	ld	r24, X
     4fa:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     4fc:	88 eb       	ldi	r24, 0xB8	; 184
     4fe:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     504:	e0 e0       	ldi	r30, 0x00	; 0
     506:	f2 e2       	ldi	r31, 0x22	; 34
     508:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     50a:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     50c:	e0 ea       	ldi	r30, 0xA0	; 160
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	82 81       	ldd	r24, Z+2	; 0x02
     512:	82 60       	ori	r24, 0x02	; 2
     514:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     516:	78 94       	sei

	return STATUS_OK;
}
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	08 95       	ret

0000051c <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	1f 92       	push	r1
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     528:	89 2b       	or	r24, r25
     52a:	09 f4       	brne	.+2      	; 0x52e <twi_master_transfer+0x12>
     52c:	4b c0       	rjmp	.+150    	; 0x5c4 <twi_master_transfer+0xa8>
     52e:	61 15       	cp	r22, r1
     530:	71 05       	cpc	r23, r1
     532:	09 f4       	brne	.+2      	; 0x536 <twi_master_transfer+0x1a>
     534:	49 c0       	rjmp	.+146    	; 0x5c8 <twi_master_transfer+0xac>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     536:	fb 01       	movw	r30, r22
     538:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     53a:	80 91 09 22 	lds	r24, 0x2209	; 0x802209 <__data_end+0x9>
     53e:	88 23       	and	r24, r24
     540:	19 f0       	breq	.+6      	; 0x548 <twi_master_transfer+0x2c>

		if (no_wait) { return ERR_BUSY; }
     542:	99 23       	and	r25, r25
     544:	f1 f3       	breq	.-4      	; 0x542 <twi_master_transfer+0x26>
     546:	42 c0       	rjmp	.+132    	; 0x5cc <twi_master_transfer+0xb0>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     548:	8f b7       	in	r24, 0x3f	; 63
     54a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     54c:	f8 94       	cli
	return flags;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     550:	e0 e0       	ldi	r30, 0x00	; 0
     552:	f2 e2       	ldi	r31, 0x22	; 34
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
     558:	90 e8       	ldi	r25, 0x80	; 128
     55a:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     55c:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     55e:	a0 83       	st	Z, r26
     560:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
     562:	62 83       	std	Z+2, r22	; 0x02
     564:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
     566:	14 82       	std	Z+4, r1	; 0x04
     568:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
     56a:	16 82       	std	Z+6, r1	; 0x06
     56c:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
     56e:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
     570:	fb 01       	movw	r30, r22
     572:	80 81       	ld	r24, Z
     574:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     576:	24 81       	ldd	r18, Z+4	; 0x04
     578:	35 81       	ldd	r19, Z+5	; 0x05
     57a:	23 2b       	or	r18, r19
     57c:	11 f4       	brne	.+4      	; 0x582 <twi_master_transfer+0x66>
     57e:	41 11       	cpse	r20, r1
     580:	03 c0       	rjmp	.+6      	; 0x588 <twi_master_transfer+0x6c>
			transfer.bus->MASTER.ADDR = chip;
     582:	16 96       	adiw	r26, 0x06	; 6
     584:	8c 93       	st	X, r24
     586:	03 c0       	rjmp	.+6      	; 0x58e <twi_master_transfer+0x72>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     588:	81 60       	ori	r24, 0x01	; 1
     58a:	16 96       	adiw	r26, 0x06	; 6
     58c:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     58e:	e0 e0       	ldi	r30, 0x00	; 0
     590:	f2 e2       	ldi	r31, 0x22	; 34
     592:	82 85       	ldd	r24, Z+10	; 0x0a
     594:	80 38       	cpi	r24, 0x80	; 128
     596:	e9 f3       	breq	.-6      	; 0x592 <twi_master_transfer+0x76>

	while (! twim_idle(transfer.bus)) { barrier(); }
     598:	e0 91 00 22 	lds	r30, 0x2200	; 0x802200 <__data_end>
     59c:	f0 91 01 22 	lds	r31, 0x2201	; 0x802201 <__data_end+0x1>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     5a0:	84 81       	ldd	r24, Z+4	; 0x04
     5a2:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	49 f0       	breq	.+18     	; 0x5ba <twi_master_transfer+0x9e>
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b2 e2       	ldi	r27, 0x22	; 34
     5ac:	ed 91       	ld	r30, X+
     5ae:	fc 91       	ld	r31, X
     5b0:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     5b2:	84 81       	ldd	r24, Z+4	; 0x04
     5b4:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	c9 f7       	brne	.-14     	; 0x5ac <twi_master_transfer+0x90>

	status_code_t const status = transfer.status;
     5ba:	e0 e0       	ldi	r30, 0x00	; 0
     5bc:	f2 e2       	ldi	r31, 0x22	; 34
     5be:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     5c0:	11 86       	std	Z+9, r1	; 0x09
     5c2:	05 c0       	rjmp	.+10     	; 0x5ce <twi_master_transfer+0xb2>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     5c4:	88 ef       	ldi	r24, 0xF8	; 248
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <twi_master_transfer+0xb2>
     5c8:	88 ef       	ldi	r24, 0xF8	; 248
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <twi_master_transfer+0xb2>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     5cc:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     5ce:	0f 90       	pop	r0
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <LCDcommand>:
	//UP
	LCDgoto(3,83);
	LCDchar(129);
	//DOWN
	LCDgoto(3,115);
	LCDchar(128);
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	2b 97       	sbiw	r28, 0x0b	; 11
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	fe 01       	movw	r30, r28
     5e6:	31 96       	adiw	r30, 0x01	; 1
     5e8:	9b e0       	ldi	r25, 0x0B	; 11
     5ea:	df 01       	movw	r26, r30
     5ec:	1d 92       	st	X+, r1
     5ee:	9a 95       	dec	r25
     5f0:	e9 f7       	brne	.-6      	; 0x5ec <LCDcommand+0x16>
     5f2:	9c e3       	ldi	r25, 0x3C	; 60
     5f4:	99 83       	std	Y+1, r25	; 0x01
     5f6:	8a 83       	std	Y+2, r24	; 0x02
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	8d 83       	std	Y+5, r24	; 0x05
     5fe:	9e 83       	std	Y+6, r25	; 0x06
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	be 01       	movw	r22, r28
     604:	6f 5f       	subi	r22, 0xFF	; 255
     606:	7f 4f       	sbci	r23, 0xFF	; 255
     608:	80 e8       	ldi	r24, 0x80	; 128
     60a:	94 e0       	ldi	r25, 0x04	; 4
     60c:	87 df       	rcall	.-242    	; 0x51c <twi_master_transfer>
     60e:	81 11       	cpse	r24, r1
     610:	f7 cf       	rjmp	.-18     	; 0x600 <LCDcommand+0x2a>
     612:	2b 96       	adiw	r28, 0x0b	; 11
     614:	cd bf       	out	0x3d, r28	; 61
     616:	de bf       	out	0x3e, r29	; 62
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <LCDcommand2>:
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	2b 97       	sbiw	r28, 0x0b	; 11
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	fe 01       	movw	r30, r28
     62e:	31 96       	adiw	r30, 0x01	; 1
     630:	9b e0       	ldi	r25, 0x0B	; 11
     632:	df 01       	movw	r26, r30
     634:	1d 92       	st	X+, r1
     636:	9a 95       	dec	r25
     638:	e9 f7       	brne	.-6      	; 0x634 <LCDcommand2+0x16>
     63a:	9c e3       	ldi	r25, 0x3C	; 60
     63c:	99 83       	std	Y+1, r25	; 0x01
     63e:	8a 83       	std	Y+2, r24	; 0x02
     640:	6b 83       	std	Y+3, r22	; 0x03
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	8d 83       	std	Y+5, r24	; 0x05
     648:	9e 83       	std	Y+6, r25	; 0x06
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	be 01       	movw	r22, r28
     64e:	6f 5f       	subi	r22, 0xFF	; 255
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	80 e8       	ldi	r24, 0x80	; 128
     654:	94 e0       	ldi	r25, 0x04	; 4
     656:	62 df       	rcall	.-316    	; 0x51c <twi_master_transfer>
     658:	81 11       	cpse	r24, r1
     65a:	f7 cf       	rjmp	.-18     	; 0x64a <LCDcommand2+0x2c>
     65c:	2b 96       	adiw	r28, 0x0b	; 11
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	de bf       	out	0x3e, r29	; 62
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <LCDdata>:
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	2b 97       	sbiw	r28, 0x0b	; 11
     672:	cd bf       	out	0x3d, r28	; 61
     674:	de bf       	out	0x3e, r29	; 62
     676:	fe 01       	movw	r30, r28
     678:	31 96       	adiw	r30, 0x01	; 1
     67a:	9b e0       	ldi	r25, 0x0B	; 11
     67c:	df 01       	movw	r26, r30
     67e:	1d 92       	st	X+, r1
     680:	9a 95       	dec	r25
     682:	e9 f7       	brne	.-6      	; 0x67e <LCDdata+0x16>
     684:	9d e3       	ldi	r25, 0x3D	; 61
     686:	99 83       	std	Y+1, r25	; 0x01
     688:	8a 83       	std	Y+2, r24	; 0x02
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	8d 83       	std	Y+5, r24	; 0x05
     690:	9e 83       	std	Y+6, r25	; 0x06
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	be 01       	movw	r22, r28
     696:	6f 5f       	subi	r22, 0xFF	; 255
     698:	7f 4f       	sbci	r23, 0xFF	; 255
     69a:	80 e8       	ldi	r24, 0x80	; 128
     69c:	94 e0       	ldi	r25, 0x04	; 4
     69e:	3e df       	rcall	.-388    	; 0x51c <twi_master_transfer>
     6a0:	81 11       	cpse	r24, r1
     6a2:	f7 cf       	rjmp	.-18     	; 0x692 <LCDdata+0x2a>
     6a4:	2b 96       	adiw	r28, 0x0b	; 11
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <LCDgoto>:
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	d8 2f       	mov	r29, r24
     6b6:	c6 2f       	mov	r28, r22
     6b8:	98 2f       	mov	r25, r24
     6ba:	90 95       	com	r25
     6bc:	89 2f       	mov	r24, r25
     6be:	83 70       	andi	r24, 0x03	; 3
     6c0:	80 6b       	ori	r24, 0xB0	; 176
     6c2:	89 df       	rcall	.-238    	; 0x5d6 <LCDcommand>
     6c4:	8c 2f       	mov	r24, r28
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	86 df       	rcall	.-244    	; 0x5d6 <LCDcommand>
     6ca:	8c 2f       	mov	r24, r28
     6cc:	82 95       	swap	r24
     6ce:	8f 70       	andi	r24, 0x0F	; 15
     6d0:	80 61       	ori	r24, 0x10	; 16
     6d2:	81 df       	rcall	.-254    	; 0x5d6 <LCDcommand>
     6d4:	d0 93 40 22 	sts	0x2240, r29	; 0x802240 <p_row>
     6d8:	c0 93 3f 22 	sts	0x223F, r28	; 0x80223f <p_col>
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <LCDclear>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
     6e8:	60 e0       	ldi	r22, 0x00	; 0
     6ea:	8d 2f       	mov	r24, r29
     6ec:	e1 df       	rcall	.-62     	; 0x6b0 <LCDgoto>
     6ee:	c0 e0       	ldi	r28, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	ba df       	rcall	.-140    	; 0x668 <LCDdata>
     6f4:	cf 5f       	subi	r28, 0xFF	; 255
     6f6:	c0 38       	cpi	r28, 0x80	; 128
     6f8:	d9 f7       	brne	.-10     	; 0x6f0 <LCDclear+0xe>
     6fa:	df 5f       	subi	r29, 0xFF	; 255
     6fc:	d8 30       	cpi	r29, 0x08	; 8
     6fe:	a1 f7       	brne	.-24     	; 0x6e8 <LCDclear+0x6>
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	d5 df       	rcall	.-86     	; 0x6b0 <LCDgoto>
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <LCDchar>:
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	8c 01       	movw	r16, r24
     716:	80 91 3f 22 	lds	r24, 0x223F	; 0x80223f <p_col>
     71a:	8a 5f       	subi	r24, 0xFA	; 250
     71c:	80 93 3f 22 	sts	0x223F, r24	; 0x80223f <p_col>
     720:	8b 37       	cpi	r24, 0x7B	; 123
     722:	70 f0       	brcs	.+28     	; 0x740 <LCDchar+0x34>
     724:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <p_row>
     728:	8f 5f       	subi	r24, 0xFF	; 255
     72a:	84 30       	cpi	r24, 0x04	; 4
     72c:	18 f4       	brcc	.+6      	; 0x734 <LCDchar+0x28>
     72e:	80 93 40 22 	sts	0x2240, r24	; 0x802240 <p_row>
     732:	02 c0       	rjmp	.+4      	; 0x738 <LCDchar+0x2c>
     734:	10 92 40 22 	sts	0x2240, r1	; 0x802240 <p_row>
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	80 91 40 22 	lds	r24, 0x2240	; 0x802240 <p_row>
     73e:	b8 df       	rcall	.-144    	; 0x6b0 <LCDgoto>
     740:	c8 01       	movw	r24, r16
     742:	80 97       	sbiw	r24, 0x20	; 32
     744:	8d 36       	cpi	r24, 0x6D	; 109
     746:	91 05       	cpc	r25, r1
     748:	10 f0       	brcs	.+4      	; 0x74e <LCDchar+0x42>
     74a:	0f e3       	ldi	r16, 0x3F	; 63
     74c:	10 e0       	ldi	r17, 0x00	; 0
     74e:	00 52       	subi	r16, 0x20	; 32
     750:	11 09       	sbc	r17, r1
     752:	c8 01       	movw	r24, r16
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	08 0f       	add	r16, r24
     75e:	19 1f       	adc	r17, r25
     760:	e8 01       	movw	r28, r16
     762:	c0 5f       	subi	r28, 0xF0	; 240
     764:	df 4d       	sbci	r29, 0xDF	; 223
     766:	0b 5e       	subi	r16, 0xEB	; 235
     768:	1f 4d       	sbci	r17, 0xDF	; 223
     76a:	29 91       	ld	r18, Y+
     76c:	98 e0       	ldi	r25, 0x08	; 8
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	88 0f       	add	r24, r24
     772:	32 2f       	mov	r19, r18
     774:	31 70       	andi	r19, 0x01	; 1
     776:	83 0f       	add	r24, r19
     778:	26 95       	lsr	r18
     77a:	91 50       	subi	r25, 0x01	; 1
     77c:	c9 f7       	brne	.-14     	; 0x770 <LCDchar+0x64>
     77e:	74 df       	rcall	.-280    	; 0x668 <LCDdata>
     780:	c0 17       	cp	r28, r16
     782:	d1 07       	cpc	r29, r17
     784:	91 f7       	brne	.-28     	; 0x76a <LCDchar+0x5e>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	6f df       	rcall	.-290    	; 0x668 <LCDdata>
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <LCDtext>:
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	ec 01       	movw	r28, r24
     79a:	88 81       	ld	r24, Y
     79c:	88 23       	and	r24, r24
     79e:	41 f0       	breq	.+16     	; 0x7b0 <LCDtext+0x1c>
     7a0:	21 96       	adiw	r28, 0x01	; 1
     7a2:	08 2e       	mov	r0, r24
     7a4:	00 0c       	add	r0, r0
     7a6:	99 0b       	sbc	r25, r25
     7a8:	b1 df       	rcall	.-158    	; 0x70c <LCDchar>
     7aa:	89 91       	ld	r24, Y+
     7ac:	81 11       	cpse	r24, r1
     7ae:	f9 cf       	rjmp	.-14     	; 0x7a2 <LCDtext+0xe>
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <LCDinit>:
}

void LCDinit(void){
	LCDcommand(LCD_SYSTEM_RESET);
     7b6:	82 ee       	ldi	r24, 0xE2	; 226
     7b8:	0e df       	rcall	.-484    	; 0x5d6 <LCDcommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ba:	2f ef       	ldi	r18, 0xFF	; 255
     7bc:	89 ef       	ldi	r24, 0xF9	; 249
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	21 50       	subi	r18, 0x01	; 1
     7c2:	80 40       	sbci	r24, 0x00	; 0
     7c4:	90 40       	sbci	r25, 0x00	; 0
     7c6:	e1 f7       	brne	.-8      	; 0x7c0 <LCDinit+0xa>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <LCDinit+0x14>
     7ca:	00 00       	nop
	_delay_ms(10);
	LCDcommand(0xEB);	//bias ratio
     7cc:	8b ee       	ldi	r24, 0xEB	; 235
     7ce:	03 df       	rcall	.-506    	; 0x5d6 <LCDcommand>
	LCDcommand2(LCD_SET_BIAS,220); //bias value
     7d0:	6c ed       	ldi	r22, 0xDC	; 220
     7d2:	81 e8       	ldi	r24, 0x81	; 129
     7d4:	24 df       	rcall	.-440    	; 0x61e <LCDcommand2>
	LCDcommand(LCD_ENABLE_DISPLAY);
     7d6:	8f ea       	ldi	r24, 0xAF	; 175
     7d8:	fe de       	rcall	.-516    	; 0x5d6 <LCDcommand>
	LCDclear();
     7da:	83 df       	rcall	.-250    	; 0x6e2 <LCDclear>
	LCDgoto(0,0);
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	67 cf       	rjmp	.-306    	; 0x6b0 <LCDgoto>
     7e2:	08 95       	ret

000007e4 <LCD_printFloat>:
	//LCDcommand(0x27);	//temp comp 0.00%/C
	
}

void LCD_printFloat(float val){
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	2c 97       	sbiw	r28, 0x0c	; 12
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
	char buffer[12];
	sprintf(buffer, "%+010.2f", val);
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	7f 93       	push	r23
     7fc:	6f 93       	push	r22
     7fe:	87 e0       	ldi	r24, 0x07	; 7
     800:	90 e2       	ldi	r25, 0x20	; 32
     802:	9f 93       	push	r25
     804:	8f 93       	push	r24
     806:	8e 01       	movw	r16, r28
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	1f 93       	push	r17
     80e:	0f 93       	push	r16
     810:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <sprintf>
	LCDtext(buffer);
     814:	c8 01       	movw	r24, r16
     816:	be df       	rcall	.-132    	; 0x794 <LCDtext>
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	2c 96       	adiw	r28, 0x0c	; 12
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	de bf       	out	0x3e, r29	; 62
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <sysclk_init+0x6>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     83e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     842:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     846:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     84a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     84e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     852:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     856:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
     85a:	84 fd       	sbrc	r24, 4
     85c:	22 c0       	rjmp	.+68     	; 0x8a2 <sysclk_init+0x76>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     85e:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
     862:	83 fd       	sbrc	r24, 3
     864:	0f c0       	rjmp	.+30     	; 0x884 <sysclk_init+0x58>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
     866:	e0 e5       	ldi	r30, 0x50	; 80
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 ec       	ldi	r24, 0xC0	; 192
     86c:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     86e:	8f b7       	in	r24, 0x3f	; 63
     870:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     872:	f8 94       	cli
	return flags;
     874:	99 81       	ldd	r25, Y+1	; 0x01
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     876:	80 81       	ld	r24, Z
     878:	88 60       	ori	r24, 0x08	; 8
     87a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     87c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     87e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     880:	83 ff       	sbrs	r24, 3
     882:	fd cf       	rjmp	.-6      	; 0x87e <sysclk_init+0x52>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     884:	8f b7       	in	r24, 0x3f	; 63
     886:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     888:	f8 94       	cli
	return flags;
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
     88c:	e0 e5       	ldi	r30, 0x50	; 80
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	82 ec       	ldi	r24, 0xC2	; 194
     892:	85 83       	std	Z+5, r24	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
     894:	80 81       	ld	r24, Z
     896:	80 61       	ori	r24, 0x10	; 16
     898:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     89a:	9f bf       	out	0x3f, r25	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
     89c:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
     89e:	84 ff       	sbrs	r24, 4
     8a0:	fd cf       	rjmp	.-6      	; 0x89c <sysclk_init+0x70>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     8a2:	64 e0       	ldi	r22, 0x04	; 4
     8a4:	80 e4       	ldi	r24, 0x40	; 64
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	7b d0       	rcall	.+246    	; 0x9a0 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8aa:	8f b7       	in	r24, 0x3f	; 63
     8ac:	8b 83       	std	Y+3, r24	; 0x03
	cpu_irq_disable();
     8ae:	f8 94       	cli
	return flags;
     8b0:	9b 81       	ldd	r25, Y+3	; 0x03
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     8b2:	e0 e5       	ldi	r30, 0x50	; 80
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8bc:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     8be:	23 96       	adiw	r28, 0x03	; 3
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	1f 92       	push	r1
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     8d4:	9f b7       	in	r25, 0x3f	; 63
     8d6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     8d8:	f8 94       	cli
	return flags;
     8da:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     8dc:	e8 2f       	mov	r30, r24
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	e0 59       	subi	r30, 0x90	; 144
     8e2:	ff 4f       	sbci	r31, 0xFF	; 255
     8e4:	60 95       	com	r22
     8e6:	80 81       	ld	r24, Z
     8e8:	68 23       	and	r22, r24
     8ea:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     8ec:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <GPIO_Init>:

void GPIO_Init(void);
void twi_init(void);

void GPIO_Init(void){
	PORTR.DIRSET = PIN0_bm;	//LED1
     8f6:	e0 ee       	ldi	r30, 0xE0	; 224
     8f8:	f7 e0       	ldi	r31, 0x07	; 7
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	91 83       	std	Z+1, r25	; 0x01
	PORTR.OUTCLR = PIN0_bm;
     8fe:	96 83       	std	Z+6, r25	; 0x06
	
	PORTE.DIRSET = PIN0_bm;	//LED2
     900:	e0 e8       	ldi	r30, 0x80	; 128
     902:	f6 e0       	ldi	r31, 0x06	; 6
     904:	91 83       	std	Z+1, r25	; 0x01
	PORTE.OUTCLR = PIN0_bm;
     906:	96 83       	std	Z+6, r25	; 0x06
	
	PORTE.DIRSET = PIN1_bm;	//LED3
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	81 83       	std	Z+1, r24	; 0x01
	PORTE.OUTCLR = PIN1_bm;
     90c:	86 83       	std	Z+6, r24	; 0x06
	
	PORTD.DIRSET = PIN1_bm;	//Backlight
     90e:	e0 e6       	ldi	r30, 0x60	; 96
     910:	f6 e0       	ldi	r31, 0x06	; 6
     912:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = PIN1_bm;
     914:	86 83       	std	Z+6, r24	; 0x06
	
	PORTB.DIRCLR = PIN0_bm;	//SW1
     916:	e0 e2       	ldi	r30, 0x20	; 32
     918:	f6 e0       	ldi	r31, 0x06	; 6
     91a:	92 83       	std	Z+2, r25	; 0x02
	PORTB.OUTSET = PIN0_bm;
     91c:	95 83       	std	Z+5, r25	; 0x05
	
	PORTB.DIRCLR = PIN1_bm;	//SW2
     91e:	82 83       	std	Z+2, r24	; 0x02
	PORTB.OUTSET = PIN1_bm;
     920:	85 83       	std	Z+5, r24	; 0x05
	
	PORTB.DIRCLR = PIN2_bm;	//SW3
     922:	84 e0       	ldi	r24, 0x04	; 4
     924:	82 83       	std	Z+2, r24	; 0x02
	PORTB.OUTSET = PIN2_bm;
     926:	85 83       	std	Z+5, r24	; 0x05
	
	PORTB.DIRCLR = PIN3_bm;	//SW4
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	82 83       	std	Z+2, r24	; 0x02
	PORTB.OUTSET = PIN3_bm;
     92c:	85 83       	std	Z+5, r24	; 0x05
     92e:	08 95       	ret

00000930 <twi_init>:
	
}

void twi_init(void){
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	29 97       	sbiw	r28, 0x09	; 9
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	de bf       	out	0x3e, r29	; 62
	twi_options_t opt = {
     942:	8e 01       	movw	r16, r28
     944:	0f 5f       	subi	r16, 0xFF	; 255
     946:	1f 4f       	sbci	r17, 0xFF	; 255
     948:	89 e0       	ldi	r24, 0x09	; 9
     94a:	f8 01       	movw	r30, r16
     94c:	11 92       	st	Z+, r1
     94e:	8a 95       	dec	r24
     950:	e9 f7       	brne	.-6      	; 0x94c <twi_init+0x1c>
     952:	80 e5       	ldi	r24, 0x50	; 80
     954:	93 ec       	ldi	r25, 0xC3	; 195
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	9a 83       	std	Y+2, r25	; 0x02
     95e:	ab 83       	std	Y+3, r26	; 0x03
     960:	bc 83       	std	Y+4, r27	; 0x04
		.speed = 50000,
	};
	opt.speed_reg = TWI_BAUD(sysclk_get_cpu_hz(), opt.speed);
     962:	8b e3       	ldi	r24, 0x3B	; 59
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	8d 83       	std	Y+5, r24	; 0x05
     96c:	9e 83       	std	Y+6, r25	; 0x06
     96e:	af 83       	std	Y+7, r26	; 0x07
     970:	b8 87       	std	Y+8, r27	; 0x08
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     972:	60 e4       	ldi	r22, 0x40	; 64
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	a9 df       	rcall	.-174    	; 0x8ca <sysclk_enable_module>
	
	sysclk_enable_peripheral_clock(&TWIC);
	
	twi_master_init(&TWIC, &opt);
     978:	b8 01       	movw	r22, r16
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	b9 dd       	rcall	.-1166   	; 0x4f2 <twi_master_init>
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
     980:	e0 e8       	ldi	r30, 0x80	; 128
     982:	f4 e0       	ldi	r31, 0x04	; 4
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	88 60       	ori	r24, 0x08	; 8
     988:	81 83       	std	Z+1, r24	; 0x01
	twi_master_enable(&TWIC);
}
     98a:	29 96       	adiw	r28, 0x09	; 9
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	de bf       	out	0x3e, r29	; 62
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <board_init>:
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	
	GPIO_Init();
     99a:	ad df       	rcall	.-166    	; 0x8f6 <GPIO_Init>
	twi_init();
     99c:	c9 cf       	rjmp	.-110    	; 0x930 <twi_init>
     99e:	08 95       	ret

000009a0 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     9a0:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     9a2:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     9a4:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     9a6:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     9a8:	60 83       	st	Z, r22
	ret                             // Return to caller
     9aa:	08 95       	ret

000009ac <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	4f 93       	push	r20
     9bc:	5f 93       	push	r21
     9be:	6f 93       	push	r22
     9c0:	7f 93       	push	r23
     9c2:	8f 93       	push	r24
     9c4:	9f 93       	push	r25
     9c6:	af 93       	push	r26
     9c8:	bf 93       	push	r27
     9ca:	ef 93       	push	r30
     9cc:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     9ce:	e0 91 3d 22 	lds	r30, 0x223D	; 0x80223d <tc_tcc0_ovf_callback>
     9d2:	f0 91 3e 22 	lds	r31, 0x223E	; 0x80223e <tc_tcc0_ovf_callback+0x1>
     9d6:	30 97       	sbiw	r30, 0x00	; 0
     9d8:	09 f0       	breq	.+2      	; 0x9dc <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     9da:	09 95       	icall
	}
}
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	7f 91       	pop	r23
     9ea:	6f 91       	pop	r22
     9ec:	5f 91       	pop	r21
     9ee:	4f 91       	pop	r20
     9f0:	3f 91       	pop	r19
     9f2:	2f 91       	pop	r18
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     a20:	e0 91 3b 22 	lds	r30, 0x223B	; 0x80223b <tc_tcc0_err_callback>
     a24:	f0 91 3c 22 	lds	r31, 0x223C	; 0x80223c <tc_tcc0_err_callback+0x1>
     a28:	30 97       	sbiw	r30, 0x00	; 0
     a2a:	09 f0       	breq	.+2      	; 0xa2e <__vector_15+0x30>
		tc_tcc0_err_callback();
     a2c:	09 95       	icall
	}
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	0f 90       	pop	r0
     a4c:	1f 90       	pop	r1
     a4e:	18 95       	reti

00000a50 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     a50:	1f 92       	push	r1
     a52:	0f 92       	push	r0
     a54:	0f b6       	in	r0, 0x3f	; 63
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	2f 93       	push	r18
     a5c:	3f 93       	push	r19
     a5e:	4f 93       	push	r20
     a60:	5f 93       	push	r21
     a62:	6f 93       	push	r22
     a64:	7f 93       	push	r23
     a66:	8f 93       	push	r24
     a68:	9f 93       	push	r25
     a6a:	af 93       	push	r26
     a6c:	bf 93       	push	r27
     a6e:	ef 93       	push	r30
     a70:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     a72:	e0 91 39 22 	lds	r30, 0x2239	; 0x802239 <tc_tcc0_cca_callback>
     a76:	f0 91 3a 22 	lds	r31, 0x223A	; 0x80223a <tc_tcc0_cca_callback+0x1>
     a7a:	30 97       	sbiw	r30, 0x00	; 0
     a7c:	09 f0       	breq	.+2      	; 0xa80 <__vector_16+0x30>
		tc_tcc0_cca_callback();
     a7e:	09 95       	icall
	}
}
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	ef 93       	push	r30
     ac2:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     ac4:	e0 91 37 22 	lds	r30, 0x2237	; 0x802237 <tc_tcc0_ccb_callback>
     ac8:	f0 91 38 22 	lds	r31, 0x2238	; 0x802238 <tc_tcc0_ccb_callback+0x1>
     acc:	30 97       	sbiw	r30, 0x00	; 0
     ace:	09 f0       	breq	.+2      	; 0xad2 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     ad0:	09 95       	icall
	}
}
     ad2:	ff 91       	pop	r31
     ad4:	ef 91       	pop	r30
     ad6:	bf 91       	pop	r27
     ad8:	af 91       	pop	r26
     ada:	9f 91       	pop	r25
     adc:	8f 91       	pop	r24
     ade:	7f 91       	pop	r23
     ae0:	6f 91       	pop	r22
     ae2:	5f 91       	pop	r21
     ae4:	4f 91       	pop	r20
     ae6:	3f 91       	pop	r19
     ae8:	2f 91       	pop	r18
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     af4:	1f 92       	push	r1
     af6:	0f 92       	push	r0
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	0f 92       	push	r0
     afc:	11 24       	eor	r1, r1
     afe:	2f 93       	push	r18
     b00:	3f 93       	push	r19
     b02:	4f 93       	push	r20
     b04:	5f 93       	push	r21
     b06:	6f 93       	push	r22
     b08:	7f 93       	push	r23
     b0a:	8f 93       	push	r24
     b0c:	9f 93       	push	r25
     b0e:	af 93       	push	r26
     b10:	bf 93       	push	r27
     b12:	ef 93       	push	r30
     b14:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     b16:	e0 91 35 22 	lds	r30, 0x2235	; 0x802235 <tc_tcc0_ccc_callback>
     b1a:	f0 91 36 22 	lds	r31, 0x2236	; 0x802236 <tc_tcc0_ccc_callback+0x1>
     b1e:	30 97       	sbiw	r30, 0x00	; 0
     b20:	09 f0       	breq	.+2      	; 0xb24 <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     b22:	09 95       	icall
	}
}
     b24:	ff 91       	pop	r31
     b26:	ef 91       	pop	r30
     b28:	bf 91       	pop	r27
     b2a:	af 91       	pop	r26
     b2c:	9f 91       	pop	r25
     b2e:	8f 91       	pop	r24
     b30:	7f 91       	pop	r23
     b32:	6f 91       	pop	r22
     b34:	5f 91       	pop	r21
     b36:	4f 91       	pop	r20
     b38:	3f 91       	pop	r19
     b3a:	2f 91       	pop	r18
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     b68:	e0 91 33 22 	lds	r30, 0x2233	; 0x802233 <tc_tcc0_ccd_callback>
     b6c:	f0 91 34 22 	lds	r31, 0x2234	; 0x802234 <tc_tcc0_ccd_callback+0x1>
     b70:	30 97       	sbiw	r30, 0x00	; 0
     b72:	09 f0       	breq	.+2      	; 0xb76 <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     b74:	09 95       	icall
	}
}
     b76:	ff 91       	pop	r31
     b78:	ef 91       	pop	r30
     b7a:	bf 91       	pop	r27
     b7c:	af 91       	pop	r26
     b7e:	9f 91       	pop	r25
     b80:	8f 91       	pop	r24
     b82:	7f 91       	pop	r23
     b84:	6f 91       	pop	r22
     b86:	5f 91       	pop	r21
     b88:	4f 91       	pop	r20
     b8a:	3f 91       	pop	r19
     b8c:	2f 91       	pop	r18
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	6f 93       	push	r22
     bac:	7f 93       	push	r23
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	af 93       	push	r26
     bb4:	bf 93       	push	r27
     bb6:	ef 93       	push	r30
     bb8:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     bba:	e0 91 31 22 	lds	r30, 0x2231	; 0x802231 <tc_tcc1_ovf_callback>
     bbe:	f0 91 32 22 	lds	r31, 0x2232	; 0x802232 <tc_tcc1_ovf_callback+0x1>
     bc2:	30 97       	sbiw	r30, 0x00	; 0
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     bc6:	09 95       	icall
	}
}
     bc8:	ff 91       	pop	r31
     bca:	ef 91       	pop	r30
     bcc:	bf 91       	pop	r27
     bce:	af 91       	pop	r26
     bd0:	9f 91       	pop	r25
     bd2:	8f 91       	pop	r24
     bd4:	7f 91       	pop	r23
     bd6:	6f 91       	pop	r22
     bd8:	5f 91       	pop	r21
     bda:	4f 91       	pop	r20
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	2f 93       	push	r18
     bf6:	3f 93       	push	r19
     bf8:	4f 93       	push	r20
     bfa:	5f 93       	push	r21
     bfc:	6f 93       	push	r22
     bfe:	7f 93       	push	r23
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     c0c:	e0 91 2f 22 	lds	r30, 0x222F	; 0x80222f <tc_tcc1_err_callback>
     c10:	f0 91 30 22 	lds	r31, 0x2230	; 0x802230 <tc_tcc1_err_callback+0x1>
     c14:	30 97       	sbiw	r30, 0x00	; 0
     c16:	09 f0       	breq	.+2      	; 0xc1a <__vector_21+0x30>
		tc_tcc1_err_callback();
     c18:	09 95       	icall
	}
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     c5e:	e0 91 2d 22 	lds	r30, 0x222D	; 0x80222d <tc_tcc1_cca_callback>
     c62:	f0 91 2e 22 	lds	r31, 0x222E	; 0x80222e <tc_tcc1_cca_callback+0x1>
     c66:	30 97       	sbiw	r30, 0x00	; 0
     c68:	09 f0       	breq	.+2      	; 0xc6c <__vector_22+0x30>
		tc_tcc1_cca_callback();
     c6a:	09 95       	icall
	}
}
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	0f 90       	pop	r0
     c8a:	1f 90       	pop	r1
     c8c:	18 95       	reti

00000c8e <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	2f 93       	push	r18
     c9a:	3f 93       	push	r19
     c9c:	4f 93       	push	r20
     c9e:	5f 93       	push	r21
     ca0:	6f 93       	push	r22
     ca2:	7f 93       	push	r23
     ca4:	8f 93       	push	r24
     ca6:	9f 93       	push	r25
     ca8:	af 93       	push	r26
     caa:	bf 93       	push	r27
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     cb0:	e0 91 2b 22 	lds	r30, 0x222B	; 0x80222b <tc_tcc1_ccb_callback>
     cb4:	f0 91 2c 22 	lds	r31, 0x222C	; 0x80222c <tc_tcc1_ccb_callback+0x1>
     cb8:	30 97       	sbiw	r30, 0x00	; 0
     cba:	09 f0       	breq	.+2      	; 0xcbe <__vector_23+0x30>
		tc_tcc1_ccb_callback();
     cbc:	09 95       	icall
	}
}
     cbe:	ff 91       	pop	r31
     cc0:	ef 91       	pop	r30
     cc2:	bf 91       	pop	r27
     cc4:	af 91       	pop	r26
     cc6:	9f 91       	pop	r25
     cc8:	8f 91       	pop	r24
     cca:	7f 91       	pop	r23
     ccc:	6f 91       	pop	r22
     cce:	5f 91       	pop	r21
     cd0:	4f 91       	pop	r20
     cd2:	3f 91       	pop	r19
     cd4:	2f 91       	pop	r18
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	0f 90       	pop	r0
     cdc:	1f 90       	pop	r1
     cde:	18 95       	reti

00000ce0 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     ce0:	1f 92       	push	r1
     ce2:	0f 92       	push	r0
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	0f 92       	push	r0
     ce8:	11 24       	eor	r1, r1
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d02:	e0 91 29 22 	lds	r30, 0x2229	; 0x802229 <tc_tcd0_ovf_callback>
     d06:	f0 91 2a 22 	lds	r31, 0x222A	; 0x80222a <tc_tcd0_ovf_callback+0x1>
     d0a:	30 97       	sbiw	r30, 0x00	; 0
     d0c:	09 f0       	breq	.+2      	; 0xd10 <__vector_77+0x30>
		tc_tcd0_ovf_callback();
     d0e:	09 95       	icall
	}
}
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d54:	e0 91 27 22 	lds	r30, 0x2227	; 0x802227 <tc_tcd0_err_callback>
     d58:	f0 91 28 22 	lds	r31, 0x2228	; 0x802228 <tc_tcd0_err_callback+0x1>
     d5c:	30 97       	sbiw	r30, 0x00	; 0
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__vector_78+0x30>
		tc_tcd0_err_callback();
     d60:	09 95       	icall
	}
}
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	0f 90       	pop	r0
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	0f 90       	pop	r0
     d80:	1f 90       	pop	r1
     d82:	18 95       	reti

00000d84 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     d84:	1f 92       	push	r1
     d86:	0f 92       	push	r0
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	0f 92       	push	r0
     d8c:	11 24       	eor	r1, r1
     d8e:	2f 93       	push	r18
     d90:	3f 93       	push	r19
     d92:	4f 93       	push	r20
     d94:	5f 93       	push	r21
     d96:	6f 93       	push	r22
     d98:	7f 93       	push	r23
     d9a:	8f 93       	push	r24
     d9c:	9f 93       	push	r25
     d9e:	af 93       	push	r26
     da0:	bf 93       	push	r27
     da2:	ef 93       	push	r30
     da4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     da6:	e0 91 25 22 	lds	r30, 0x2225	; 0x802225 <tc_tcd0_cca_callback>
     daa:	f0 91 26 22 	lds	r31, 0x2226	; 0x802226 <tc_tcd0_cca_callback+0x1>
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__vector_79+0x30>
		tc_tcd0_cca_callback();
     db2:	09 95       	icall
	}
}
     db4:	ff 91       	pop	r31
     db6:	ef 91       	pop	r30
     db8:	bf 91       	pop	r27
     dba:	af 91       	pop	r26
     dbc:	9f 91       	pop	r25
     dbe:	8f 91       	pop	r24
     dc0:	7f 91       	pop	r23
     dc2:	6f 91       	pop	r22
     dc4:	5f 91       	pop	r21
     dc6:	4f 91       	pop	r20
     dc8:	3f 91       	pop	r19
     dca:	2f 91       	pop	r18
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	0f 90       	pop	r0
     dd2:	1f 90       	pop	r1
     dd4:	18 95       	reti

00000dd6 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     df8:	e0 91 23 22 	lds	r30, 0x2223	; 0x802223 <tc_tcd0_ccb_callback>
     dfc:	f0 91 24 22 	lds	r31, 0x2224	; 0x802224 <tc_tcd0_ccb_callback+0x1>
     e00:	30 97       	sbiw	r30, 0x00	; 0
     e02:	09 f0       	breq	.+2      	; 0xe06 <__vector_80+0x30>
		tc_tcd0_ccb_callback();
     e04:	09 95       	icall
	}
}
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     e4a:	e0 91 21 22 	lds	r30, 0x2221	; 0x802221 <tc_tcd0_ccc_callback>
     e4e:	f0 91 22 22 	lds	r31, 0x2222	; 0x802222 <tc_tcd0_ccc_callback+0x1>
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	09 f0       	breq	.+2      	; 0xe58 <__vector_81+0x30>
		tc_tcd0_ccc_callback();
     e56:	09 95       	icall
	}
}
     e58:	ff 91       	pop	r31
     e5a:	ef 91       	pop	r30
     e5c:	bf 91       	pop	r27
     e5e:	af 91       	pop	r26
     e60:	9f 91       	pop	r25
     e62:	8f 91       	pop	r24
     e64:	7f 91       	pop	r23
     e66:	6f 91       	pop	r22
     e68:	5f 91       	pop	r21
     e6a:	4f 91       	pop	r20
     e6c:	3f 91       	pop	r19
     e6e:	2f 91       	pop	r18
     e70:	0f 90       	pop	r0
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	0f 90       	pop	r0
     e76:	1f 90       	pop	r1
     e78:	18 95       	reti

00000e7a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     e9c:	e0 91 1f 22 	lds	r30, 0x221F	; 0x80221f <tc_tcd0_ccd_callback>
     ea0:	f0 91 20 22 	lds	r31, 0x2220	; 0x802220 <tc_tcd0_ccd_callback+0x1>
     ea4:	30 97       	sbiw	r30, 0x00	; 0
     ea6:	09 f0       	breq	.+2      	; 0xeaa <__vector_82+0x30>
		tc_tcd0_ccd_callback();
     ea8:	09 95       	icall
	}
}
     eaa:	ff 91       	pop	r31
     eac:	ef 91       	pop	r30
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     eee:	e0 91 1d 22 	lds	r30, 0x221D	; 0x80221d <tc_tcd1_ovf_callback>
     ef2:	f0 91 1e 22 	lds	r31, 0x221E	; 0x80221e <tc_tcd1_ovf_callback+0x1>
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_83+0x30>
		tc_tcd1_ovf_callback();
     efa:	09 95       	icall
	}
}
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	ef 93       	push	r30
     f3e:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
     f40:	e0 91 1b 22 	lds	r30, 0x221B	; 0x80221b <tc_tcd1_err_callback>
     f44:	f0 91 1c 22 	lds	r31, 0x221C	; 0x80221c <tc_tcd1_err_callback+0x1>
     f48:	30 97       	sbiw	r30, 0x00	; 0
     f4a:	09 f0       	breq	.+2      	; 0xf4e <__vector_84+0x30>
		tc_tcd1_err_callback();
     f4c:	09 95       	icall
	}
}
     f4e:	ff 91       	pop	r31
     f50:	ef 91       	pop	r30
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
     f92:	e0 91 19 22 	lds	r30, 0x2219	; 0x802219 <tc_tcd1_cca_callback>
     f96:	f0 91 1a 22 	lds	r31, 0x221A	; 0x80221a <tc_tcd1_cca_callback+0x1>
     f9a:	30 97       	sbiw	r30, 0x00	; 0
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <__vector_85+0x30>
		tc_tcd1_cca_callback();
     f9e:	09 95       	icall
	}
}
     fa0:	ff 91       	pop	r31
     fa2:	ef 91       	pop	r30
     fa4:	bf 91       	pop	r27
     fa6:	af 91       	pop	r26
     fa8:	9f 91       	pop	r25
     faa:	8f 91       	pop	r24
     fac:	7f 91       	pop	r23
     fae:	6f 91       	pop	r22
     fb0:	5f 91       	pop	r21
     fb2:	4f 91       	pop	r20
     fb4:	3f 91       	pop	r19
     fb6:	2f 91       	pop	r18
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
     fc2:	1f 92       	push	r1
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	11 24       	eor	r1, r1
     fcc:	2f 93       	push	r18
     fce:	3f 93       	push	r19
     fd0:	4f 93       	push	r20
     fd2:	5f 93       	push	r21
     fd4:	6f 93       	push	r22
     fd6:	7f 93       	push	r23
     fd8:	8f 93       	push	r24
     fda:	9f 93       	push	r25
     fdc:	af 93       	push	r26
     fde:	bf 93       	push	r27
     fe0:	ef 93       	push	r30
     fe2:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
     fe4:	e0 91 17 22 	lds	r30, 0x2217	; 0x802217 <tc_tcd1_ccb_callback>
     fe8:	f0 91 18 22 	lds	r31, 0x2218	; 0x802218 <tc_tcd1_ccb_callback+0x1>
     fec:	30 97       	sbiw	r30, 0x00	; 0
     fee:	09 f0       	breq	.+2      	; 0xff2 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
     ff0:	09 95       	icall
	}
}
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1036:	e0 91 15 22 	lds	r30, 0x2215	; 0x802215 <tc_tce0_ovf_callback>
    103a:	f0 91 16 22 	lds	r31, 0x2216	; 0x802216 <tc_tce0_ovf_callback+0x1>
    103e:	30 97       	sbiw	r30, 0x00	; 0
    1040:	09 f0       	breq	.+2      	; 0x1044 <__vector_47+0x30>
		tc_tce0_ovf_callback();
    1042:	09 95       	icall
	}
}
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1066:	1f 92       	push	r1
    1068:	0f 92       	push	r0
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	0f 92       	push	r0
    106e:	11 24       	eor	r1, r1
    1070:	2f 93       	push	r18
    1072:	3f 93       	push	r19
    1074:	4f 93       	push	r20
    1076:	5f 93       	push	r21
    1078:	6f 93       	push	r22
    107a:	7f 93       	push	r23
    107c:	8f 93       	push	r24
    107e:	9f 93       	push	r25
    1080:	af 93       	push	r26
    1082:	bf 93       	push	r27
    1084:	ef 93       	push	r30
    1086:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1088:	e0 91 13 22 	lds	r30, 0x2213	; 0x802213 <tc_tce0_err_callback>
    108c:	f0 91 14 22 	lds	r31, 0x2214	; 0x802214 <tc_tce0_err_callback+0x1>
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	09 f0       	breq	.+2      	; 0x1096 <__vector_48+0x30>
		tc_tce0_err_callback();
    1094:	09 95       	icall
	}
}
    1096:	ff 91       	pop	r31
    1098:	ef 91       	pop	r30
    109a:	bf 91       	pop	r27
    109c:	af 91       	pop	r26
    109e:	9f 91       	pop	r25
    10a0:	8f 91       	pop	r24
    10a2:	7f 91       	pop	r23
    10a4:	6f 91       	pop	r22
    10a6:	5f 91       	pop	r21
    10a8:	4f 91       	pop	r20
    10aa:	3f 91       	pop	r19
    10ac:	2f 91       	pop	r18
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    10da:	e0 91 11 22 	lds	r30, 0x2211	; 0x802211 <tc_tce0_cca_callback>
    10de:	f0 91 12 22 	lds	r31, 0x2212	; 0x802212 <tc_tce0_cca_callback+0x1>
    10e2:	30 97       	sbiw	r30, 0x00	; 0
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <__vector_49+0x30>
		tc_tce0_cca_callback();
    10e6:	09 95       	icall
	}
}
    10e8:	ff 91       	pop	r31
    10ea:	ef 91       	pop	r30
    10ec:	bf 91       	pop	r27
    10ee:	af 91       	pop	r26
    10f0:	9f 91       	pop	r25
    10f2:	8f 91       	pop	r24
    10f4:	7f 91       	pop	r23
    10f6:	6f 91       	pop	r22
    10f8:	5f 91       	pop	r21
    10fa:	4f 91       	pop	r20
    10fc:	3f 91       	pop	r19
    10fe:	2f 91       	pop	r18
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti

0000110a <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    112c:	e0 91 0f 22 	lds	r30, 0x220F	; 0x80220f <tc_tce0_ccb_callback>
    1130:	f0 91 10 22 	lds	r31, 0x2210	; 0x802210 <tc_tce0_ccb_callback+0x1>
    1134:	30 97       	sbiw	r30, 0x00	; 0
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_50+0x30>
		tc_tce0_ccb_callback();
    1138:	09 95       	icall
	}
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    117e:	e0 91 0d 22 	lds	r30, 0x220D	; 0x80220d <tc_tce0_ccc_callback>
    1182:	f0 91 0e 22 	lds	r31, 0x220E	; 0x80220e <tc_tce0_ccc_callback+0x1>
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	09 f0       	breq	.+2      	; 0x118c <__vector_51+0x30>
		tc_tce0_ccc_callback();
    118a:	09 95       	icall
	}
}
    118c:	ff 91       	pop	r31
    118e:	ef 91       	pop	r30
    1190:	bf 91       	pop	r27
    1192:	af 91       	pop	r26
    1194:	9f 91       	pop	r25
    1196:	8f 91       	pop	r24
    1198:	7f 91       	pop	r23
    119a:	6f 91       	pop	r22
    119c:	5f 91       	pop	r21
    119e:	4f 91       	pop	r20
    11a0:	3f 91       	pop	r19
    11a2:	2f 91       	pop	r18
    11a4:	0f 90       	pop	r0
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	0f 90       	pop	r0
    11aa:	1f 90       	pop	r1
    11ac:	18 95       	reti

000011ae <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    11ae:	1f 92       	push	r1
    11b0:	0f 92       	push	r0
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	0f 92       	push	r0
    11b6:	11 24       	eor	r1, r1
    11b8:	2f 93       	push	r18
    11ba:	3f 93       	push	r19
    11bc:	4f 93       	push	r20
    11be:	5f 93       	push	r21
    11c0:	6f 93       	push	r22
    11c2:	7f 93       	push	r23
    11c4:	8f 93       	push	r24
    11c6:	9f 93       	push	r25
    11c8:	af 93       	push	r26
    11ca:	bf 93       	push	r27
    11cc:	ef 93       	push	r30
    11ce:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    11d0:	e0 91 0b 22 	lds	r30, 0x220B	; 0x80220b <tc_tce0_ccd_callback>
    11d4:	f0 91 0c 22 	lds	r31, 0x220C	; 0x80220c <tc_tce0_ccd_callback+0x1>
    11d8:	30 97       	sbiw	r30, 0x00	; 0
    11da:	09 f0       	breq	.+2      	; 0x11de <__vector_52+0x30>
		tc_tce0_ccd_callback();
    11dc:	09 95       	icall
	}
}
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	bf 91       	pop	r27
    11e4:	af 91       	pop	r26
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	7f 91       	pop	r23
    11ec:	6f 91       	pop	r22
    11ee:	5f 91       	pop	r21
    11f0:	4f 91       	pop	r20
    11f2:	3f 91       	pop	r19
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <main>:
#include <util/delay.h>

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
    1200:	15 db       	rcall	.-2518   	; 0x82c <sysclk_init>
	board_init();
    1202:	cb db       	rcall	.-2154   	; 0x99a <board_init>
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    1204:	87 e0       	ldi	r24, 0x07	; 7
    1206:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	
	LCDinit();
    120a:	d5 da       	rcall	.-2646   	; 0x7b6 <LCDinit>
	//LCDdrawButtons();
	
	//LCDcommand(LCD_SYSTEM_RESET);
	
	LED_BL_On();
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	LCDgoto(0,10);
    1212:	6a e0       	ldi	r22, 0x0A	; 10
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	4c da       	rcall	.-2920   	; 0x6b0 <LCDgoto>
	LCD_printFloat(12.424);
    1218:	64 eb       	ldi	r22, 0xB4	; 180
    121a:	78 ec       	ldi	r23, 0xC8	; 200
    121c:	86 e4       	ldi	r24, 0x46	; 70
    121e:	91 e4       	ldi	r25, 0x41	; 65
    1220:	e1 da       	rcall	.-2622   	; 0x7e4 <LCD_printFloat>
	
	/* Insert application code here, after the board has been initialized. */
	while(1){
		
		LED_RGB_RED_On();
    1222:	e0 e8       	ldi	r30, 0x80	; 128
    1224:	f6 e0       	ldi	r31, 0x06	; 6
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	85 83       	std	Z+5, r24	; 0x05
    122a:	2f ef       	ldi	r18, 0xFF	; 255
    122c:	33 ec       	ldi	r19, 0xC3	; 195
    122e:	99 e0       	ldi	r25, 0x09	; 9
    1230:	21 50       	subi	r18, 0x01	; 1
    1232:	30 40       	sbci	r19, 0x00	; 0
    1234:	90 40       	sbci	r25, 0x00	; 0
    1236:	e1 f7       	brne	.-8      	; 0x1230 <main+0x30>
    1238:	00 c0       	rjmp	.+0      	; 0x123a <main+0x3a>
    123a:	00 00       	nop
		_delay_ms(100);
		
		LED_RGB_RED_Off();
    123c:	86 83       	std	Z+6, r24	; 0x06
    123e:	2f ef       	ldi	r18, 0xFF	; 255
    1240:	33 ee       	ldi	r19, 0xE3	; 227
    1242:	97 e5       	ldi	r25, 0x57	; 87
    1244:	21 50       	subi	r18, 0x01	; 1
    1246:	30 40       	sbci	r19, 0x00	; 0
    1248:	90 40       	sbci	r25, 0x00	; 0
    124a:	e1 f7       	brne	.-8      	; 0x1244 <main+0x44>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <main+0x4e>
    124e:	00 00       	nop
    1250:	eb cf       	rjmp	.-42     	; 0x1228 <main+0x28>

00001252 <vfprintf>:
    1252:	a3 e1       	ldi	r26, 0x13	; 19
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e2       	ldi	r30, 0x2E	; 46
    1258:	f9 e0       	ldi	r31, 0x09	; 9
    125a:	58 c3       	rjmp	.+1712   	; 0x190c <__prologue_saves__>
    125c:	6c 01       	movw	r12, r24
    125e:	4b 01       	movw	r8, r22
    1260:	2a 01       	movw	r4, r20
    1262:	fc 01       	movw	r30, r24
    1264:	16 82       	std	Z+6, r1	; 0x06
    1266:	17 82       	std	Z+7, r1	; 0x07
    1268:	83 81       	ldd	r24, Z+3	; 0x03
    126a:	81 ff       	sbrs	r24, 1
    126c:	29 c3       	rjmp	.+1618   	; 0x18c0 <vfprintf+0x66e>
    126e:	ae 01       	movw	r20, r28
    1270:	4f 5f       	subi	r20, 0xFF	; 255
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	3a 01       	movw	r6, r20
    1276:	f6 01       	movw	r30, r12
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	f4 01       	movw	r30, r8
    127c:	93 fd       	sbrc	r25, 3
    127e:	85 91       	lpm	r24, Z+
    1280:	93 ff       	sbrs	r25, 3
    1282:	81 91       	ld	r24, Z+
    1284:	4f 01       	movw	r8, r30
    1286:	88 23       	and	r24, r24
    1288:	09 f4       	brne	.+2      	; 0x128c <vfprintf+0x3a>
    128a:	16 c3       	rjmp	.+1580   	; 0x18b8 <vfprintf+0x666>
    128c:	85 32       	cpi	r24, 0x25	; 37
    128e:	39 f4       	brne	.+14     	; 0x129e <vfprintf+0x4c>
    1290:	93 fd       	sbrc	r25, 3
    1292:	85 91       	lpm	r24, Z+
    1294:	93 ff       	sbrs	r25, 3
    1296:	81 91       	ld	r24, Z+
    1298:	4f 01       	movw	r8, r30
    129a:	85 32       	cpi	r24, 0x25	; 37
    129c:	31 f4       	brne	.+12     	; 0x12aa <vfprintf+0x58>
    129e:	b6 01       	movw	r22, r12
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	53 d4       	rcall	.+2214   	; 0x1b4a <fputc>
    12a4:	52 01       	movw	r10, r4
    12a6:	25 01       	movw	r4, r10
    12a8:	e6 cf       	rjmp	.-52     	; 0x1276 <vfprintf+0x24>
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	f1 2c       	mov	r15, r1
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	20 32       	cpi	r18, 0x20	; 32
    12b2:	a0 f4       	brcc	.+40     	; 0x12dc <vfprintf+0x8a>
    12b4:	8b 32       	cpi	r24, 0x2B	; 43
    12b6:	69 f0       	breq	.+26     	; 0x12d2 <vfprintf+0x80>
    12b8:	30 f4       	brcc	.+12     	; 0x12c6 <vfprintf+0x74>
    12ba:	80 32       	cpi	r24, 0x20	; 32
    12bc:	59 f0       	breq	.+22     	; 0x12d4 <vfprintf+0x82>
    12be:	83 32       	cpi	r24, 0x23	; 35
    12c0:	69 f4       	brne	.+26     	; 0x12dc <vfprintf+0x8a>
    12c2:	20 61       	ori	r18, 0x10	; 16
    12c4:	2c c0       	rjmp	.+88     	; 0x131e <vfprintf+0xcc>
    12c6:	8d 32       	cpi	r24, 0x2D	; 45
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <vfprintf+0x86>
    12ca:	80 33       	cpi	r24, 0x30	; 48
    12cc:	39 f4       	brne	.+14     	; 0x12dc <vfprintf+0x8a>
    12ce:	21 60       	ori	r18, 0x01	; 1
    12d0:	26 c0       	rjmp	.+76     	; 0x131e <vfprintf+0xcc>
    12d2:	22 60       	ori	r18, 0x02	; 2
    12d4:	24 60       	ori	r18, 0x04	; 4
    12d6:	23 c0       	rjmp	.+70     	; 0x131e <vfprintf+0xcc>
    12d8:	28 60       	ori	r18, 0x08	; 8
    12da:	21 c0       	rjmp	.+66     	; 0x131e <vfprintf+0xcc>
    12dc:	27 fd       	sbrc	r18, 7
    12de:	27 c0       	rjmp	.+78     	; 0x132e <vfprintf+0xdc>
    12e0:	30 ed       	ldi	r19, 0xD0	; 208
    12e2:	38 0f       	add	r19, r24
    12e4:	3a 30       	cpi	r19, 0x0A	; 10
    12e6:	78 f4       	brcc	.+30     	; 0x1306 <vfprintf+0xb4>
    12e8:	26 ff       	sbrs	r18, 6
    12ea:	06 c0       	rjmp	.+12     	; 0x12f8 <vfprintf+0xa6>
    12ec:	fa e0       	ldi	r31, 0x0A	; 10
    12ee:	1f 9f       	mul	r17, r31
    12f0:	30 0d       	add	r19, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	13 2f       	mov	r17, r19
    12f6:	13 c0       	rjmp	.+38     	; 0x131e <vfprintf+0xcc>
    12f8:	4a e0       	ldi	r20, 0x0A	; 10
    12fa:	f4 9e       	mul	r15, r20
    12fc:	30 0d       	add	r19, r0
    12fe:	11 24       	eor	r1, r1
    1300:	f3 2e       	mov	r15, r19
    1302:	20 62       	ori	r18, 0x20	; 32
    1304:	0c c0       	rjmp	.+24     	; 0x131e <vfprintf+0xcc>
    1306:	8e 32       	cpi	r24, 0x2E	; 46
    1308:	21 f4       	brne	.+8      	; 0x1312 <vfprintf+0xc0>
    130a:	26 fd       	sbrc	r18, 6
    130c:	d5 c2       	rjmp	.+1450   	; 0x18b8 <vfprintf+0x666>
    130e:	20 64       	ori	r18, 0x40	; 64
    1310:	06 c0       	rjmp	.+12     	; 0x131e <vfprintf+0xcc>
    1312:	8c 36       	cpi	r24, 0x6C	; 108
    1314:	11 f4       	brne	.+4      	; 0x131a <vfprintf+0xc8>
    1316:	20 68       	ori	r18, 0x80	; 128
    1318:	02 c0       	rjmp	.+4      	; 0x131e <vfprintf+0xcc>
    131a:	88 36       	cpi	r24, 0x68	; 104
    131c:	41 f4       	brne	.+16     	; 0x132e <vfprintf+0xdc>
    131e:	f4 01       	movw	r30, r8
    1320:	93 fd       	sbrc	r25, 3
    1322:	85 91       	lpm	r24, Z+
    1324:	93 ff       	sbrs	r25, 3
    1326:	81 91       	ld	r24, Z+
    1328:	4f 01       	movw	r8, r30
    132a:	81 11       	cpse	r24, r1
    132c:	c1 cf       	rjmp	.-126    	; 0x12b0 <vfprintf+0x5e>
    132e:	9b eb       	ldi	r25, 0xBB	; 187
    1330:	98 0f       	add	r25, r24
    1332:	93 30       	cpi	r25, 0x03	; 3
    1334:	18 f4       	brcc	.+6      	; 0x133c <vfprintf+0xea>
    1336:	20 61       	ori	r18, 0x10	; 16
    1338:	80 5e       	subi	r24, 0xE0	; 224
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <vfprintf+0xf6>
    133c:	9b e9       	ldi	r25, 0x9B	; 155
    133e:	98 0f       	add	r25, r24
    1340:	93 30       	cpi	r25, 0x03	; 3
    1342:	08 f0       	brcs	.+2      	; 0x1346 <vfprintf+0xf4>
    1344:	64 c1       	rjmp	.+712    	; 0x160e <vfprintf+0x3bc>
    1346:	2f 7e       	andi	r18, 0xEF	; 239
    1348:	26 ff       	sbrs	r18, 6
    134a:	16 e0       	ldi	r17, 0x06	; 6
    134c:	2f 73       	andi	r18, 0x3F	; 63
    134e:	32 2e       	mov	r3, r18
    1350:	85 36       	cpi	r24, 0x65	; 101
    1352:	19 f4       	brne	.+6      	; 0x135a <vfprintf+0x108>
    1354:	20 64       	ori	r18, 0x40	; 64
    1356:	32 2e       	mov	r3, r18
    1358:	08 c0       	rjmp	.+16     	; 0x136a <vfprintf+0x118>
    135a:	86 36       	cpi	r24, 0x66	; 102
    135c:	21 f4       	brne	.+8      	; 0x1366 <vfprintf+0x114>
    135e:	f2 2f       	mov	r31, r18
    1360:	f0 68       	ori	r31, 0x80	; 128
    1362:	3f 2e       	mov	r3, r31
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x118>
    1366:	11 11       	cpse	r17, r1
    1368:	11 50       	subi	r17, 0x01	; 1
    136a:	37 fe       	sbrs	r3, 7
    136c:	07 c0       	rjmp	.+14     	; 0x137c <vfprintf+0x12a>
    136e:	1c 33       	cpi	r17, 0x3C	; 60
    1370:	50 f4       	brcc	.+20     	; 0x1386 <vfprintf+0x134>
    1372:	ee 24       	eor	r14, r14
    1374:	e3 94       	inc	r14
    1376:	e1 0e       	add	r14, r17
    1378:	27 e0       	ldi	r18, 0x07	; 7
    137a:	0b c0       	rjmp	.+22     	; 0x1392 <vfprintf+0x140>
    137c:	18 30       	cpi	r17, 0x08	; 8
    137e:	38 f0       	brcs	.+14     	; 0x138e <vfprintf+0x13c>
    1380:	27 e0       	ldi	r18, 0x07	; 7
    1382:	17 e0       	ldi	r17, 0x07	; 7
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <vfprintf+0x13e>
    1386:	27 e0       	ldi	r18, 0x07	; 7
    1388:	4c e3       	ldi	r20, 0x3C	; 60
    138a:	e4 2e       	mov	r14, r20
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vfprintf+0x140>
    138e:	21 2f       	mov	r18, r17
    1390:	e1 2c       	mov	r14, r1
    1392:	52 01       	movw	r10, r4
    1394:	44 e0       	ldi	r20, 0x04	; 4
    1396:	a4 0e       	add	r10, r20
    1398:	b1 1c       	adc	r11, r1
    139a:	f2 01       	movw	r30, r4
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	0e 2d       	mov	r16, r14
    13a6:	a3 01       	movw	r20, r6
    13a8:	e2 d2       	rcall	.+1476   	; 0x196e <__ftoa_engine>
    13aa:	2c 01       	movw	r4, r24
    13ac:	09 81       	ldd	r16, Y+1	; 0x01
    13ae:	00 ff       	sbrs	r16, 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <vfprintf+0x164>
    13b2:	03 ff       	sbrs	r16, 3
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <vfprintf+0x172>
    13b6:	31 fc       	sbrc	r3, 1
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <vfprintf+0x178>
    13ba:	32 fe       	sbrs	r3, 2
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <vfprintf+0x17e>
    13be:	30 e2       	ldi	r19, 0x20	; 32
    13c0:	23 2e       	mov	r2, r19
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <vfprintf+0x180>
    13c4:	2d e2       	ldi	r18, 0x2D	; 45
    13c6:	22 2e       	mov	r2, r18
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <vfprintf+0x180>
    13ca:	9b e2       	ldi	r25, 0x2B	; 43
    13cc:	29 2e       	mov	r2, r25
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <vfprintf+0x180>
    13d0:	21 2c       	mov	r2, r1
    13d2:	80 2f       	mov	r24, r16
    13d4:	8c 70       	andi	r24, 0x0C	; 12
    13d6:	19 f0       	breq	.+6      	; 0x13de <vfprintf+0x18c>
    13d8:	21 10       	cpse	r2, r1
    13da:	51 c2       	rjmp	.+1186   	; 0x187e <vfprintf+0x62c>
    13dc:	8d c2       	rjmp	.+1306   	; 0x18f8 <vfprintf+0x6a6>
    13de:	37 fe       	sbrs	r3, 7
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <vfprintf+0x1ae>
    13e2:	e4 0c       	add	r14, r4
    13e4:	04 ff       	sbrs	r16, 4
    13e6:	04 c0       	rjmp	.+8      	; 0x13f0 <vfprintf+0x19e>
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	81 33       	cpi	r24, 0x31	; 49
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <vfprintf+0x19e>
    13ee:	ea 94       	dec	r14
    13f0:	1e 14       	cp	r1, r14
    13f2:	74 f5       	brge	.+92     	; 0x1450 <vfprintf+0x1fe>
    13f4:	f8 e0       	ldi	r31, 0x08	; 8
    13f6:	fe 15       	cp	r31, r14
    13f8:	78 f5       	brcc	.+94     	; 0x1458 <vfprintf+0x206>
    13fa:	88 e0       	ldi	r24, 0x08	; 8
    13fc:	e8 2e       	mov	r14, r24
    13fe:	2c c0       	rjmp	.+88     	; 0x1458 <vfprintf+0x206>
    1400:	36 fc       	sbrc	r3, 6
    1402:	2a c0       	rjmp	.+84     	; 0x1458 <vfprintf+0x206>
    1404:	81 2f       	mov	r24, r17
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	84 15       	cp	r24, r4
    140a:	95 05       	cpc	r25, r5
    140c:	9c f0       	brlt	.+38     	; 0x1434 <vfprintf+0x1e2>
    140e:	2c ef       	ldi	r18, 0xFC	; 252
    1410:	42 16       	cp	r4, r18
    1412:	2f ef       	ldi	r18, 0xFF	; 255
    1414:	52 06       	cpc	r5, r18
    1416:	74 f0       	brlt	.+28     	; 0x1434 <vfprintf+0x1e2>
    1418:	43 2d       	mov	r20, r3
    141a:	40 68       	ori	r20, 0x80	; 128
    141c:	34 2e       	mov	r3, r20
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <vfprintf+0x1e2>
    1420:	e2 e0       	ldi	r30, 0x02	; 2
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	ec 0f       	add	r30, r28
    1426:	fd 1f       	adc	r31, r29
    1428:	e1 0f       	add	r30, r17
    142a:	f1 1d       	adc	r31, r1
    142c:	80 81       	ld	r24, Z
    142e:	80 33       	cpi	r24, 0x30	; 48
    1430:	19 f4       	brne	.+6      	; 0x1438 <vfprintf+0x1e6>
    1432:	11 50       	subi	r17, 0x01	; 1
    1434:	11 11       	cpse	r17, r1
    1436:	f4 cf       	rjmp	.-24     	; 0x1420 <vfprintf+0x1ce>
    1438:	37 fe       	sbrs	r3, 7
    143a:	0e c0       	rjmp	.+28     	; 0x1458 <vfprintf+0x206>
    143c:	ee 24       	eor	r14, r14
    143e:	e3 94       	inc	r14
    1440:	e1 0e       	add	r14, r17
    1442:	81 2f       	mov	r24, r17
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	48 16       	cp	r4, r24
    1448:	59 06       	cpc	r5, r25
    144a:	2c f4       	brge	.+10     	; 0x1456 <vfprintf+0x204>
    144c:	14 19       	sub	r17, r4
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <vfprintf+0x206>
    1450:	ee 24       	eor	r14, r14
    1452:	e3 94       	inc	r14
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <vfprintf+0x206>
    1456:	10 e0       	ldi	r17, 0x00	; 0
    1458:	37 fe       	sbrs	r3, 7
    145a:	06 c0       	rjmp	.+12     	; 0x1468 <vfprintf+0x216>
    145c:	14 14       	cp	r1, r4
    145e:	15 04       	cpc	r1, r5
    1460:	34 f4       	brge	.+12     	; 0x146e <vfprintf+0x21c>
    1462:	c2 01       	movw	r24, r4
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <vfprintf+0x220>
    1468:	85 e0       	ldi	r24, 0x05	; 5
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <vfprintf+0x220>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	21 10       	cpse	r2, r1
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	11 23       	and	r17, r17
    1478:	31 f0       	breq	.+12     	; 0x1486 <vfprintf+0x234>
    147a:	21 2f       	mov	r18, r17
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	82 0f       	add	r24, r18
    1484:	93 1f       	adc	r25, r19
    1486:	2f 2d       	mov	r18, r15
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	82 17       	cp	r24, r18
    148c:	93 07       	cpc	r25, r19
    148e:	14 f4       	brge	.+4      	; 0x1494 <vfprintf+0x242>
    1490:	f8 1a       	sub	r15, r24
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <vfprintf+0x244>
    1494:	f1 2c       	mov	r15, r1
    1496:	83 2d       	mov	r24, r3
    1498:	89 70       	andi	r24, 0x09	; 9
    149a:	41 f4       	brne	.+16     	; 0x14ac <vfprintf+0x25a>
    149c:	ff 20       	and	r15, r15
    149e:	31 f0       	breq	.+12     	; 0x14ac <vfprintf+0x25a>
    14a0:	b6 01       	movw	r22, r12
    14a2:	80 e2       	ldi	r24, 0x20	; 32
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	51 d3       	rcall	.+1698   	; 0x1b4a <fputc>
    14a8:	fa 94       	dec	r15
    14aa:	f8 cf       	rjmp	.-16     	; 0x149c <vfprintf+0x24a>
    14ac:	22 20       	and	r2, r2
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <vfprintf+0x266>
    14b0:	b6 01       	movw	r22, r12
    14b2:	82 2d       	mov	r24, r2
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	49 d3       	rcall	.+1682   	; 0x1b4a <fputc>
    14b8:	33 fc       	sbrc	r3, 3
    14ba:	08 c0       	rjmp	.+16     	; 0x14cc <vfprintf+0x27a>
    14bc:	ff 20       	and	r15, r15
    14be:	31 f0       	breq	.+12     	; 0x14cc <vfprintf+0x27a>
    14c0:	b6 01       	movw	r22, r12
    14c2:	80 e3       	ldi	r24, 0x30	; 48
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	41 d3       	rcall	.+1666   	; 0x1b4a <fputc>
    14c8:	fa 94       	dec	r15
    14ca:	f8 cf       	rjmp	.-16     	; 0x14bc <vfprintf+0x26a>
    14cc:	37 fe       	sbrs	r3, 7
    14ce:	58 c0       	rjmp	.+176    	; 0x1580 <vfprintf+0x32e>
    14d0:	94 2d       	mov	r25, r4
    14d2:	85 2d       	mov	r24, r5
    14d4:	57 fe       	sbrs	r5, 7
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <vfprintf+0x28a>
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	29 2e       	mov	r2, r25
    14de:	38 2e       	mov	r3, r24
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	a2 01       	movw	r20, r4
    14e6:	4e 19       	sub	r20, r14
    14e8:	51 09       	sbc	r21, r1
    14ea:	4c 87       	std	Y+12, r20	; 0x0c
    14ec:	5d 87       	std	Y+13, r21	; 0x0d
    14ee:	a2 01       	movw	r20, r4
    14f0:	42 19       	sub	r20, r2
    14f2:	53 09       	sbc	r21, r3
    14f4:	4e 87       	std	Y+14, r20	; 0x0e
    14f6:	5f 87       	std	Y+15, r21	; 0x0f
    14f8:	61 2f       	mov	r22, r17
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	44 27       	eor	r20, r20
    14fe:	55 27       	eor	r21, r21
    1500:	46 1b       	sub	r20, r22
    1502:	57 0b       	sbc	r21, r23
    1504:	48 8b       	std	Y+16, r20	; 0x10
    1506:	59 8b       	std	Y+17, r21	; 0x11
    1508:	5f ef       	ldi	r21, 0xFF	; 255
    150a:	25 16       	cp	r2, r21
    150c:	35 06       	cpc	r3, r21
    150e:	41 f4       	brne	.+16     	; 0x1520 <vfprintf+0x2ce>
    1510:	b6 01       	movw	r22, r12
    1512:	8e e2       	ldi	r24, 0x2E	; 46
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	2a 8b       	std	Y+18, r18	; 0x12
    1518:	3b 8b       	std	Y+19, r19	; 0x13
    151a:	17 d3       	rcall	.+1582   	; 0x1b4a <fputc>
    151c:	3b 89       	ldd	r19, Y+19	; 0x13
    151e:	2a 89       	ldd	r18, Y+18	; 0x12
    1520:	42 14       	cp	r4, r2
    1522:	53 04       	cpc	r5, r3
    1524:	6c f0       	brlt	.+26     	; 0x1540 <vfprintf+0x2ee>
    1526:	4c 85       	ldd	r20, Y+12	; 0x0c
    1528:	5d 85       	ldd	r21, Y+13	; 0x0d
    152a:	42 15       	cp	r20, r2
    152c:	53 05       	cpc	r21, r3
    152e:	44 f4       	brge	.+16     	; 0x1540 <vfprintf+0x2ee>
    1530:	ee 85       	ldd	r30, Y+14	; 0x0e
    1532:	ff 85       	ldd	r31, Y+15	; 0x0f
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	e6 0d       	add	r30, r6
    153a:	f7 1d       	adc	r31, r7
    153c:	81 81       	ldd	r24, Z+1	; 0x01
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <vfprintf+0x2f0>
    1540:	80 e3       	ldi	r24, 0x30	; 48
    1542:	51 e0       	ldi	r21, 0x01	; 1
    1544:	25 1a       	sub	r2, r21
    1546:	31 08       	sbc	r3, r1
    1548:	2f 5f       	subi	r18, 0xFF	; 255
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	48 89       	ldd	r20, Y+16	; 0x10
    154e:	59 89       	ldd	r21, Y+17	; 0x11
    1550:	24 16       	cp	r2, r20
    1552:	35 06       	cpc	r3, r21
    1554:	44 f0       	brlt	.+16     	; 0x1566 <vfprintf+0x314>
    1556:	b6 01       	movw	r22, r12
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	2a 8b       	std	Y+18, r18	; 0x12
    155c:	3b 8b       	std	Y+19, r19	; 0x13
    155e:	f5 d2       	rcall	.+1514   	; 0x1b4a <fputc>
    1560:	2a 89       	ldd	r18, Y+18	; 0x12
    1562:	3b 89       	ldd	r19, Y+19	; 0x13
    1564:	d1 cf       	rjmp	.-94     	; 0x1508 <vfprintf+0x2b6>
    1566:	24 14       	cp	r2, r4
    1568:	35 04       	cpc	r3, r5
    156a:	39 f4       	brne	.+14     	; 0x157a <vfprintf+0x328>
    156c:	9a 81       	ldd	r25, Y+2	; 0x02
    156e:	96 33       	cpi	r25, 0x36	; 54
    1570:	18 f4       	brcc	.+6      	; 0x1578 <vfprintf+0x326>
    1572:	95 33       	cpi	r25, 0x35	; 53
    1574:	11 f4       	brne	.+4      	; 0x157a <vfprintf+0x328>
    1576:	04 ff       	sbrs	r16, 4
    1578:	81 e3       	ldi	r24, 0x31	; 49
    157a:	b6 01       	movw	r22, r12
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	45 c0       	rjmp	.+138    	; 0x160a <vfprintf+0x3b8>
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	81 33       	cpi	r24, 0x31	; 49
    1584:	09 f0       	breq	.+2      	; 0x1588 <vfprintf+0x336>
    1586:	0f 7e       	andi	r16, 0xEF	; 239
    1588:	b6 01       	movw	r22, r12
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	de d2       	rcall	.+1468   	; 0x1b4a <fputc>
    158e:	11 11       	cpse	r17, r1
    1590:	05 c0       	rjmp	.+10     	; 0x159c <vfprintf+0x34a>
    1592:	34 fc       	sbrc	r3, 4
    1594:	16 c0       	rjmp	.+44     	; 0x15c2 <vfprintf+0x370>
    1596:	85 e6       	ldi	r24, 0x65	; 101
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	15 c0       	rjmp	.+42     	; 0x15c6 <vfprintf+0x374>
    159c:	b6 01       	movw	r22, r12
    159e:	8e e2       	ldi	r24, 0x2E	; 46
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	d3 d2       	rcall	.+1446   	; 0x1b4a <fputc>
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	ee 24       	eor	r14, r14
    15a8:	e3 94       	inc	r14
    15aa:	e8 0e       	add	r14, r24
    15ac:	f3 01       	movw	r30, r6
    15ae:	e8 0f       	add	r30, r24
    15b0:	f1 1d       	adc	r31, r1
    15b2:	80 81       	ld	r24, Z
    15b4:	b6 01       	movw	r22, r12
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	c8 d2       	rcall	.+1424   	; 0x1b4a <fputc>
    15ba:	11 50       	subi	r17, 0x01	; 1
    15bc:	8e 2d       	mov	r24, r14
    15be:	99 f7       	brne	.-26     	; 0x15a6 <vfprintf+0x354>
    15c0:	e8 cf       	rjmp	.-48     	; 0x1592 <vfprintf+0x340>
    15c2:	85 e4       	ldi	r24, 0x45	; 69
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	b6 01       	movw	r22, r12
    15c8:	c0 d2       	rcall	.+1408   	; 0x1b4a <fputc>
    15ca:	57 fc       	sbrc	r5, 7
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <vfprintf+0x386>
    15ce:	41 14       	cp	r4, r1
    15d0:	51 04       	cpc	r5, r1
    15d2:	39 f4       	brne	.+14     	; 0x15e2 <vfprintf+0x390>
    15d4:	04 ff       	sbrs	r16, 4
    15d6:	05 c0       	rjmp	.+10     	; 0x15e2 <vfprintf+0x390>
    15d8:	51 94       	neg	r5
    15da:	41 94       	neg	r4
    15dc:	51 08       	sbc	r5, r1
    15de:	8d e2       	ldi	r24, 0x2D	; 45
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <vfprintf+0x392>
    15e2:	8b e2       	ldi	r24, 0x2B	; 43
    15e4:	b6 01       	movw	r22, r12
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	b0 d2       	rcall	.+1376   	; 0x1b4a <fputc>
    15ea:	80 e3       	ldi	r24, 0x30	; 48
    15ec:	9a e0       	ldi	r25, 0x0A	; 10
    15ee:	49 16       	cp	r4, r25
    15f0:	51 04       	cpc	r5, r1
    15f2:	2c f0       	brlt	.+10     	; 0x15fe <vfprintf+0x3ac>
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	5a e0       	ldi	r21, 0x0A	; 10
    15f8:	45 1a       	sub	r4, r21
    15fa:	51 08       	sbc	r5, r1
    15fc:	f7 cf       	rjmp	.-18     	; 0x15ec <vfprintf+0x39a>
    15fe:	b6 01       	movw	r22, r12
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a3 d2       	rcall	.+1350   	; 0x1b4a <fputc>
    1604:	b6 01       	movw	r22, r12
    1606:	c2 01       	movw	r24, r4
    1608:	c0 96       	adiw	r24, 0x30	; 48
    160a:	9f d2       	rcall	.+1342   	; 0x1b4a <fputc>
    160c:	4c c1       	rjmp	.+664    	; 0x18a6 <vfprintf+0x654>
    160e:	83 36       	cpi	r24, 0x63	; 99
    1610:	31 f0       	breq	.+12     	; 0x161e <vfprintf+0x3cc>
    1612:	83 37       	cpi	r24, 0x73	; 115
    1614:	79 f0       	breq	.+30     	; 0x1634 <vfprintf+0x3e2>
    1616:	83 35       	cpi	r24, 0x53	; 83
    1618:	09 f0       	breq	.+2      	; 0x161c <vfprintf+0x3ca>
    161a:	54 c0       	rjmp	.+168    	; 0x16c4 <vfprintf+0x472>
    161c:	20 c0       	rjmp	.+64     	; 0x165e <vfprintf+0x40c>
    161e:	52 01       	movw	r10, r4
    1620:	e2 e0       	ldi	r30, 0x02	; 2
    1622:	ae 0e       	add	r10, r30
    1624:	b1 1c       	adc	r11, r1
    1626:	f2 01       	movw	r30, r4
    1628:	80 81       	ld	r24, Z
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	01 e0       	ldi	r16, 0x01	; 1
    162e:	10 e0       	ldi	r17, 0x00	; 0
    1630:	23 01       	movw	r4, r6
    1632:	13 c0       	rjmp	.+38     	; 0x165a <vfprintf+0x408>
    1634:	52 01       	movw	r10, r4
    1636:	f2 e0       	ldi	r31, 0x02	; 2
    1638:	af 0e       	add	r10, r31
    163a:	b1 1c       	adc	r11, r1
    163c:	f2 01       	movw	r30, r4
    163e:	40 80       	ld	r4, Z
    1640:	51 80       	ldd	r5, Z+1	; 0x01
    1642:	26 ff       	sbrs	r18, 6
    1644:	03 c0       	rjmp	.+6      	; 0x164c <vfprintf+0x3fa>
    1646:	61 2f       	mov	r22, r17
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0x3fe>
    164c:	6f ef       	ldi	r22, 0xFF	; 255
    164e:	7f ef       	ldi	r23, 0xFF	; 255
    1650:	c2 01       	movw	r24, r4
    1652:	2a 8b       	std	Y+18, r18	; 0x12
    1654:	6f d2       	rcall	.+1246   	; 0x1b34 <strnlen>
    1656:	8c 01       	movw	r16, r24
    1658:	2a 89       	ldd	r18, Y+18	; 0x12
    165a:	2f 77       	andi	r18, 0x7F	; 127
    165c:	14 c0       	rjmp	.+40     	; 0x1686 <vfprintf+0x434>
    165e:	52 01       	movw	r10, r4
    1660:	f2 e0       	ldi	r31, 0x02	; 2
    1662:	af 0e       	add	r10, r31
    1664:	b1 1c       	adc	r11, r1
    1666:	f2 01       	movw	r30, r4
    1668:	40 80       	ld	r4, Z
    166a:	51 80       	ldd	r5, Z+1	; 0x01
    166c:	26 ff       	sbrs	r18, 6
    166e:	03 c0       	rjmp	.+6      	; 0x1676 <vfprintf+0x424>
    1670:	61 2f       	mov	r22, r17
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x428>
    1676:	6f ef       	ldi	r22, 0xFF	; 255
    1678:	7f ef       	ldi	r23, 0xFF	; 255
    167a:	c2 01       	movw	r24, r4
    167c:	2a 8b       	std	Y+18, r18	; 0x12
    167e:	4f d2       	rcall	.+1182   	; 0x1b1e <strnlen_P>
    1680:	8c 01       	movw	r16, r24
    1682:	2a 89       	ldd	r18, Y+18	; 0x12
    1684:	20 68       	ori	r18, 0x80	; 128
    1686:	32 2e       	mov	r3, r18
    1688:	23 fd       	sbrc	r18, 3
    168a:	18 c0       	rjmp	.+48     	; 0x16bc <vfprintf+0x46a>
    168c:	8f 2d       	mov	r24, r15
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	08 17       	cp	r16, r24
    1692:	19 07       	cpc	r17, r25
    1694:	98 f4       	brcc	.+38     	; 0x16bc <vfprintf+0x46a>
    1696:	b6 01       	movw	r22, r12
    1698:	80 e2       	ldi	r24, 0x20	; 32
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	56 d2       	rcall	.+1196   	; 0x1b4a <fputc>
    169e:	fa 94       	dec	r15
    16a0:	f5 cf       	rjmp	.-22     	; 0x168c <vfprintf+0x43a>
    16a2:	f2 01       	movw	r30, r4
    16a4:	37 fc       	sbrc	r3, 7
    16a6:	85 91       	lpm	r24, Z+
    16a8:	37 fe       	sbrs	r3, 7
    16aa:	81 91       	ld	r24, Z+
    16ac:	2f 01       	movw	r4, r30
    16ae:	b6 01       	movw	r22, r12
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	4b d2       	rcall	.+1174   	; 0x1b4a <fputc>
    16b4:	f1 10       	cpse	r15, r1
    16b6:	fa 94       	dec	r15
    16b8:	01 50       	subi	r16, 0x01	; 1
    16ba:	11 09       	sbc	r17, r1
    16bc:	01 15       	cp	r16, r1
    16be:	11 05       	cpc	r17, r1
    16c0:	81 f7       	brne	.-32     	; 0x16a2 <vfprintf+0x450>
    16c2:	f1 c0       	rjmp	.+482    	; 0x18a6 <vfprintf+0x654>
    16c4:	84 36       	cpi	r24, 0x64	; 100
    16c6:	11 f0       	breq	.+4      	; 0x16cc <vfprintf+0x47a>
    16c8:	89 36       	cpi	r24, 0x69	; 105
    16ca:	51 f5       	brne	.+84     	; 0x1720 <vfprintf+0x4ce>
    16cc:	52 01       	movw	r10, r4
    16ce:	27 ff       	sbrs	r18, 7
    16d0:	09 c0       	rjmp	.+18     	; 0x16e4 <vfprintf+0x492>
    16d2:	f4 e0       	ldi	r31, 0x04	; 4
    16d4:	af 0e       	add	r10, r31
    16d6:	b1 1c       	adc	r11, r1
    16d8:	f2 01       	movw	r30, r4
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <vfprintf+0x4a6>
    16e4:	f2 e0       	ldi	r31, 0x02	; 2
    16e6:	af 0e       	add	r10, r31
    16e8:	b1 1c       	adc	r11, r1
    16ea:	f2 01       	movw	r30, r4
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	07 2e       	mov	r0, r23
    16f2:	00 0c       	add	r0, r0
    16f4:	88 0b       	sbc	r24, r24
    16f6:	99 0b       	sbc	r25, r25
    16f8:	2f 76       	andi	r18, 0x6F	; 111
    16fa:	32 2e       	mov	r3, r18
    16fc:	97 ff       	sbrs	r25, 7
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <vfprintf+0x4c0>
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	20 68       	ori	r18, 0x80	; 128
    1710:	32 2e       	mov	r3, r18
    1712:	2a e0       	ldi	r18, 0x0A	; 10
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	a3 01       	movw	r20, r6
    1718:	70 d2       	rcall	.+1248   	; 0x1bfa <__ultoa_invert>
    171a:	e8 2e       	mov	r14, r24
    171c:	e6 18       	sub	r14, r6
    171e:	3e c0       	rjmp	.+124    	; 0x179c <vfprintf+0x54a>
    1720:	02 2f       	mov	r16, r18
    1722:	85 37       	cpi	r24, 0x75	; 117
    1724:	21 f4       	brne	.+8      	; 0x172e <vfprintf+0x4dc>
    1726:	0f 7e       	andi	r16, 0xEF	; 239
    1728:	2a e0       	ldi	r18, 0x0A	; 10
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	1d c0       	rjmp	.+58     	; 0x1768 <vfprintf+0x516>
    172e:	09 7f       	andi	r16, 0xF9	; 249
    1730:	8f 36       	cpi	r24, 0x6F	; 111
    1732:	91 f0       	breq	.+36     	; 0x1758 <vfprintf+0x506>
    1734:	18 f4       	brcc	.+6      	; 0x173c <vfprintf+0x4ea>
    1736:	88 35       	cpi	r24, 0x58	; 88
    1738:	59 f0       	breq	.+22     	; 0x1750 <vfprintf+0x4fe>
    173a:	be c0       	rjmp	.+380    	; 0x18b8 <vfprintf+0x666>
    173c:	80 37       	cpi	r24, 0x70	; 112
    173e:	19 f0       	breq	.+6      	; 0x1746 <vfprintf+0x4f4>
    1740:	88 37       	cpi	r24, 0x78	; 120
    1742:	11 f0       	breq	.+4      	; 0x1748 <vfprintf+0x4f6>
    1744:	b9 c0       	rjmp	.+370    	; 0x18b8 <vfprintf+0x666>
    1746:	00 61       	ori	r16, 0x10	; 16
    1748:	04 ff       	sbrs	r16, 4
    174a:	09 c0       	rjmp	.+18     	; 0x175e <vfprintf+0x50c>
    174c:	04 60       	ori	r16, 0x04	; 4
    174e:	07 c0       	rjmp	.+14     	; 0x175e <vfprintf+0x50c>
    1750:	24 ff       	sbrs	r18, 4
    1752:	08 c0       	rjmp	.+16     	; 0x1764 <vfprintf+0x512>
    1754:	06 60       	ori	r16, 0x06	; 6
    1756:	06 c0       	rjmp	.+12     	; 0x1764 <vfprintf+0x512>
    1758:	28 e0       	ldi	r18, 0x08	; 8
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <vfprintf+0x516>
    175e:	20 e1       	ldi	r18, 0x10	; 16
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x516>
    1764:	20 e1       	ldi	r18, 0x10	; 16
    1766:	32 e0       	ldi	r19, 0x02	; 2
    1768:	52 01       	movw	r10, r4
    176a:	07 ff       	sbrs	r16, 7
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <vfprintf+0x52e>
    176e:	f4 e0       	ldi	r31, 0x04	; 4
    1770:	af 0e       	add	r10, r31
    1772:	b1 1c       	adc	r11, r1
    1774:	f2 01       	movw	r30, r4
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <vfprintf+0x53e>
    1780:	f2 e0       	ldi	r31, 0x02	; 2
    1782:	af 0e       	add	r10, r31
    1784:	b1 1c       	adc	r11, r1
    1786:	f2 01       	movw	r30, r4
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a3 01       	movw	r20, r6
    1792:	33 d2       	rcall	.+1126   	; 0x1bfa <__ultoa_invert>
    1794:	e8 2e       	mov	r14, r24
    1796:	e6 18       	sub	r14, r6
    1798:	0f 77       	andi	r16, 0x7F	; 127
    179a:	30 2e       	mov	r3, r16
    179c:	36 fe       	sbrs	r3, 6
    179e:	0b c0       	rjmp	.+22     	; 0x17b6 <vfprintf+0x564>
    17a0:	33 2d       	mov	r19, r3
    17a2:	3e 7f       	andi	r19, 0xFE	; 254
    17a4:	e1 16       	cp	r14, r17
    17a6:	50 f4       	brcc	.+20     	; 0x17bc <vfprintf+0x56a>
    17a8:	34 fe       	sbrs	r3, 4
    17aa:	0a c0       	rjmp	.+20     	; 0x17c0 <vfprintf+0x56e>
    17ac:	32 fc       	sbrc	r3, 2
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <vfprintf+0x56e>
    17b0:	33 2d       	mov	r19, r3
    17b2:	3e 7e       	andi	r19, 0xEE	; 238
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <vfprintf+0x56e>
    17b6:	0e 2d       	mov	r16, r14
    17b8:	33 2d       	mov	r19, r3
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <vfprintf+0x570>
    17bc:	0e 2d       	mov	r16, r14
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <vfprintf+0x570>
    17c0:	01 2f       	mov	r16, r17
    17c2:	34 ff       	sbrs	r19, 4
    17c4:	0c c0       	rjmp	.+24     	; 0x17de <vfprintf+0x58c>
    17c6:	fe 01       	movw	r30, r28
    17c8:	ee 0d       	add	r30, r14
    17ca:	f1 1d       	adc	r31, r1
    17cc:	80 81       	ld	r24, Z
    17ce:	80 33       	cpi	r24, 0x30	; 48
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <vfprintf+0x584>
    17d2:	39 7e       	andi	r19, 0xE9	; 233
    17d4:	08 c0       	rjmp	.+16     	; 0x17e6 <vfprintf+0x594>
    17d6:	32 ff       	sbrs	r19, 2
    17d8:	05 c0       	rjmp	.+10     	; 0x17e4 <vfprintf+0x592>
    17da:	0e 5f       	subi	r16, 0xFE	; 254
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <vfprintf+0x594>
    17de:	83 2f       	mov	r24, r19
    17e0:	86 78       	andi	r24, 0x86	; 134
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <vfprintf+0x594>
    17e4:	0f 5f       	subi	r16, 0xFF	; 255
    17e6:	33 fd       	sbrc	r19, 3
    17e8:	12 c0       	rjmp	.+36     	; 0x180e <vfprintf+0x5bc>
    17ea:	30 ff       	sbrs	r19, 0
    17ec:	06 c0       	rjmp	.+12     	; 0x17fa <vfprintf+0x5a8>
    17ee:	1e 2d       	mov	r17, r14
    17f0:	0f 15       	cp	r16, r15
    17f2:	18 f4       	brcc	.+6      	; 0x17fa <vfprintf+0x5a8>
    17f4:	1f 0d       	add	r17, r15
    17f6:	10 1b       	sub	r17, r16
    17f8:	0f 2d       	mov	r16, r15
    17fa:	0f 15       	cp	r16, r15
    17fc:	60 f4       	brcc	.+24     	; 0x1816 <vfprintf+0x5c4>
    17fe:	b6 01       	movw	r22, r12
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	3b 8b       	std	Y+19, r19	; 0x13
    1806:	a1 d1       	rcall	.+834    	; 0x1b4a <fputc>
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	3b 89       	ldd	r19, Y+19	; 0x13
    180c:	f6 cf       	rjmp	.-20     	; 0x17fa <vfprintf+0x5a8>
    180e:	0f 15       	cp	r16, r15
    1810:	10 f4       	brcc	.+4      	; 0x1816 <vfprintf+0x5c4>
    1812:	f0 1a       	sub	r15, r16
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <vfprintf+0x5c6>
    1816:	f1 2c       	mov	r15, r1
    1818:	34 ff       	sbrs	r19, 4
    181a:	11 c0       	rjmp	.+34     	; 0x183e <vfprintf+0x5ec>
    181c:	b6 01       	movw	r22, r12
    181e:	80 e3       	ldi	r24, 0x30	; 48
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	3b 8b       	std	Y+19, r19	; 0x13
    1824:	92 d1       	rcall	.+804    	; 0x1b4a <fputc>
    1826:	3b 89       	ldd	r19, Y+19	; 0x13
    1828:	32 ff       	sbrs	r19, 2
    182a:	16 c0       	rjmp	.+44     	; 0x1858 <vfprintf+0x606>
    182c:	31 fd       	sbrc	r19, 1
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <vfprintf+0x5e4>
    1830:	88 e7       	ldi	r24, 0x78	; 120
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 c0       	rjmp	.+4      	; 0x183a <vfprintf+0x5e8>
    1836:	88 e5       	ldi	r24, 0x58	; 88
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	b6 01       	movw	r22, r12
    183c:	0c c0       	rjmp	.+24     	; 0x1856 <vfprintf+0x604>
    183e:	83 2f       	mov	r24, r19
    1840:	86 78       	andi	r24, 0x86	; 134
    1842:	51 f0       	breq	.+20     	; 0x1858 <vfprintf+0x606>
    1844:	31 ff       	sbrs	r19, 1
    1846:	02 c0       	rjmp	.+4      	; 0x184c <vfprintf+0x5fa>
    1848:	8b e2       	ldi	r24, 0x2B	; 43
    184a:	01 c0       	rjmp	.+2      	; 0x184e <vfprintf+0x5fc>
    184c:	80 e2       	ldi	r24, 0x20	; 32
    184e:	37 fd       	sbrc	r19, 7
    1850:	8d e2       	ldi	r24, 0x2D	; 45
    1852:	b6 01       	movw	r22, r12
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	79 d1       	rcall	.+754    	; 0x1b4a <fputc>
    1858:	e1 16       	cp	r14, r17
    185a:	30 f4       	brcc	.+12     	; 0x1868 <vfprintf+0x616>
    185c:	b6 01       	movw	r22, r12
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	73 d1       	rcall	.+742    	; 0x1b4a <fputc>
    1864:	11 50       	subi	r17, 0x01	; 1
    1866:	f8 cf       	rjmp	.-16     	; 0x1858 <vfprintf+0x606>
    1868:	ea 94       	dec	r14
    186a:	f3 01       	movw	r30, r6
    186c:	ee 0d       	add	r30, r14
    186e:	f1 1d       	adc	r31, r1
    1870:	80 81       	ld	r24, Z
    1872:	b6 01       	movw	r22, r12
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	69 d1       	rcall	.+722    	; 0x1b4a <fputc>
    1878:	e1 10       	cpse	r14, r1
    187a:	f6 cf       	rjmp	.-20     	; 0x1868 <vfprintf+0x616>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <vfprintf+0x654>
    187e:	f4 e0       	ldi	r31, 0x04	; 4
    1880:	ff 15       	cp	r31, r15
    1882:	48 f5       	brcc	.+82     	; 0x18d6 <vfprintf+0x684>
    1884:	84 e0       	ldi	r24, 0x04	; 4
    1886:	f8 1a       	sub	r15, r24
    1888:	33 fe       	sbrs	r3, 3
    188a:	1d c0       	rjmp	.+58     	; 0x18c6 <vfprintf+0x674>
    188c:	21 10       	cpse	r2, r1
    188e:	24 c0       	rjmp	.+72     	; 0x18d8 <vfprintf+0x686>
    1890:	03 ff       	sbrs	r16, 3
    1892:	27 c0       	rjmp	.+78     	; 0x18e2 <vfprintf+0x690>
    1894:	0c ef       	ldi	r16, 0xFC	; 252
    1896:	11 e0       	ldi	r17, 0x01	; 1
    1898:	f3 2d       	mov	r31, r3
    189a:	f0 71       	andi	r31, 0x10	; 16
    189c:	3f 2e       	mov	r3, r31
    189e:	f8 01       	movw	r30, r16
    18a0:	84 91       	lpm	r24, Z
    18a2:	81 11       	cpse	r24, r1
    18a4:	21 c0       	rjmp	.+66     	; 0x18e8 <vfprintf+0x696>
    18a6:	ff 20       	and	r15, r15
    18a8:	09 f4       	brne	.+2      	; 0x18ac <vfprintf+0x65a>
    18aa:	fd cc       	rjmp	.-1542   	; 0x12a6 <vfprintf+0x54>
    18ac:	b6 01       	movw	r22, r12
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	4b d1       	rcall	.+662    	; 0x1b4a <fputc>
    18b4:	fa 94       	dec	r15
    18b6:	f7 cf       	rjmp	.-18     	; 0x18a6 <vfprintf+0x654>
    18b8:	f6 01       	movw	r30, r12
    18ba:	86 81       	ldd	r24, Z+6	; 0x06
    18bc:	97 81       	ldd	r25, Z+7	; 0x07
    18be:	23 c0       	rjmp	.+70     	; 0x1906 <vfprintf+0x6b4>
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	20 c0       	rjmp	.+64     	; 0x1906 <vfprintf+0x6b4>
    18c6:	b6 01       	movw	r22, r12
    18c8:	80 e2       	ldi	r24, 0x20	; 32
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	3e d1       	rcall	.+636    	; 0x1b4a <fputc>
    18ce:	fa 94       	dec	r15
    18d0:	f1 10       	cpse	r15, r1
    18d2:	f9 cf       	rjmp	.-14     	; 0x18c6 <vfprintf+0x674>
    18d4:	db cf       	rjmp	.-74     	; 0x188c <vfprintf+0x63a>
    18d6:	f1 2c       	mov	r15, r1
    18d8:	b6 01       	movw	r22, r12
    18da:	82 2d       	mov	r24, r2
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	35 d1       	rcall	.+618    	; 0x1b4a <fputc>
    18e0:	d7 cf       	rjmp	.-82     	; 0x1890 <vfprintf+0x63e>
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	12 e0       	ldi	r17, 0x02	; 2
    18e6:	d8 cf       	rjmp	.-80     	; 0x1898 <vfprintf+0x646>
    18e8:	31 10       	cpse	r3, r1
    18ea:	80 52       	subi	r24, 0x20	; 32
    18ec:	b6 01       	movw	r22, r12
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	2c d1       	rcall	.+600    	; 0x1b4a <fputc>
    18f2:	0f 5f       	subi	r16, 0xFF	; 255
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	d3 cf       	rjmp	.-90     	; 0x189e <vfprintf+0x64c>
    18f8:	23 e0       	ldi	r18, 0x03	; 3
    18fa:	2f 15       	cp	r18, r15
    18fc:	10 f4       	brcc	.+4      	; 0x1902 <vfprintf+0x6b0>
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	c2 cf       	rjmp	.-124    	; 0x1886 <vfprintf+0x634>
    1902:	f1 2c       	mov	r15, r1
    1904:	c5 cf       	rjmp	.-118    	; 0x1890 <vfprintf+0x63e>
    1906:	63 96       	adiw	r28, 0x13	; 19
    1908:	e2 e1       	ldi	r30, 0x12	; 18
    190a:	19 c0       	rjmp	.+50     	; 0x193e <__epilogue_restores__>

0000190c <__prologue_saves__>:
    190c:	2f 92       	push	r2
    190e:	3f 92       	push	r3
    1910:	4f 92       	push	r4
    1912:	5f 92       	push	r5
    1914:	6f 92       	push	r6
    1916:	7f 92       	push	r7
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	ca 1b       	sub	r28, r26
    1936:	db 0b       	sbc	r29, r27
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	09 94       	ijmp

0000193e <__epilogue_restores__>:
    193e:	2a 88       	ldd	r2, Y+18	; 0x12
    1940:	39 88       	ldd	r3, Y+17	; 0x11
    1942:	48 88       	ldd	r4, Y+16	; 0x10
    1944:	5f 84       	ldd	r5, Y+15	; 0x0f
    1946:	6e 84       	ldd	r6, Y+14	; 0x0e
    1948:	7d 84       	ldd	r7, Y+13	; 0x0d
    194a:	8c 84       	ldd	r8, Y+12	; 0x0c
    194c:	9b 84       	ldd	r9, Y+11	; 0x0b
    194e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1950:	b9 84       	ldd	r11, Y+9	; 0x09
    1952:	c8 84       	ldd	r12, Y+8	; 0x08
    1954:	df 80       	ldd	r13, Y+7	; 0x07
    1956:	ee 80       	ldd	r14, Y+6	; 0x06
    1958:	fd 80       	ldd	r15, Y+5	; 0x05
    195a:	0c 81       	ldd	r16, Y+4	; 0x04
    195c:	1b 81       	ldd	r17, Y+3	; 0x03
    195e:	aa 81       	ldd	r26, Y+2	; 0x02
    1960:	b9 81       	ldd	r27, Y+1	; 0x01
    1962:	ce 0f       	add	r28, r30
    1964:	d1 1d       	adc	r29, r1
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	ed 01       	movw	r28, r26
    196c:	08 95       	ret

0000196e <__ftoa_engine>:
    196e:	28 30       	cpi	r18, 0x08	; 8
    1970:	08 f0       	brcs	.+2      	; 0x1974 <__ftoa_engine+0x6>
    1972:	27 e0       	ldi	r18, 0x07	; 7
    1974:	33 27       	eor	r19, r19
    1976:	da 01       	movw	r26, r20
    1978:	99 0f       	add	r25, r25
    197a:	31 1d       	adc	r19, r1
    197c:	87 fd       	sbrc	r24, 7
    197e:	91 60       	ori	r25, 0x01	; 1
    1980:	00 96       	adiw	r24, 0x00	; 0
    1982:	61 05       	cpc	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	39 f4       	brne	.+14     	; 0x1996 <__ftoa_engine+0x28>
    1988:	32 60       	ori	r19, 0x02	; 2
    198a:	2e 5f       	subi	r18, 0xFE	; 254
    198c:	3d 93       	st	X+, r19
    198e:	30 e3       	ldi	r19, 0x30	; 48
    1990:	2a 95       	dec	r18
    1992:	e1 f7       	brne	.-8      	; 0x198c <__ftoa_engine+0x1e>
    1994:	08 95       	ret
    1996:	9f 3f       	cpi	r25, 0xFF	; 255
    1998:	30 f0       	brcs	.+12     	; 0x19a6 <__ftoa_engine+0x38>
    199a:	80 38       	cpi	r24, 0x80	; 128
    199c:	71 05       	cpc	r23, r1
    199e:	61 05       	cpc	r22, r1
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <__ftoa_engine+0x36>
    19a2:	3c 5f       	subi	r19, 0xFC	; 252
    19a4:	3c 5f       	subi	r19, 0xFC	; 252
    19a6:	3d 93       	st	X+, r19
    19a8:	91 30       	cpi	r25, 0x01	; 1
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <__ftoa_engine+0x40>
    19ac:	80 68       	ori	r24, 0x80	; 128
    19ae:	91 1d       	adc	r25, r1
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	1f 93       	push	r17
    19b6:	0f 93       	push	r16
    19b8:	ff 92       	push	r15
    19ba:	ef 92       	push	r14
    19bc:	19 2f       	mov	r17, r25
    19be:	98 7f       	andi	r25, 0xF8	; 248
    19c0:	96 95       	lsr	r25
    19c2:	e9 2f       	mov	r30, r25
    19c4:	96 95       	lsr	r25
    19c6:	96 95       	lsr	r25
    19c8:	e9 0f       	add	r30, r25
    19ca:	ff 27       	eor	r31, r31
    19cc:	e2 5a       	subi	r30, 0xA2	; 162
    19ce:	fd 4f       	sbci	r31, 0xFD	; 253
    19d0:	99 27       	eor	r25, r25
    19d2:	33 27       	eor	r19, r19
    19d4:	ee 24       	eor	r14, r14
    19d6:	ff 24       	eor	r15, r15
    19d8:	a7 01       	movw	r20, r14
    19da:	e7 01       	movw	r28, r14
    19dc:	05 90       	lpm	r0, Z+
    19de:	08 94       	sec
    19e0:	07 94       	ror	r0
    19e2:	28 f4       	brcc	.+10     	; 0x19ee <__ftoa_engine+0x80>
    19e4:	36 0f       	add	r19, r22
    19e6:	e7 1e       	adc	r14, r23
    19e8:	f8 1e       	adc	r15, r24
    19ea:	49 1f       	adc	r20, r25
    19ec:	51 1d       	adc	r21, r1
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	06 94       	lsr	r0
    19f8:	a1 f7       	brne	.-24     	; 0x19e2 <__ftoa_engine+0x74>
    19fa:	05 90       	lpm	r0, Z+
    19fc:	07 94       	ror	r0
    19fe:	28 f4       	brcc	.+10     	; 0x1a0a <__ftoa_engine+0x9c>
    1a00:	e7 0e       	add	r14, r23
    1a02:	f8 1e       	adc	r15, r24
    1a04:	49 1f       	adc	r20, r25
    1a06:	56 1f       	adc	r21, r22
    1a08:	c1 1d       	adc	r28, r1
    1a0a:	77 0f       	add	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	66 1f       	adc	r22, r22
    1a12:	06 94       	lsr	r0
    1a14:	a1 f7       	brne	.-24     	; 0x19fe <__ftoa_engine+0x90>
    1a16:	05 90       	lpm	r0, Z+
    1a18:	07 94       	ror	r0
    1a1a:	28 f4       	brcc	.+10     	; 0x1a26 <__ftoa_engine+0xb8>
    1a1c:	f8 0e       	add	r15, r24
    1a1e:	49 1f       	adc	r20, r25
    1a20:	56 1f       	adc	r21, r22
    1a22:	c7 1f       	adc	r28, r23
    1a24:	d1 1d       	adc	r29, r1
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	06 94       	lsr	r0
    1a30:	a1 f7       	brne	.-24     	; 0x1a1a <__ftoa_engine+0xac>
    1a32:	05 90       	lpm	r0, Z+
    1a34:	07 94       	ror	r0
    1a36:	20 f4       	brcc	.+8      	; 0x1a40 <__ftoa_engine+0xd2>
    1a38:	49 0f       	add	r20, r25
    1a3a:	56 1f       	adc	r21, r22
    1a3c:	c7 1f       	adc	r28, r23
    1a3e:	d8 1f       	adc	r29, r24
    1a40:	99 0f       	add	r25, r25
    1a42:	66 1f       	adc	r22, r22
    1a44:	77 1f       	adc	r23, r23
    1a46:	88 1f       	adc	r24, r24
    1a48:	06 94       	lsr	r0
    1a4a:	a9 f7       	brne	.-22     	; 0x1a36 <__ftoa_engine+0xc8>
    1a4c:	84 91       	lpm	r24, Z
    1a4e:	10 95       	com	r17
    1a50:	17 70       	andi	r17, 0x07	; 7
    1a52:	41 f0       	breq	.+16     	; 0x1a64 <__ftoa_engine+0xf6>
    1a54:	d6 95       	lsr	r29
    1a56:	c7 95       	ror	r28
    1a58:	57 95       	ror	r21
    1a5a:	47 95       	ror	r20
    1a5c:	f7 94       	ror	r15
    1a5e:	e7 94       	ror	r14
    1a60:	1a 95       	dec	r17
    1a62:	c1 f7       	brne	.-16     	; 0x1a54 <__ftoa_engine+0xe6>
    1a64:	e4 e0       	ldi	r30, 0x04	; 4
    1a66:	f2 e0       	ldi	r31, 0x02	; 2
    1a68:	68 94       	set
    1a6a:	15 90       	lpm	r1, Z+
    1a6c:	15 91       	lpm	r17, Z+
    1a6e:	35 91       	lpm	r19, Z+
    1a70:	65 91       	lpm	r22, Z+
    1a72:	95 91       	lpm	r25, Z+
    1a74:	05 90       	lpm	r0, Z+
    1a76:	7f e2       	ldi	r23, 0x2F	; 47
    1a78:	73 95       	inc	r23
    1a7a:	e1 18       	sub	r14, r1
    1a7c:	f1 0a       	sbc	r15, r17
    1a7e:	43 0b       	sbc	r20, r19
    1a80:	56 0b       	sbc	r21, r22
    1a82:	c9 0b       	sbc	r28, r25
    1a84:	d0 09       	sbc	r29, r0
    1a86:	c0 f7       	brcc	.-16     	; 0x1a78 <__ftoa_engine+0x10a>
    1a88:	e1 0c       	add	r14, r1
    1a8a:	f1 1e       	adc	r15, r17
    1a8c:	43 1f       	adc	r20, r19
    1a8e:	56 1f       	adc	r21, r22
    1a90:	c9 1f       	adc	r28, r25
    1a92:	d0 1d       	adc	r29, r0
    1a94:	7e f4       	brtc	.+30     	; 0x1ab4 <__ftoa_engine+0x146>
    1a96:	70 33       	cpi	r23, 0x30	; 48
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <__ftoa_engine+0x130>
    1a9a:	8a 95       	dec	r24
    1a9c:	e6 cf       	rjmp	.-52     	; 0x1a6a <__ftoa_engine+0xfc>
    1a9e:	e8 94       	clt
    1aa0:	01 50       	subi	r16, 0x01	; 1
    1aa2:	30 f0       	brcs	.+12     	; 0x1ab0 <__ftoa_engine+0x142>
    1aa4:	08 0f       	add	r16, r24
    1aa6:	0a f4       	brpl	.+2      	; 0x1aaa <__ftoa_engine+0x13c>
    1aa8:	00 27       	eor	r16, r16
    1aaa:	02 17       	cp	r16, r18
    1aac:	08 f4       	brcc	.+2      	; 0x1ab0 <__ftoa_engine+0x142>
    1aae:	20 2f       	mov	r18, r16
    1ab0:	23 95       	inc	r18
    1ab2:	02 2f       	mov	r16, r18
    1ab4:	7a 33       	cpi	r23, 0x3A	; 58
    1ab6:	28 f0       	brcs	.+10     	; 0x1ac2 <__ftoa_engine+0x154>
    1ab8:	79 e3       	ldi	r23, 0x39	; 57
    1aba:	7d 93       	st	X+, r23
    1abc:	2a 95       	dec	r18
    1abe:	e9 f7       	brne	.-6      	; 0x1aba <__ftoa_engine+0x14c>
    1ac0:	10 c0       	rjmp	.+32     	; 0x1ae2 <__ftoa_engine+0x174>
    1ac2:	7d 93       	st	X+, r23
    1ac4:	2a 95       	dec	r18
    1ac6:	89 f6       	brne	.-94     	; 0x1a6a <__ftoa_engine+0xfc>
    1ac8:	06 94       	lsr	r0
    1aca:	97 95       	ror	r25
    1acc:	67 95       	ror	r22
    1ace:	37 95       	ror	r19
    1ad0:	17 95       	ror	r17
    1ad2:	17 94       	ror	r1
    1ad4:	e1 18       	sub	r14, r1
    1ad6:	f1 0a       	sbc	r15, r17
    1ad8:	43 0b       	sbc	r20, r19
    1ada:	56 0b       	sbc	r21, r22
    1adc:	c9 0b       	sbc	r28, r25
    1ade:	d0 09       	sbc	r29, r0
    1ae0:	98 f0       	brcs	.+38     	; 0x1b08 <__ftoa_engine+0x19a>
    1ae2:	23 95       	inc	r18
    1ae4:	7e 91       	ld	r23, -X
    1ae6:	73 95       	inc	r23
    1ae8:	7a 33       	cpi	r23, 0x3A	; 58
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <__ftoa_engine+0x180>
    1aec:	70 e3       	ldi	r23, 0x30	; 48
    1aee:	7c 93       	st	X, r23
    1af0:	20 13       	cpse	r18, r16
    1af2:	b8 f7       	brcc	.-18     	; 0x1ae2 <__ftoa_engine+0x174>
    1af4:	7e 91       	ld	r23, -X
    1af6:	70 61       	ori	r23, 0x10	; 16
    1af8:	7d 93       	st	X+, r23
    1afa:	30 f0       	brcs	.+12     	; 0x1b08 <__ftoa_engine+0x19a>
    1afc:	83 95       	inc	r24
    1afe:	71 e3       	ldi	r23, 0x31	; 49
    1b00:	7d 93       	st	X+, r23
    1b02:	70 e3       	ldi	r23, 0x30	; 48
    1b04:	2a 95       	dec	r18
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <__ftoa_engine+0x192>
    1b08:	11 24       	eor	r1, r1
    1b0a:	ef 90       	pop	r14
    1b0c:	ff 90       	pop	r15
    1b0e:	0f 91       	pop	r16
    1b10:	1f 91       	pop	r17
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	99 27       	eor	r25, r25
    1b18:	87 fd       	sbrc	r24, 7
    1b1a:	90 95       	com	r25
    1b1c:	08 95       	ret

00001b1e <strnlen_P>:
    1b1e:	fc 01       	movw	r30, r24
    1b20:	05 90       	lpm	r0, Z+
    1b22:	61 50       	subi	r22, 0x01	; 1
    1b24:	70 40       	sbci	r23, 0x00	; 0
    1b26:	01 10       	cpse	r0, r1
    1b28:	d8 f7       	brcc	.-10     	; 0x1b20 <strnlen_P+0x2>
    1b2a:	80 95       	com	r24
    1b2c:	90 95       	com	r25
    1b2e:	8e 0f       	add	r24, r30
    1b30:	9f 1f       	adc	r25, r31
    1b32:	08 95       	ret

00001b34 <strnlen>:
    1b34:	fc 01       	movw	r30, r24
    1b36:	61 50       	subi	r22, 0x01	; 1
    1b38:	70 40       	sbci	r23, 0x00	; 0
    1b3a:	01 90       	ld	r0, Z+
    1b3c:	01 10       	cpse	r0, r1
    1b3e:	d8 f7       	brcc	.-10     	; 0x1b36 <strnlen+0x2>
    1b40:	80 95       	com	r24
    1b42:	90 95       	com	r25
    1b44:	8e 0f       	add	r24, r30
    1b46:	9f 1f       	adc	r25, r31
    1b48:	08 95       	ret

00001b4a <fputc>:
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	fb 01       	movw	r30, r22
    1b54:	23 81       	ldd	r18, Z+3	; 0x03
    1b56:	21 fd       	sbrc	r18, 1
    1b58:	03 c0       	rjmp	.+6      	; 0x1b60 <fputc+0x16>
    1b5a:	8f ef       	ldi	r24, 0xFF	; 255
    1b5c:	9f ef       	ldi	r25, 0xFF	; 255
    1b5e:	28 c0       	rjmp	.+80     	; 0x1bb0 <fputc+0x66>
    1b60:	22 ff       	sbrs	r18, 2
    1b62:	16 c0       	rjmp	.+44     	; 0x1b90 <fputc+0x46>
    1b64:	46 81       	ldd	r20, Z+6	; 0x06
    1b66:	57 81       	ldd	r21, Z+7	; 0x07
    1b68:	24 81       	ldd	r18, Z+4	; 0x04
    1b6a:	35 81       	ldd	r19, Z+5	; 0x05
    1b6c:	42 17       	cp	r20, r18
    1b6e:	53 07       	cpc	r21, r19
    1b70:	44 f4       	brge	.+16     	; 0x1b82 <fputc+0x38>
    1b72:	a0 81       	ld	r26, Z
    1b74:	b1 81       	ldd	r27, Z+1	; 0x01
    1b76:	9d 01       	movw	r18, r26
    1b78:	2f 5f       	subi	r18, 0xFF	; 255
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	20 83       	st	Z, r18
    1b7e:	31 83       	std	Z+1, r19	; 0x01
    1b80:	8c 93       	st	X, r24
    1b82:	26 81       	ldd	r18, Z+6	; 0x06
    1b84:	37 81       	ldd	r19, Z+7	; 0x07
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	26 83       	std	Z+6, r18	; 0x06
    1b8c:	37 83       	std	Z+7, r19	; 0x07
    1b8e:	10 c0       	rjmp	.+32     	; 0x1bb0 <fputc+0x66>
    1b90:	eb 01       	movw	r28, r22
    1b92:	09 2f       	mov	r16, r25
    1b94:	18 2f       	mov	r17, r24
    1b96:	00 84       	ldd	r0, Z+8	; 0x08
    1b98:	f1 85       	ldd	r31, Z+9	; 0x09
    1b9a:	e0 2d       	mov	r30, r0
    1b9c:	09 95       	icall
    1b9e:	89 2b       	or	r24, r25
    1ba0:	e1 f6       	brne	.-72     	; 0x1b5a <fputc+0x10>
    1ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba6:	01 96       	adiw	r24, 0x01	; 1
    1ba8:	8e 83       	std	Y+6, r24	; 0x06
    1baa:	9f 83       	std	Y+7, r25	; 0x07
    1bac:	81 2f       	mov	r24, r17
    1bae:	90 2f       	mov	r25, r16
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <sprintf>:
    1bba:	ae e0       	ldi	r26, 0x0E	; 14
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e2 ee       	ldi	r30, 0xE2	; 226
    1bc0:	fd e0       	ldi	r31, 0x0D	; 13
    1bc2:	b2 ce       	rjmp	.-668    	; 0x1928 <__prologue_saves__+0x1c>
    1bc4:	0d 89       	ldd	r16, Y+21	; 0x15
    1bc6:	1e 89       	ldd	r17, Y+22	; 0x16
    1bc8:	86 e0       	ldi	r24, 0x06	; 6
    1bca:	8c 83       	std	Y+4, r24	; 0x04
    1bcc:	09 83       	std	Y+1, r16	; 0x01
    1bce:	1a 83       	std	Y+2, r17	; 0x02
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f e7       	ldi	r25, 0x7F	; 127
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	ae 01       	movw	r20, r28
    1bda:	47 5e       	subi	r20, 0xE7	; 231
    1bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bde:	6f 89       	ldd	r22, Y+23	; 0x17
    1be0:	78 8d       	ldd	r23, Y+24	; 0x18
    1be2:	ce 01       	movw	r24, r28
    1be4:	01 96       	adiw	r24, 0x01	; 1
    1be6:	35 db       	rcall	.-2454   	; 0x1252 <vfprintf>
    1be8:	2f 81       	ldd	r18, Y+7	; 0x07
    1bea:	38 85       	ldd	r19, Y+8	; 0x08
    1bec:	f8 01       	movw	r30, r16
    1bee:	e2 0f       	add	r30, r18
    1bf0:	f3 1f       	adc	r31, r19
    1bf2:	10 82       	st	Z, r1
    1bf4:	2e 96       	adiw	r28, 0x0e	; 14
    1bf6:	e4 e0       	ldi	r30, 0x04	; 4
    1bf8:	b0 ce       	rjmp	.-672    	; 0x195a <__epilogue_restores__+0x1c>

00001bfa <__ultoa_invert>:
    1bfa:	fa 01       	movw	r30, r20
    1bfc:	aa 27       	eor	r26, r26
    1bfe:	28 30       	cpi	r18, 0x08	; 8
    1c00:	51 f1       	breq	.+84     	; 0x1c56 <__ultoa_invert+0x5c>
    1c02:	20 31       	cpi	r18, 0x10	; 16
    1c04:	81 f1       	breq	.+96     	; 0x1c66 <__ultoa_invert+0x6c>
    1c06:	e8 94       	clt
    1c08:	6f 93       	push	r22
    1c0a:	6e 7f       	andi	r22, 0xFE	; 254
    1c0c:	6e 5f       	subi	r22, 0xFE	; 254
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	8f 4f       	sbci	r24, 0xFF	; 255
    1c12:	9f 4f       	sbci	r25, 0xFF	; 255
    1c14:	af 4f       	sbci	r26, 0xFF	; 255
    1c16:	b1 e0       	ldi	r27, 0x01	; 1
    1c18:	3e d0       	rcall	.+124    	; 0x1c96 <__ultoa_invert+0x9c>
    1c1a:	b4 e0       	ldi	r27, 0x04	; 4
    1c1c:	3c d0       	rcall	.+120    	; 0x1c96 <__ultoa_invert+0x9c>
    1c1e:	67 0f       	add	r22, r23
    1c20:	78 1f       	adc	r23, r24
    1c22:	89 1f       	adc	r24, r25
    1c24:	9a 1f       	adc	r25, r26
    1c26:	a1 1d       	adc	r26, r1
    1c28:	68 0f       	add	r22, r24
    1c2a:	79 1f       	adc	r23, r25
    1c2c:	8a 1f       	adc	r24, r26
    1c2e:	91 1d       	adc	r25, r1
    1c30:	a1 1d       	adc	r26, r1
    1c32:	6a 0f       	add	r22, r26
    1c34:	71 1d       	adc	r23, r1
    1c36:	81 1d       	adc	r24, r1
    1c38:	91 1d       	adc	r25, r1
    1c3a:	a1 1d       	adc	r26, r1
    1c3c:	20 d0       	rcall	.+64     	; 0x1c7e <__ultoa_invert+0x84>
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <__ultoa_invert+0x48>
    1c40:	68 94       	set
    1c42:	3f 91       	pop	r19
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	26 9f       	mul	r18, r22
    1c48:	11 24       	eor	r1, r1
    1c4a:	30 19       	sub	r19, r0
    1c4c:	30 5d       	subi	r19, 0xD0	; 208
    1c4e:	31 93       	st	Z+, r19
    1c50:	de f6       	brtc	.-74     	; 0x1c08 <__ultoa_invert+0xe>
    1c52:	cf 01       	movw	r24, r30
    1c54:	08 95       	ret
    1c56:	46 2f       	mov	r20, r22
    1c58:	47 70       	andi	r20, 0x07	; 7
    1c5a:	40 5d       	subi	r20, 0xD0	; 208
    1c5c:	41 93       	st	Z+, r20
    1c5e:	b3 e0       	ldi	r27, 0x03	; 3
    1c60:	0f d0       	rcall	.+30     	; 0x1c80 <__ultoa_invert+0x86>
    1c62:	c9 f7       	brne	.-14     	; 0x1c56 <__ultoa_invert+0x5c>
    1c64:	f6 cf       	rjmp	.-20     	; 0x1c52 <__ultoa_invert+0x58>
    1c66:	46 2f       	mov	r20, r22
    1c68:	4f 70       	andi	r20, 0x0F	; 15
    1c6a:	40 5d       	subi	r20, 0xD0	; 208
    1c6c:	4a 33       	cpi	r20, 0x3A	; 58
    1c6e:	18 f0       	brcs	.+6      	; 0x1c76 <__ultoa_invert+0x7c>
    1c70:	49 5d       	subi	r20, 0xD9	; 217
    1c72:	31 fd       	sbrc	r19, 1
    1c74:	40 52       	subi	r20, 0x20	; 32
    1c76:	41 93       	st	Z+, r20
    1c78:	02 d0       	rcall	.+4      	; 0x1c7e <__ultoa_invert+0x84>
    1c7a:	a9 f7       	brne	.-22     	; 0x1c66 <__ultoa_invert+0x6c>
    1c7c:	ea cf       	rjmp	.-44     	; 0x1c52 <__ultoa_invert+0x58>
    1c7e:	b4 e0       	ldi	r27, 0x04	; 4
    1c80:	a6 95       	lsr	r26
    1c82:	97 95       	ror	r25
    1c84:	87 95       	ror	r24
    1c86:	77 95       	ror	r23
    1c88:	67 95       	ror	r22
    1c8a:	ba 95       	dec	r27
    1c8c:	c9 f7       	brne	.-14     	; 0x1c80 <__ultoa_invert+0x86>
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 05       	cpc	r22, r1
    1c92:	71 05       	cpc	r23, r1
    1c94:	08 95       	ret
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	0a 2e       	mov	r0, r26
    1c9c:	06 94       	lsr	r0
    1c9e:	57 95       	ror	r21
    1ca0:	47 95       	ror	r20
    1ca2:	37 95       	ror	r19
    1ca4:	27 95       	ror	r18
    1ca6:	ba 95       	dec	r27
    1ca8:	c9 f7       	brne	.-14     	; 0x1c9c <__ultoa_invert+0xa2>
    1caa:	62 0f       	add	r22, r18
    1cac:	73 1f       	adc	r23, r19
    1cae:	84 1f       	adc	r24, r20
    1cb0:	95 1f       	adc	r25, r21
    1cb2:	a0 1d       	adc	r26, r0
    1cb4:	08 95       	ret

00001cb6 <_exit>:
    1cb6:	f8 94       	cli

00001cb8 <__stop_program>:
    1cb8:	ff cf       	rjmp	.-2      	; 0x1cb8 <__stop_program>
